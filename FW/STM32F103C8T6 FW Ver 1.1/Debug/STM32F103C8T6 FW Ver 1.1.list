
STM32F103C8T6 FW Ver 1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011af4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  08011c08  08011c08  00012c08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080121a8  080121a8  00014364  2**0
                  CONTENTS
  4 .ARM          00000008  080121a8  080121a8  000131a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080121b0  080121b0  00014364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080121b0  080121b0  000131b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080121b4  080121b4  000131b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000364  20000000  080121b8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001668  20000364  0801251c  00014364  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019cc  0801251c  000149cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00014364  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f9c0  00000000  00000000  0001438d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000574f  00000000  00000000  00033d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c48  00000000  00000000  000394a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015a9  00000000  00000000  0003b0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ef63  00000000  00000000  0003c691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026f42  00000000  00000000  0005b5f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ba47  00000000  00000000  00082536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011df7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008878  00000000  00000000  0011dfc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  00126838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000364 	.word	0x20000364
 800012c:	00000000 	.word	0x00000000
 8000130:	08011bec 	.word	0x08011bec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000368 	.word	0x20000368
 800014c:	08011bec 	.word	0x08011bec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_d2lz>:
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	2200      	movs	r2, #0
 8000d88:	2300      	movs	r3, #0
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	460d      	mov	r5, r1
 8000d8e:	f7ff fe15 	bl	80009bc <__aeabi_dcmplt>
 8000d92:	b928      	cbnz	r0, 8000da0 <__aeabi_d2lz+0x1c>
 8000d94:	4620      	mov	r0, r4
 8000d96:	4629      	mov	r1, r5
 8000d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d9c:	f000 b80a 	b.w	8000db4 <__aeabi_d2ulz>
 8000da0:	4620      	mov	r0, r4
 8000da2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000da6:	f000 f805 	bl	8000db4 <__aeabi_d2ulz>
 8000daa:	4240      	negs	r0, r0
 8000dac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db0:	bd38      	pop	{r3, r4, r5, pc}
 8000db2:	bf00      	nop

08000db4 <__aeabi_d2ulz>:
 8000db4:	b5d0      	push	{r4, r6, r7, lr}
 8000db6:	2200      	movs	r2, #0
 8000db8:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <__aeabi_d2ulz+0x34>)
 8000dba:	4606      	mov	r6, r0
 8000dbc:	460f      	mov	r7, r1
 8000dbe:	f7ff fb8b 	bl	80004d8 <__aeabi_dmul>
 8000dc2:	f7ff fe61 	bl	8000a88 <__aeabi_d2uiz>
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	f7ff fb0c 	bl	80003e4 <__aeabi_ui2d>
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <__aeabi_d2ulz+0x38>)
 8000dd0:	f7ff fb82 	bl	80004d8 <__aeabi_dmul>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	4630      	mov	r0, r6
 8000dda:	4639      	mov	r1, r7
 8000ddc:	f7ff f9c4 	bl	8000168 <__aeabi_dsub>
 8000de0:	f7ff fe52 	bl	8000a88 <__aeabi_d2uiz>
 8000de4:	4621      	mov	r1, r4
 8000de6:	bdd0      	pop	{r4, r6, r7, pc}
 8000de8:	3df00000 	.word	0x3df00000
 8000dec:	41f00000 	.word	0x41f00000

08000df0 <lcd_Init>:
void pulseEnable(void);
void write4bits(uint8_t value);
void write8bits(uint8_t value);

void lcd_Init(uint8_t cols, uint8_t lines)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	460a      	mov	r2, r1
 8000dfa:	71fb      	strb	r3, [r7, #7]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	71bb      	strb	r3, [r7, #6]
  hlcd.data_ports = data_ports;  // LCD 데이터 핀을 data_ports 배열에 복사
 8000e00:	4b32      	ldr	r3, [pc, #200]	@ (8000ecc <lcd_Init+0xdc>)
 8000e02:	4a33      	ldr	r2, [pc, #204]	@ (8000ed0 <lcd_Init+0xe0>)
 8000e04:	601a      	str	r2, [r3, #0]
  hlcd.data_pins = data_pins;    // LCD 데이터 핀을 data_pins 배열에 복사
 8000e06:	4b31      	ldr	r3, [pc, #196]	@ (8000ecc <lcd_Init+0xdc>)
 8000e08:	4a32      	ldr	r2, [pc, #200]	@ (8000ed4 <lcd_Init+0xe4>)
 8000e0a:	605a      	str	r2, [r3, #4]

#ifdef _LCD_4BITMODE_
    hlcd.displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000e0c:	4b2f      	ldr	r3, [pc, #188]	@ (8000ecc <lcd_Init+0xdc>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	721a      	strb	r2, [r3, #8]
#ifdef _LCD_8BITMODE_
    hlcd.displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
#endif


  if (lines > 1) {
 8000e12:	79bb      	ldrb	r3, [r7, #6]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d906      	bls.n	8000e26 <lcd_Init+0x36>
    hlcd.displayfunction |= LCD_2LINE;
 8000e18:	4b2c      	ldr	r3, [pc, #176]	@ (8000ecc <lcd_Init+0xdc>)
 8000e1a:	7a1b      	ldrb	r3, [r3, #8]
 8000e1c:	f043 0308 	orr.w	r3, r3, #8
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4b2a      	ldr	r3, [pc, #168]	@ (8000ecc <lcd_Init+0xdc>)
 8000e24:	721a      	strb	r2, [r3, #8]
  }
  hlcd.numlines = lines;
 8000e26:	4a29      	ldr	r2, [pc, #164]	@ (8000ecc <lcd_Init+0xdc>)
 8000e28:	79bb      	ldrb	r3, [r7, #6]
 8000e2a:	72d3      	strb	r3, [r2, #11]
    hlcd.displayfunction |= LCD_5x10DOTS;
  }

  // 데이터시트에 따르면 전원이 2.7V 이상이 되면 최소 40ms가 필요합니다.
  // 그래서 명령을 보내기 전에 최소 50ms를 기다립니다.
  HAL_Delay(50);
 8000e2c:	2032      	movs	r0, #50	@ 0x32
 8000e2e:	f001 fe61 	bl	8002af4 <HAL_Delay>
  // 이제 RS 및 R/W 핀을 모두 낮은 상태로 끌어내려 명령을 시작합니다.
  HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e38:	4827      	ldr	r0, [pc, #156]	@ (8000ed8 <lcd_Init+0xe8>)
 8000e3a:	f002 ff96 	bl	8003d6a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e44:	4824      	ldr	r0, [pc, #144]	@ (8000ed8 <lcd_Init+0xe8>)
 8000e46:	f002 ff90 	bl	8003d6a <HAL_GPIO_WritePin>

  // 4비트 또는 8비트 모드로 LCD를 설정합니다.
#ifdef _LCD_4BITMODE_
    write4bits(0x03);
 8000e4a:	2003      	movs	r0, #3
 8000e4c:	f000 f934 	bl	80010b8 <write4bits>
    HAL_Delay(4);
 8000e50:	2004      	movs	r0, #4
 8000e52:	f001 fe4f 	bl	8002af4 <HAL_Delay>

    write4bits(0x03);
 8000e56:	2003      	movs	r0, #3
 8000e58:	f000 f92e 	bl	80010b8 <write4bits>
    delay_us(100);
 8000e5c:	2064      	movs	r0, #100	@ 0x64
 8000e5e:	f000 f8d1 	bl	8001004 <delay_us>

    write4bits(0x03);
 8000e62:	2003      	movs	r0, #3
 8000e64:	f000 f928 	bl	80010b8 <write4bits>
    delay_us(150);
 8000e68:	2096      	movs	r0, #150	@ 0x96
 8000e6a:	f000 f8cb 	bl	8001004 <delay_us>

    write4bits(0x02);
 8000e6e:	2002      	movs	r0, #2
 8000e70:	f000 f922 	bl	80010b8 <write4bits>
    delay_us(100);
 8000e74:	2064      	movs	r0, #100	@ 0x64
 8000e76:	f000 f8c5 	bl	8001004 <delay_us>
    command(LCD_FUNCTIONSET | hlcd.displayfunction);
    delay_us(150);
#endif

  // 최종적으로 라인 수, 글꼴 크기 등을 설정합니다.
  command(LCD_FUNCTIONSET | hlcd.displayfunction);
 8000e7a:	4b14      	ldr	r3, [pc, #80]	@ (8000ecc <lcd_Init+0xdc>)
 8000e7c:	7a1b      	ldrb	r3, [r3, #8]
 8000e7e:	f043 0320 	orr.w	r3, r3, #32
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 f89f 	bl	8000fc8 <command>

  // 디스플레이를 커서 또는 깜박임 없이 켭니다.
  hlcd.displaycontrol = LCD_DISPLAYOFF | LCD_CURSOROFF | LCD_BLINKOFF;
 8000e8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <lcd_Init+0xdc>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	725a      	strb	r2, [r3, #9]
  command(LCD_DISPLAYCONTROL | hlcd.displaycontrol);
 8000e90:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <lcd_Init+0xdc>)
 8000e92:	7a5b      	ldrb	r3, [r3, #9]
 8000e94:	f043 0308 	orr.w	r3, r3, #8
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f894 	bl	8000fc8 <command>

  // 디스플레이를 지웁니다.
  lcd_clear();
 8000ea0:	f000 f81c 	bl	8000edc <lcd_clear>
  HAL_Delay(3);
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f001 fe25 	bl	8002af4 <HAL_Delay>

  // 기본 텍스트 방향을 설정합니다.
  hlcd.displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000eaa:	4b08      	ldr	r3, [pc, #32]	@ (8000ecc <lcd_Init+0xdc>)
 8000eac:	2202      	movs	r2, #2
 8000eae:	729a      	strb	r2, [r3, #10]
  // 입력 모드를 설정합니다.
  command(LCD_ENTRYMODESET | hlcd.displaymode);
 8000eb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <lcd_Init+0xdc>)
 8000eb2:	7a9b      	ldrb	r3, [r3, #10]
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f884 	bl	8000fc8 <command>

  lcd_display();
 8000ec0:	f000 f842 	bl	8000f48 <lcd_display>
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000380 	.word	0x20000380
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	20000010 	.word	0x20000010
 8000ed8:	40011000 	.word	0x40011000

08000edc <lcd_clear>:


/********** 사용자를 위한 고수준 명령 **********/
void lcd_clear()
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f000 f871 	bl	8000fc8 <command>
  HAL_Delay(2);
 8000ee6:	2002      	movs	r0, #2
 8000ee8:	f001 fe04 	bl	8002af4 <HAL_Delay>
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <lcd_setCursor>:
  command(LCD_RETURNHOME);
  HAL_Delay(2);
}

void lcd_setCursor(uint8_t col, uint8_t row)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	460a      	mov	r2, r1
 8000efa:	71fb      	strb	r3, [r7, #7]
 8000efc:	4613      	mov	r3, r2
 8000efe:	71bb      	strb	r3, [r7, #6]
  uint8_t row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000f00:	4b0f      	ldr	r3, [pc, #60]	@ (8000f40 <lcd_setCursor+0x50>)
 8000f02:	60fb      	str	r3, [r7, #12]
  if ( row > hlcd.numlines ) {
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <lcd_setCursor+0x54>)
 8000f06:	7adb      	ldrb	r3, [r3, #11]
 8000f08:	79ba      	ldrb	r2, [r7, #6]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d903      	bls.n	8000f16 <lcd_setCursor+0x26>
    row = hlcd.numlines-1;
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <lcd_setCursor+0x54>)
 8000f10:	7adb      	ldrb	r3, [r3, #11]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	71bb      	strb	r3, [r7, #6]
  }

  command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000f16:	79bb      	ldrb	r3, [r7, #6]
 8000f18:	3310      	adds	r3, #16
 8000f1a:	443b      	add	r3, r7
 8000f1c:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	4413      	add	r3, r2
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f2c:	b25b      	sxtb	r3, r3
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 f849 	bl	8000fc8 <command>
}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	54144000 	.word	0x54144000
 8000f44:	20000380 	.word	0x20000380

08000f48 <lcd_display>:
void lcd_noDisplay() {
  hlcd.displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | hlcd.displaycontrol);
}

void lcd_display() {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  hlcd.displaycontrol |= LCD_DISPLAYON;
 8000f4c:	4b08      	ldr	r3, [pc, #32]	@ (8000f70 <lcd_display+0x28>)
 8000f4e:	7a5b      	ldrb	r3, [r3, #9]
 8000f50:	f043 0304 	orr.w	r3, r3, #4
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <lcd_display+0x28>)
 8000f58:	725a      	strb	r2, [r3, #9]
  command(LCD_DISPLAYCONTROL | hlcd.displaycontrol);
 8000f5a:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <lcd_display+0x28>)
 8000f5c:	7a5b      	ldrb	r3, [r3, #9]
 8000f5e:	f043 0308 	orr.w	r3, r3, #8
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 f82f 	bl	8000fc8 <command>
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000380 	.word	0x20000380

08000f74 <lcd_string>:
/*********** 텍스트 출력을 위한 중간 수준의 명령 ***********/
void lcd_putchar(char c) {
	write(c);
}

void lcd_string(char * str_data) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
   while(*str_data) {
 8000f7c:	e006      	b.n	8000f8c <lcd_string+0x18>
	  write(*str_data++);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	1c5a      	adds	r2, r3, #1
 8000f82:	607a      	str	r2, [r7, #4]
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 f82c 	bl	8000fe4 <write>
   while(*str_data) {
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1f4      	bne.n	8000f7e <lcd_string+0xa>
   }
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <lcd_setCurStr>:

void lcd_setCurStr(uint8_t col, uint8_t row,  char * str) {
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	603a      	str	r2, [r7, #0]
 8000fa8:	71fb      	strb	r3, [r7, #7]
 8000faa:	460b      	mov	r3, r1
 8000fac:	71bb      	strb	r3, [r7, #6]
	lcd_setCursor(col, row);
 8000fae:	79ba      	ldrb	r2, [r7, #6]
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff9b 	bl	8000ef0 <lcd_setCursor>
	lcd_string(str);
 8000fba:	6838      	ldr	r0, [r7, #0]
 8000fbc:	f7ff ffda 	bl	8000f74 <lcd_string>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <command>:

/*********** 데이터 및 명령 전송을 위한 저수준 명령 ***********/
void command(uint8_t value) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 f82c 	bl	8001034 <send>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <write>:

size_t write(uint8_t value) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f81e 	bl	8001034 <send>
  return 1;
 8000ff8:	2301      	movs	r3, #1
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <delay_us>:

void delay_us(uint16_t time) {
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800100e:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <delay_us+0x2c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2200      	movs	r2, #0
 8001014:	625a      	str	r2, [r3, #36]	@ 0x24
	while((__HAL_TIM_GET_COUNTER(&htim1))<time);
 8001016:	bf00      	nop
 8001018:	4b05      	ldr	r3, [pc, #20]	@ (8001030 <delay_us+0x2c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800101e:	88fb      	ldrh	r3, [r7, #6]
 8001020:	429a      	cmp	r2, r3
 8001022:	d3f9      	bcc.n	8001018 <delay_us+0x14>
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	200004fc 	.word	0x200004fc

08001034 <send>:

void send(uint8_t value, GPIO_PinState mode) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	460a      	mov	r2, r1
 800103e:	71fb      	strb	r3, [r7, #7]
 8001040:	4613      	mov	r3, r2
 8001042:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, mode);
 8001044:	79bb      	ldrb	r3, [r7, #6]
 8001046:	461a      	mov	r2, r3
 8001048:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800104c:	4808      	ldr	r0, [pc, #32]	@ (8001070 <send+0x3c>)
 800104e:	f002 fe8c 	bl	8003d6a <HAL_GPIO_WritePin>

  #ifdef _LCD_8BITMODE_
    write8bits(value);
  #endif
  #ifdef _LCD_4BITMODE_
    write4bits(value>>4);
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	091b      	lsrs	r3, r3, #4
 8001056:	b2db      	uxtb	r3, r3
 8001058:	4618      	mov	r0, r3
 800105a:	f000 f82d 	bl	80010b8 <write4bits>
    write4bits(value);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	4618      	mov	r0, r3
 8001062:	f000 f829 	bl	80010b8 <write4bits>
  #endif
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40011000 	.word	0x40011000

08001074 <pulseEnable>:

void pulseEnable(void) {
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800107e:	480d      	ldr	r0, [pc, #52]	@ (80010b4 <pulseEnable+0x40>)
 8001080:	f002 fe73 	bl	8003d6a <HAL_GPIO_WritePin>
  delay_us(1);
 8001084:	2001      	movs	r0, #1
 8001086:	f7ff ffbd 	bl	8001004 <delay_us>
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 800108a:	2201      	movs	r2, #1
 800108c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001090:	4808      	ldr	r0, [pc, #32]	@ (80010b4 <pulseEnable+0x40>)
 8001092:	f002 fe6a 	bl	8003d6a <HAL_GPIO_WritePin>
  delay_us(1);
 8001096:	2001      	movs	r0, #1
 8001098:	f7ff ffb4 	bl	8001004 <delay_us>
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010a2:	4804      	ldr	r0, [pc, #16]	@ (80010b4 <pulseEnable+0x40>)
 80010a4:	f002 fe61 	bl	8003d6a <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80010a8:	2001      	movs	r0, #1
 80010aa:	f001 fd23 	bl	8002af4 <HAL_Delay>
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40011000 	.word	0x40011000

080010b8 <write4bits>:

#ifdef _LCD_4BITMODE_
void write4bits(uint8_t value) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 4; i++) {
 80010c2:	2300      	movs	r3, #0
 80010c4:	73fb      	strb	r3, [r7, #15]
 80010c6:	e019      	b.n	80010fc <write4bits+0x44>
    HAL_GPIO_WritePin(hlcd.data_ports[i], hlcd.data_pins[i],  (value >> i) & 0x01 );
 80010c8:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <write4bits+0x58>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	6818      	ldr	r0, [r3, #0]
 80010d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <write4bits+0x58>)
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	8819      	ldrh	r1, [r3, #0]
 80010e0:	79fa      	ldrb	r2, [r7, #7]
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	fa42 f303 	asr.w	r3, r2, r3
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	461a      	mov	r2, r3
 80010f2:	f002 fe3a 	bl	8003d6a <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 4; i++) {
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	3301      	adds	r3, #1
 80010fa:	73fb      	strb	r3, [r7, #15]
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d9e2      	bls.n	80010c8 <write4bits+0x10>
  }

  pulseEnable();
 8001102:	f7ff ffb7 	bl	8001074 <pulseEnable>
}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000380 	.word	0x20000380

08001114 <DS3231_Init>:
#define DS3231_ADDR  0xD0

I2C_HandleTypeDef *i2c;

void DS3231_Init(I2C_HandleTypeDef *handle)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  i2c = handle;
 800111c:	4a03      	ldr	r2, [pc, #12]	@ (800112c <DS3231_Init+0x18>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6013      	str	r3, [r2, #0]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr
 800112c:	2000038c 	.word	0x2000038c

08001130 <DS3231_GetTime>:

bool DS3231_GetTime(_RTC *rtc)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af04      	add	r7, sp, #16
 8001136:	6078      	str	r0, [r7, #4]
	uint8_t startAddr = DS3231_REG_TIME;
 8001138:	2300      	movs	r3, #0
 800113a:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer[7] = {0};
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	2100      	movs	r1, #0
 8001146:	460a      	mov	r2, r1
 8001148:	801a      	strh	r2, [r3, #0]
 800114a:	460a      	mov	r2, r1
 800114c:	709a      	strb	r2, [r3, #2]

	uint8_t Error;

	if(HAL_I2C_Mem_Read(i2c, DS3231_ADDR, startAddr, I2C_MEMADD_SIZE_8BIT, buffer, sizeof(buffer), 1000) != HAL_OK)
 800114e:	4b0d      	ldr	r3, [pc, #52]	@ (8001184 <DS3231_GetTime+0x54>)
 8001150:	6818      	ldr	r0, [r3, #0]
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	b29a      	uxth	r2, r3
 8001156:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800115a:	9302      	str	r3, [sp, #8]
 800115c:	2307      	movs	r3, #7
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	f107 0308 	add.w	r3, r7, #8
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2301      	movs	r3, #1
 8001168:	21d0      	movs	r1, #208	@ 0xd0
 800116a:	f003 f86d 	bl	8004248 <HAL_I2C_Mem_Read>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <DS3231_GetTime+0x48>
		return false;
 8001174:	2300      	movs	r3, #0
 8001176:	e000      	b.n	800117a <DS3231_GetTime+0x4a>

	return true;
 8001178:	2301      	movs	r3, #1
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	2000038c 	.word	0x2000038c

08001188 <DS3231_SetTime>:

bool DS3231_SetTime(_RTC *rtc)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af04      	add	r7, sp, #16
 800118e:	6078      	str	r0, [r7, #4]
	uint8_t startAddr = DS3231_REG_TIME;
 8001190:	2300      	movs	r3, #0
 8001192:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer[7] = {D2B(rtc->Sec), D2B(rtc->Min), D2B(rtc->Hour), rtc->DaysOfWeek, D2B(rtc->Date), D2B(rtc->Month), D2B(rtc->Year)};
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	799b      	ldrb	r3, [r3, #6]
 8001198:	4618      	mov	r0, r3
 800119a:	f000 f919 	bl	80013d0 <D2B>
 800119e:	4603      	mov	r3, r0
 80011a0:	723b      	strb	r3, [r7, #8]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	795b      	ldrb	r3, [r3, #5]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f912 	bl	80013d0 <D2B>
 80011ac:	4603      	mov	r3, r0
 80011ae:	727b      	strb	r3, [r7, #9]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	791b      	ldrb	r3, [r3, #4]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 f90b 	bl	80013d0 <D2B>
 80011ba:	4603      	mov	r3, r0
 80011bc:	72bb      	strb	r3, [r7, #10]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	78db      	ldrb	r3, [r3, #3]
 80011c2:	72fb      	strb	r3, [r7, #11]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	789b      	ldrb	r3, [r3, #2]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 f901 	bl	80013d0 <D2B>
 80011ce:	4603      	mov	r3, r0
 80011d0:	733b      	strb	r3, [r7, #12]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	785b      	ldrb	r3, [r3, #1]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f8fa 	bl	80013d0 <D2B>
 80011dc:	4603      	mov	r3, r0
 80011de:	737b      	strb	r3, [r7, #13]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 f8f3 	bl	80013d0 <D2B>
 80011ea:	4603      	mov	r3, r0
 80011ec:	73bb      	strb	r3, [r7, #14]

	if(HAL_I2C_Mem_Write(i2c, DS3231_ADDR, startAddr, I2C_MEMADD_SIZE_8BIT, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK)
 80011ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001224 <DS3231_SetTime+0x9c>)
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	f04f 33ff 	mov.w	r3, #4294967295
 80011fa:	9302      	str	r3, [sp, #8]
 80011fc:	2307      	movs	r3, #7
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	f107 0308 	add.w	r3, r7, #8
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	2301      	movs	r3, #1
 8001208:	21d0      	movs	r1, #208	@ 0xd0
 800120a:	f002 ff23 	bl	8004054 <HAL_I2C_Mem_Write>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <DS3231_SetTime+0x90>
	    return false;
 8001214:	2300      	movs	r3, #0
 8001216:	e000      	b.n	800121a <DS3231_SetTime+0x92>

	return true;
 8001218:	2301      	movs	r3, #1
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000038c 	.word	0x2000038c

08001228 <is_leap_year>:

// 월별 일 수를 정의 (윤년 계산 포함)
const uint8_t days_in_month[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

bool is_leap_year(uint16_t year)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	80fb      	strh	r3, [r7, #6]
    return ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0));
 8001232:	88fb      	ldrh	r3, [r7, #6]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	b29b      	uxth	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10b      	bne.n	8001256 <is_leap_year+0x2e>
 800123e:	88fb      	ldrh	r3, [r7, #6]
 8001240:	4a11      	ldr	r2, [pc, #68]	@ (8001288 <is_leap_year+0x60>)
 8001242:	fba2 1203 	umull	r1, r2, r2, r3
 8001246:	0952      	lsrs	r2, r2, #5
 8001248:	2164      	movs	r1, #100	@ 0x64
 800124a:	fb01 f202 	mul.w	r2, r1, r2
 800124e:	1a9b      	subs	r3, r3, r2
 8001250:	b29b      	uxth	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10c      	bne.n	8001270 <is_leap_year+0x48>
 8001256:	88fb      	ldrh	r3, [r7, #6]
 8001258:	4a0b      	ldr	r2, [pc, #44]	@ (8001288 <is_leap_year+0x60>)
 800125a:	fba2 1203 	umull	r1, r2, r2, r3
 800125e:	09d2      	lsrs	r2, r2, #7
 8001260:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001264:	fb01 f202 	mul.w	r2, r1, r2
 8001268:	1a9b      	subs	r3, r3, r2
 800126a:	b29b      	uxth	r3, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	d101      	bne.n	8001274 <is_leap_year+0x4c>
 8001270:	2301      	movs	r3, #1
 8001272:	e000      	b.n	8001276 <is_leap_year+0x4e>
 8001274:	2300      	movs	r3, #0
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	b2db      	uxtb	r3, r3
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	51eb851f 	.word	0x51eb851f

0800128c <get_days_in_month>:

uint8_t get_days_in_month(uint8_t month, uint16_t year)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	460a      	mov	r2, r1
 8001296:	71fb      	strb	r3, [r7, #7]
 8001298:	4613      	mov	r3, r2
 800129a:	80bb      	strh	r3, [r7, #4]
    if (month == 2 && is_leap_year(year))
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d108      	bne.n	80012b4 <get_days_in_month+0x28>
 80012a2:	88bb      	ldrh	r3, [r7, #4]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ffbf 	bl	8001228 <is_leap_year>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <get_days_in_month+0x28>
        return 29;
 80012b0:	231d      	movs	r3, #29
 80012b2:	e003      	b.n	80012bc <get_days_in_month+0x30>
    return days_in_month[month - 1];
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	4a02      	ldr	r2, [pc, #8]	@ (80012c4 <get_days_in_month+0x38>)
 80012ba:	5cd3      	ldrb	r3, [r2, r3]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	08011cf0 	.word	0x08011cf0

080012c8 <DS3231_Calibration>:

bool DS3231_Calibration(M6N_UBX_NAV_TIMEUTC* timeutc, _RTC *rtc)
{
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
    static int8_t last_calibration_hour = -1; // 마지막 보정된 시간을 저장하는 정적 변수

    // UTC 기반 시간 설정
    rtc->Year = timeutc->year - 2000;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	899b      	ldrh	r3, [r3, #12]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	3330      	adds	r3, #48	@ 0x30
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	701a      	strb	r2, [r3, #0]
    rtc->Month = timeutc->month;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	7b9a      	ldrb	r2, [r3, #14]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	705a      	strb	r2, [r3, #1]
    rtc->Date = timeutc->day;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	7bda      	ldrb	r2, [r3, #15]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	709a      	strb	r2, [r3, #2]

    rtc->Hour = timeutc->hour + 9; // 시간대를 조정
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	7c1b      	ldrb	r3, [r3, #16]
 80012f4:	3309      	adds	r3, #9
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	711a      	strb	r2, [r3, #4]
    rtc->Min = timeutc->min;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	7c5a      	ldrb	r2, [r3, #17]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	715a      	strb	r2, [r3, #5]
    rtc->Sec = timeutc->sec;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	7c9a      	ldrb	r2, [r3, #18]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	719a      	strb	r2, [r3, #6]

    //조정된 시간이 24시간을 넘어가는 경우 처리
    if (rtc->Hour >= 24)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	791b      	ldrb	r3, [r3, #4]
 8001310:	2b17      	cmp	r3, #23
 8001312:	d931      	bls.n	8001378 <DS3231_Calibration+0xb0>
    {
        rtc->Hour -= 24;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	791b      	ldrb	r3, [r3, #4]
 8001318:	3b18      	subs	r3, #24
 800131a:	b2da      	uxtb	r2, r3
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	711a      	strb	r2, [r3, #4]
        rtc->Date += 1;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	789b      	ldrb	r3, [r3, #2]
 8001324:	3301      	adds	r3, #1
 8001326:	b2da      	uxtb	r2, r3
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	709a      	strb	r2, [r3, #2]

        //만약 +1된 일이 해당하는 월에 존재하지 않는다면
        if (rtc->Date > get_days_in_month(rtc->Month, rtc->Year + 2000))
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	789c      	ldrb	r4, [r3, #2]
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	785a      	ldrb	r2, [r3, #1]
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800133c:	b29b      	uxth	r3, r3
 800133e:	4619      	mov	r1, r3
 8001340:	4610      	mov	r0, r2
 8001342:	f7ff ffa3 	bl	800128c <get_days_in_month>
 8001346:	4603      	mov	r3, r0
 8001348:	429c      	cmp	r4, r3
 800134a:	d915      	bls.n	8001378 <DS3231_Calibration+0xb0>
        {
            rtc->Date = 1;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	2201      	movs	r2, #1
 8001350:	709a      	strb	r2, [r3, #2]
            rtc->Month += 1;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	785b      	ldrb	r3, [r3, #1]
 8001356:	3301      	adds	r3, #1
 8001358:	b2da      	uxtb	r2, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	705a      	strb	r2, [r3, #1]

            //만약 +1된 달이 해당되는 년도에 존재하지 않는다면
            if (rtc->Month > 12)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	785b      	ldrb	r3, [r3, #1]
 8001362:	2b0c      	cmp	r3, #12
 8001364:	d908      	bls.n	8001378 <DS3231_Calibration+0xb0>
            {
                rtc->Month = 1;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	2201      	movs	r2, #1
 800136a:	705a      	strb	r2, [r3, #1]
                rtc->Year += 1;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	3301      	adds	r3, #1
 8001372:	b2da      	uxtb	r2, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // 만약 보정한지 시간이 지났다면
    if (rtc->Hour != last_calibration_hour && rtc->Hour > 0)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	791b      	ldrb	r3, [r3, #4]
 800137c:	461a      	mov	r2, r3
 800137e:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <DS3231_Calibration+0x100>)
 8001380:	f993 3000 	ldrsb.w	r3, [r3]
 8001384:	429a      	cmp	r2, r3
 8001386:	d01a      	beq.n	80013be <DS3231_Calibration+0xf6>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	791b      	ldrb	r3, [r3, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d016      	beq.n	80013be <DS3231_Calibration+0xf6>
    {
        last_calibration_hour = rtc->Hour; // 마지막 보정된 시간 업데이트
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	791b      	ldrb	r3, [r3, #4]
 8001394:	b25a      	sxtb	r2, r3
 8001396:	4b0c      	ldr	r3, [pc, #48]	@ (80013c8 <DS3231_Calibration+0x100>)
 8001398:	701a      	strb	r2, [r3, #0]
        DS3231_SetTime(rtc);
 800139a:	6838      	ldr	r0, [r7, #0]
 800139c:	f7ff fef4 	bl	8001188 <DS3231_SetTime>

        lcd_clear();
 80013a0:	f7ff fd9c 	bl	8000edc <lcd_clear>
        lcd_setCurStr(0, 0, "RTC Calibration...");
 80013a4:	4a09      	ldr	r2, [pc, #36]	@ (80013cc <DS3231_Calibration+0x104>)
 80013a6:	2100      	movs	r1, #0
 80013a8:	2000      	movs	r0, #0
 80013aa:	f7ff fdf8 	bl	8000f9e <lcd_setCurStr>
        HAL_Delay(500);
 80013ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013b2:	f001 fb9f 	bl	8002af4 <HAL_Delay>
        lcd_clear();
 80013b6:	f7ff fd91 	bl	8000edc <lcd_clear>
        return true; // 보정이 실행되었음을 알림
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <DS3231_Calibration+0xf8>
    }
    return false; // 보정이 실행되지 않았음을 알림
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd90      	pop	{r4, r7, pc}
 80013c8:	20000018 	.word	0x20000018
 80013cc:	08011c08 	.word	0x08011c08

080013d0 <D2B>:

  return true;
}

uint8_t D2B(int val)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  return (uint8_t)((val / 10 * 16) + (val % 10));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a0e      	ldr	r2, [pc, #56]	@ (8001414 <D2B+0x44>)
 80013dc:	fb82 1203 	smull	r1, r2, r2, r3
 80013e0:	1092      	asrs	r2, r2, #2
 80013e2:	17db      	asrs	r3, r3, #31
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	b2d8      	uxtb	r0, r3
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <D2B+0x44>)
 80013f0:	fb83 1302 	smull	r1, r3, r3, r2
 80013f4:	1099      	asrs	r1, r3, #2
 80013f6:	17d3      	asrs	r3, r2, #31
 80013f8:	1ac9      	subs	r1, r1, r3
 80013fa:	460b      	mov	r3, r1
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	440b      	add	r3, r1
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	1ad1      	subs	r1, r2, r3
 8001404:	b2cb      	uxtb	r3, r1
 8001406:	4403      	add	r3, r0
 8001408:	b2db      	uxtb	r3, r3
}
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	66666667 	.word	0x66666667

08001418 <M6N_UBX_NAV_TIMEUTC_Parsing>:
		0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x17, 0x31, 0xBF
};

uint8_t M6N_UBX_NAV_TIMEUTC_Parsing(uint8_t* data, M6N_UBX_NAV_TIMEUTC* timeutc)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
	if(m6n_rx_cplt_flag == 1)
 8001422:	4b49      	ldr	r3, [pc, #292]	@ (8001548 <M6N_UBX_NAV_TIMEUTC_Parsing+0x130>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b01      	cmp	r3, #1
 8001428:	f040 8089 	bne.w	800153e <M6N_UBX_NAV_TIMEUTC_Parsing+0x126>
	{
	  m6n_rx_cplt_flag = 0;
 800142c:	4b46      	ldr	r3, [pc, #280]	@ (8001548 <M6N_UBX_NAV_TIMEUTC_Parsing+0x130>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]

		if(M6N_UBX_CHKSUM_Check(&m6n_rx_buf, sizeof(m6n_rx_buf)) == 1)
 8001432:	211c      	movs	r1, #28
 8001434:	4845      	ldr	r0, [pc, #276]	@ (800154c <M6N_UBX_NAV_TIMEUTC_Parsing+0x134>)
 8001436:	f000 f88b 	bl	8001550 <M6N_UBX_CHKSUM_Check>
 800143a:	4603      	mov	r3, r0
 800143c:	2b01      	cmp	r3, #1
 800143e:	d17e      	bne.n	800153e <M6N_UBX_NAV_TIMEUTC_Parsing+0x126>
		{
			timeutc->CLASS = data[2];
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	789a      	ldrb	r2, [r3, #2]
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	751a      	strb	r2, [r3, #20]
			timeutc->ID = data[3];
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	78da      	ldrb	r2, [r3, #3]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	755a      	strb	r2, [r3, #21]
			timeutc->LENGTH = data[4] | (data[5] << 8);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3304      	adds	r3, #4
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b21a      	sxth	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3305      	adds	r3, #5
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	b21b      	sxth	r3, r3
 8001462:	4313      	orrs	r3, r2
 8001464:	b21b      	sxth	r3, r3
 8001466:	b29a      	uxth	r2, r3
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	82da      	strh	r2, [r3, #22]

			timeutc->iTOW = data[6] | (data[7] << 8) | (data[8] << 16) | (data[9] << 24);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3306      	adds	r3, #6
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3307      	adds	r3, #7
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	431a      	orrs	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3308      	adds	r3, #8
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	041b      	lsls	r3, r3, #16
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3309      	adds	r3, #9
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	061b      	lsls	r3, r3, #24
 8001490:	4313      	orrs	r3, r2
 8001492:	461a      	mov	r2, r3
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	601a      	str	r2, [r3, #0]
			timeutc->tAcc = data[10] | (data[11] << 8) | (data[12] << 16) | (data[13] << 24);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	330a      	adds	r3, #10
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	330b      	adds	r3, #11
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	021b      	lsls	r3, r3, #8
 80014a8:	431a      	orrs	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	330c      	adds	r3, #12
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	041b      	lsls	r3, r3, #16
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	330d      	adds	r3, #13
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	061b      	lsls	r3, r3, #24
 80014bc:	4313      	orrs	r3, r2
 80014be:	461a      	mov	r2, r3
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	605a      	str	r2, [r3, #4]
			timeutc->nano = data[14] | (data[15] << 8) | (data[16] << 16) | (data[17] << 24);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	330e      	adds	r3, #14
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	330f      	adds	r3, #15
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	021b      	lsls	r3, r3, #8
 80014d4:	431a      	orrs	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3310      	adds	r3, #16
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	041b      	lsls	r3, r3, #16
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3311      	adds	r3, #17
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	061b      	lsls	r3, r3, #24
 80014e8:	431a      	orrs	r2, r3
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	609a      	str	r2, [r3, #8]
			timeutc->year = data[18] | (data[19] << 8);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3312      	adds	r3, #18
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	b21a      	sxth	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3313      	adds	r3, #19
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	b21b      	sxth	r3, r3
 8001500:	4313      	orrs	r3, r2
 8001502:	b21b      	sxth	r3, r3
 8001504:	b29a      	uxth	r2, r3
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	819a      	strh	r2, [r3, #12]
			timeutc->month = data[20];
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	7d1a      	ldrb	r2, [r3, #20]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	739a      	strb	r2, [r3, #14]
			timeutc->day = data[21];
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	7d5a      	ldrb	r2, [r3, #21]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	73da      	strb	r2, [r3, #15]
			timeutc->hour = data[22];
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7d9a      	ldrb	r2, [r3, #22]
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	741a      	strb	r2, [r3, #16]
			timeutc->min = data[23];
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	7dda      	ldrb	r2, [r3, #23]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	745a      	strb	r2, [r3, #17]
			timeutc->sec = data[24];
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	7e1a      	ldrb	r2, [r3, #24]
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	749a      	strb	r2, [r3, #18]
			timeutc->valid = data[25];
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	7e5a      	ldrb	r2, [r3, #25]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	74da      	strb	r2, [r3, #19]

			return HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	e000      	b.n	8001540 <M6N_UBX_NAV_TIMEUTC_Parsing+0x128>
		}
	}

	return HAL_BUSY;
 800153e:	2302      	movs	r3, #2
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	200003ac 	.word	0x200003ac
 800154c:	20000390 	.word	0x20000390

08001550 <M6N_UBX_CHKSUM_Check>:


unsigned char M6N_UBX_CHKSUM_Check(uint8_t* data, unsigned char len)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	70fb      	strb	r3, [r7, #3]
	unsigned char CK_A = 0, CK_B = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	2300      	movs	r3, #0
 8001562:	73bb      	strb	r3, [r7, #14]

	for(int i = 2; i < len - 2; i++)
 8001564:	2302      	movs	r3, #2
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	e00d      	b.n	8001586 <M6N_UBX_CHKSUM_Check+0x36>
	{
		CK_A = CK_A + data[i];
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	4413      	add	r3, r2
 8001570:	781a      	ldrb	r2, [r3, #0]
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	4413      	add	r3, r2
 8001576:	73fb      	strb	r3, [r7, #15]
		CK_B = CK_B + CK_A;
 8001578:	7bba      	ldrb	r2, [r7, #14]
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	4413      	add	r3, r2
 800157e:	73bb      	strb	r3, [r7, #14]
	for(int i = 2; i < len - 2; i++)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	3301      	adds	r3, #1
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	78fb      	ldrb	r3, [r7, #3]
 8001588:	3b02      	subs	r3, #2
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	429a      	cmp	r2, r3
 800158e:	dbec      	blt.n	800156a <M6N_UBX_CHKSUM_Check+0x1a>
	}

	return ((CK_A == data[len - 2]) && (CK_B== data[len - 1]));
 8001590:	78fb      	ldrb	r3, [r7, #3]
 8001592:	3b02      	subs	r3, #2
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	4413      	add	r3, r2
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	7bfa      	ldrb	r2, [r7, #15]
 800159c:	429a      	cmp	r2, r3
 800159e:	d109      	bne.n	80015b4 <M6N_UBX_CHKSUM_Check+0x64>
 80015a0:	78fb      	ldrb	r3, [r7, #3]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	4413      	add	r3, r2
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	7bba      	ldrb	r2, [r7, #14]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d101      	bne.n	80015b4 <M6N_UBX_CHKSUM_Check+0x64>
 80015b0:	2301      	movs	r3, #1
 80015b2:	e000      	b.n	80015b6 <M6N_UBX_CHKSUM_Check+0x66>
 80015b4:	2300      	movs	r3, #0
 80015b6:	b2db      	uxtb	r3, r3
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr

080015c2 <Check_Time_Valid>:

uint8_t Check_Time_Valid(M6N_UBX_NAV_TIMEUTC* timeutc)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
	// Check if the validUTC bit (Bit 2) is set
	return (timeutc->valid & (1 << 2)) != 0;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	7cdb      	ldrb	r3, [r3, #19]
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	bf14      	ite	ne
 80015d6:	2301      	movne	r3, #1
 80015d8:	2300      	moveq	r3, #0
 80015da:	b2db      	uxtb	r3, r3
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
	...

080015e8 <M6N_TransmitData>:

void M6N_TransmitData(const unsigned char* data, uint8_t len)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&GPS_USART, data, len, UART_TIME_OUT);
 80015f4:	78fb      	ldrb	r3, [r7, #3]
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	2364      	movs	r3, #100	@ 0x64
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	4803      	ldr	r0, [pc, #12]	@ (800160c <M6N_TransmitData+0x24>)
 80015fe:	f006 fbe1 	bl	8007dc4 <HAL_UART_Transmit>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	2000058c 	.word	0x2000058c

08001610 <M6N_Init>:

void M6N_Init()
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	M6N_TransmitData(&UBX_CFG_PRT, sizeof(UBX_CFG_PRT));
 8001614:	211c      	movs	r1, #28
 8001616:	480d      	ldr	r0, [pc, #52]	@ (800164c <M6N_Init+0x3c>)
 8001618:	f7ff ffe6 	bl	80015e8 <M6N_TransmitData>
	HAL_Delay(150);
 800161c:	2096      	movs	r0, #150	@ 0x96
 800161e:	f001 fa69 	bl	8002af4 <HAL_Delay>
	M6N_TransmitData(&UBX_CFG_MSG, sizeof(UBX_CFG_MSG));
 8001622:	2110      	movs	r1, #16
 8001624:	480a      	ldr	r0, [pc, #40]	@ (8001650 <M6N_Init+0x40>)
 8001626:	f7ff ffdf 	bl	80015e8 <M6N_TransmitData>
	HAL_Delay(150);
 800162a:	2096      	movs	r0, #150	@ 0x96
 800162c:	f001 fa62 	bl	8002af4 <HAL_Delay>
	M6N_TransmitData(&UBX_CFG_RATE, sizeof(UBX_CFG_RATE));
 8001630:	210e      	movs	r1, #14
 8001632:	4808      	ldr	r0, [pc, #32]	@ (8001654 <M6N_Init+0x44>)
 8001634:	f7ff ffd8 	bl	80015e8 <M6N_TransmitData>
	HAL_Delay(150);
 8001638:	2096      	movs	r0, #150	@ 0x96
 800163a:	f001 fa5b 	bl	8002af4 <HAL_Delay>
	M6N_TransmitData(&UBX_CFG_CFG, sizeof(UBX_CFG_CFG));
 800163e:	2115      	movs	r1, #21
 8001640:	4805      	ldr	r0, [pc, #20]	@ (8001658 <M6N_Init+0x48>)
 8001642:	f7ff ffd1 	bl	80015e8 <M6N_TransmitData>
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	08011cfc 	.word	0x08011cfc
 8001650:	08011d18 	.word	0x08011d18
 8001654:	08011d28 	.word	0x08011d28
 8001658:	08011d38 	.word	0x08011d38

0800165c <Time_CAL_GPS>:
#include "GPS.h"

bool ATmega328p_flag = 0;

void Time_CAL_GPS(M6N_UBX_NAV_TIMEUTC *timeutc, TIME *time)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
	time->year = timeutc->year - 2000;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	899b      	ldrh	r3, [r3, #12]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	3330      	adds	r3, #48	@ 0x30
 800166e:	b2da      	uxtb	r2, r3
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	701a      	strb	r2, [r3, #0]
	time->month = timeutc->month;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7b9a      	ldrb	r2, [r3, #14]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	705a      	strb	r2, [r3, #1]
	time->day = timeutc->day;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	7bda      	ldrb	r2, [r3, #15]
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	709a      	strb	r2, [r3, #2]

	time->hour = timeutc->hour + 9;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	7c1b      	ldrb	r3, [r3, #16]
 8001688:	3309      	adds	r3, #9
 800168a:	b2da      	uxtb	r2, r3
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	70da      	strb	r2, [r3, #3]
	time->min = timeutc->min;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7c5a      	ldrb	r2, [r3, #17]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	711a      	strb	r2, [r3, #4]
	time->sec = timeutc->sec;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	7c9a      	ldrb	r2, [r3, #18]
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	715a      	strb	r2, [r3, #5]

	if(time->hour > 23)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	78db      	ldrb	r3, [r3, #3]
 80016a4:	2b17      	cmp	r3, #23
 80016a6:	d90b      	bls.n	80016c0 <Time_CAL_GPS+0x64>
	{
		time->hour = time->hour - 24;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	78db      	ldrb	r3, [r3, #3]
 80016ac:	3b18      	subs	r3, #24
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	70da      	strb	r2, [r3, #3]
		time->day = time->day + 1;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	789b      	ldrb	r3, [r3, #2]
 80016b8:	3301      	adds	r3, #1
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	709a      	strb	r2, [r3, #2]
	}

	time->UTCvalid = 1;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	2201      	movs	r2, #1
 80016c4:	719a      	strb	r2, [r3, #6]
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <Time_CAL_RTC>:

void Time_CAL_RTC(_RTC *rtc, TIME *time)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
	time->year = rtc->Year;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	781a      	ldrb	r2, [r3, #0]
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	701a      	strb	r2, [r3, #0]
	time->month = rtc->Month;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	785a      	ldrb	r2, [r3, #1]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	705a      	strb	r2, [r3, #1]
	time->day = rtc->Date;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	789a      	ldrb	r2, [r3, #2]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	709a      	strb	r2, [r3, #2]

	time->hour = rtc->Hour;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	791a      	ldrb	r2, [r3, #4]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	70da      	strb	r2, [r3, #3]
	time->min = rtc->Min;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	795a      	ldrb	r2, [r3, #5]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	711a      	strb	r2, [r3, #4]
	time->sec = rtc->Sec;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	799a      	ldrb	r2, [r3, #6]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	715a      	strb	r2, [r3, #5]


	time->UTCvalid = 0;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	2200      	movs	r2, #0
 800170e:	719a      	strb	r2, [r3, #6]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr

0800171a <Time_Calibration>:

void Time_Calibration(TIME *time, uint8_t *rx_buf, _RTC *rtc)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b08a      	sub	sp, #40	@ 0x28
 800171e:	af00      	add	r7, sp, #0
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
    M6N_UBX_NAV_TIMEUTC timeutc;

    // GPS 데이터를 파싱하여 UTC 시간을 가져옴
    if (M6N_UBX_NAV_TIMEUTC_Parsing(rx_buf, &timeutc) == HAL_OK)
 8001726:	f107 0310 	add.w	r3, r7, #16
 800172a:	4619      	mov	r1, r3
 800172c:	68b8      	ldr	r0, [r7, #8]
 800172e:	f7ff fe73 	bl	8001418 <M6N_UBX_NAV_TIMEUTC_Parsing>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d11b      	bne.n	8001770 <Time_Calibration+0x56>
    {
        // GPS 데이터가 유효한지 확인
        if (Check_Time_Valid(&timeutc))
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff40 	bl	80015c2 <Check_Time_Valid>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00c      	beq.n	8001762 <Time_Calibration+0x48>
        {
            // 유효한 경우 GPS 시간으로 RTC를 보정하고 RTC 시간을 반환
            DS3231_Calibration(&timeutc, rtc);
 8001748:	f107 0310 	add.w	r3, r7, #16
 800174c:	6879      	ldr	r1, [r7, #4]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fdba 	bl	80012c8 <DS3231_Calibration>
            Time_CAL_GPS(&timeutc, time);
 8001754:	f107 0310 	add.w	r3, r7, #16
 8001758:	68f9      	ldr	r1, [r7, #12]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff ff7e 	bl	800165c <Time_CAL_GPS>
            // 유효하지 않은 경우 RTC 시간을 가져옴
            DS3231_GetTime(rtc);
            Time_CAL_RTC(rtc, time);
        }
    }
}
 8001760:	e006      	b.n	8001770 <Time_Calibration+0x56>
            DS3231_GetTime(rtc);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff fce4 	bl	8001130 <DS3231_GetTime>
            Time_CAL_RTC(rtc, time);
 8001768:	68f9      	ldr	r1, [r7, #12]
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ffb0 	bl	80016d0 <Time_CAL_RTC>
}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	@ 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <lcd_TimeDP>:

void lcd_TimeDP(TIME *time)
{
 8001778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177a:	b08d      	sub	sp, #52	@ 0x34
 800177c:	af04      	add	r7, sp, #16
 800177e:	6078      	str	r0, [r7, #4]
	uint8_t strTime_Data[20];

	sprintf(strTime_Data, "20%d:%02d:%02d  %02d:%02d:%02d",
	       time->year, time->month, time->day, time->hour, time->min, time->sec);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	781b      	ldrb	r3, [r3, #0]
	sprintf(strTime_Data, "20%d:%02d:%02d  %02d:%02d:%02d",
 8001784:	461d      	mov	r5, r3
	       time->year, time->month, time->day, time->hour, time->min, time->sec);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	785b      	ldrb	r3, [r3, #1]
	sprintf(strTime_Data, "20%d:%02d:%02d  %02d:%02d:%02d",
 800178a:	461e      	mov	r6, r3
	       time->year, time->month, time->day, time->hour, time->min, time->sec);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	789b      	ldrb	r3, [r3, #2]
	sprintf(strTime_Data, "20%d:%02d:%02d  %02d:%02d:%02d",
 8001790:	461a      	mov	r2, r3
	       time->year, time->month, time->day, time->hour, time->min, time->sec);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	78db      	ldrb	r3, [r3, #3]
	sprintf(strTime_Data, "20%d:%02d:%02d  %02d:%02d:%02d",
 8001796:	4619      	mov	r1, r3
	       time->year, time->month, time->day, time->hour, time->min, time->sec);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	791b      	ldrb	r3, [r3, #4]
	sprintf(strTime_Data, "20%d:%02d:%02d  %02d:%02d:%02d",
 800179c:	461c      	mov	r4, r3
	       time->year, time->month, time->day, time->hour, time->min, time->sec);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	795b      	ldrb	r3, [r3, #5]
	sprintf(strTime_Data, "20%d:%02d:%02d  %02d:%02d:%02d",
 80017a2:	f107 000c 	add.w	r0, r7, #12
 80017a6:	9303      	str	r3, [sp, #12]
 80017a8:	9402      	str	r4, [sp, #8]
 80017aa:	9101      	str	r1, [sp, #4]
 80017ac:	9200      	str	r2, [sp, #0]
 80017ae:	4633      	mov	r3, r6
 80017b0:	462a      	mov	r2, r5
 80017b2:	4907      	ldr	r1, [pc, #28]	@ (80017d0 <lcd_TimeDP+0x58>)
 80017b4:	f00c fdec 	bl	800e390 <siprintf>
	lcd_setCurStr(0, 0, strTime_Data);
 80017b8:	f107 030c 	add.w	r3, r7, #12
 80017bc:	461a      	mov	r2, r3
 80017be:	2100      	movs	r1, #0
 80017c0:	2000      	movs	r0, #0
 80017c2:	f7ff fbec 	bl	8000f9e <lcd_setCurStr>
}
 80017c6:	bf00      	nop
 80017c8:	3724      	adds	r7, #36	@ 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ce:	bf00      	nop
 80017d0:	08011c1c 	.word	0x08011c1c

080017d4 <lcd_Time_ValidDP>:

void lcd_Time_ValidDP(TIME *time)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	if(time->UTCvalid)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	799b      	ldrb	r3, [r3, #6]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <lcd_Time_ValidDP+0x1c>
		lcd_setCurStr(0, 1, "(GPS)");
 80017e4:	4a07      	ldr	r2, [pc, #28]	@ (8001804 <lcd_Time_ValidDP+0x30>)
 80017e6:	2101      	movs	r1, #1
 80017e8:	2000      	movs	r0, #0
 80017ea:	f7ff fbd8 	bl	8000f9e <lcd_setCurStr>
	else
		lcd_setCurStr(0, 1, "(RTC)");
}
 80017ee:	e004      	b.n	80017fa <lcd_Time_ValidDP+0x26>
		lcd_setCurStr(0, 1, "(RTC)");
 80017f0:	4a05      	ldr	r2, [pc, #20]	@ (8001808 <lcd_Time_ValidDP+0x34>)
 80017f2:	2101      	movs	r1, #1
 80017f4:	2000      	movs	r0, #0
 80017f6:	f7ff fbd2 	bl	8000f9e <lcd_setCurStr>
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	08011c3c 	.word	0x08011c3c
 8001808:	08011c44 	.word	0x08011c44

0800180c <lcd_Node_CountDP>:

//연결된 Node 수를 보여줌
void lcd_Node_CountDP()
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
	lcd_string("    RF Nodes: ");
 8001810:	4802      	ldr	r0, [pc, #8]	@ (800181c <lcd_Node_CountDP+0x10>)
 8001812:	f7ff fbaf 	bl	8000f74 <lcd_string>
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	08011c4c 	.word	0x08011c4c

08001820 <lcd_Temp_HumDP>:

void lcd_Temp_HumDP()
{
 8001820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001822:	b08d      	sub	sp, #52	@ 0x34
 8001824:	af06      	add	r7, sp, #24
	extern uint8_t rx_uart3_Data[20];
	uint8_t strTempHum_Data[20];

	if(ATmega328p_flag)
 8001826:	4b1b      	ldr	r3, [pc, #108]	@ (8001894 <lcd_Temp_HumDP+0x74>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d005      	beq.n	800183a <lcd_Temp_HumDP+0x1a>
	{
		lcd_setCurStr(0, 2, "Sub MCU No Response ");
 800182e:	4a1a      	ldr	r2, [pc, #104]	@ (8001898 <lcd_Temp_HumDP+0x78>)
 8001830:	2102      	movs	r1, #2
 8001832:	2000      	movs	r0, #0
 8001834:	f7ff fbb3 	bl	8000f9e <lcd_setCurStr>
 8001838:	e028      	b.n	800188c <lcd_Temp_HumDP+0x6c>

		return;
	}

	sprintf(strTempHum_Data, "Temp:%c%c.%c%c Hum:%c%c.%c%c",
	rx_uart3_Data[5], rx_uart3_Data[6], rx_uart3_Data[8], rx_uart3_Data[9], rx_uart3_Data[0], rx_uart3_Data[1], rx_uart3_Data[3], rx_uart3_Data[4]);
 800183a:	4b18      	ldr	r3, [pc, #96]	@ (800189c <lcd_Temp_HumDP+0x7c>)
 800183c:	795b      	ldrb	r3, [r3, #5]
	sprintf(strTempHum_Data, "Temp:%c%c.%c%c Hum:%c%c.%c%c",
 800183e:	469c      	mov	ip, r3
	rx_uart3_Data[5], rx_uart3_Data[6], rx_uart3_Data[8], rx_uart3_Data[9], rx_uart3_Data[0], rx_uart3_Data[1], rx_uart3_Data[3], rx_uart3_Data[4]);
 8001840:	4b16      	ldr	r3, [pc, #88]	@ (800189c <lcd_Temp_HumDP+0x7c>)
 8001842:	799b      	ldrb	r3, [r3, #6]
	sprintf(strTempHum_Data, "Temp:%c%c.%c%c Hum:%c%c.%c%c",
 8001844:	469e      	mov	lr, r3
	rx_uart3_Data[5], rx_uart3_Data[6], rx_uart3_Data[8], rx_uart3_Data[9], rx_uart3_Data[0], rx_uart3_Data[1], rx_uart3_Data[3], rx_uart3_Data[4]);
 8001846:	4b15      	ldr	r3, [pc, #84]	@ (800189c <lcd_Temp_HumDP+0x7c>)
 8001848:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(strTempHum_Data, "Temp:%c%c.%c%c Hum:%c%c.%c%c",
 800184a:	461a      	mov	r2, r3
	rx_uart3_Data[5], rx_uart3_Data[6], rx_uart3_Data[8], rx_uart3_Data[9], rx_uart3_Data[0], rx_uart3_Data[1], rx_uart3_Data[3], rx_uart3_Data[4]);
 800184c:	4b13      	ldr	r3, [pc, #76]	@ (800189c <lcd_Temp_HumDP+0x7c>)
 800184e:	7a5b      	ldrb	r3, [r3, #9]
	sprintf(strTempHum_Data, "Temp:%c%c.%c%c Hum:%c%c.%c%c",
 8001850:	4619      	mov	r1, r3
	rx_uart3_Data[5], rx_uart3_Data[6], rx_uart3_Data[8], rx_uart3_Data[9], rx_uart3_Data[0], rx_uart3_Data[1], rx_uart3_Data[3], rx_uart3_Data[4]);
 8001852:	4b12      	ldr	r3, [pc, #72]	@ (800189c <lcd_Temp_HumDP+0x7c>)
 8001854:	781b      	ldrb	r3, [r3, #0]
	sprintf(strTempHum_Data, "Temp:%c%c.%c%c Hum:%c%c.%c%c",
 8001856:	461c      	mov	r4, r3
	rx_uart3_Data[5], rx_uart3_Data[6], rx_uart3_Data[8], rx_uart3_Data[9], rx_uart3_Data[0], rx_uart3_Data[1], rx_uart3_Data[3], rx_uart3_Data[4]);
 8001858:	4b10      	ldr	r3, [pc, #64]	@ (800189c <lcd_Temp_HumDP+0x7c>)
 800185a:	785b      	ldrb	r3, [r3, #1]
	sprintf(strTempHum_Data, "Temp:%c%c.%c%c Hum:%c%c.%c%c",
 800185c:	461d      	mov	r5, r3
	rx_uart3_Data[5], rx_uart3_Data[6], rx_uart3_Data[8], rx_uart3_Data[9], rx_uart3_Data[0], rx_uart3_Data[1], rx_uart3_Data[3], rx_uart3_Data[4]);
 800185e:	4b0f      	ldr	r3, [pc, #60]	@ (800189c <lcd_Temp_HumDP+0x7c>)
 8001860:	78db      	ldrb	r3, [r3, #3]
	sprintf(strTempHum_Data, "Temp:%c%c.%c%c Hum:%c%c.%c%c",
 8001862:	461e      	mov	r6, r3
	rx_uart3_Data[5], rx_uart3_Data[6], rx_uart3_Data[8], rx_uart3_Data[9], rx_uart3_Data[0], rx_uart3_Data[1], rx_uart3_Data[3], rx_uart3_Data[4]);
 8001864:	4b0d      	ldr	r3, [pc, #52]	@ (800189c <lcd_Temp_HumDP+0x7c>)
 8001866:	791b      	ldrb	r3, [r3, #4]
	sprintf(strTempHum_Data, "Temp:%c%c.%c%c Hum:%c%c.%c%c",
 8001868:	1d38      	adds	r0, r7, #4
 800186a:	9305      	str	r3, [sp, #20]
 800186c:	9604      	str	r6, [sp, #16]
 800186e:	9503      	str	r5, [sp, #12]
 8001870:	9402      	str	r4, [sp, #8]
 8001872:	9101      	str	r1, [sp, #4]
 8001874:	9200      	str	r2, [sp, #0]
 8001876:	4673      	mov	r3, lr
 8001878:	4662      	mov	r2, ip
 800187a:	4909      	ldr	r1, [pc, #36]	@ (80018a0 <lcd_Temp_HumDP+0x80>)
 800187c:	f00c fd88 	bl	800e390 <siprintf>
	lcd_setCurStr(0, 2, strTempHum_Data);
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	461a      	mov	r2, r3
 8001884:	2102      	movs	r1, #2
 8001886:	2000      	movs	r0, #0
 8001888:	f7ff fb89 	bl	8000f9e <lcd_setCurStr>
}
 800188c:	371c      	adds	r7, #28
 800188e:	46bd      	mov	sp, r7
 8001890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001892:	bf00      	nop
 8001894:	200003ad 	.word	0x200003ad
 8001898:	08011c5c 	.word	0x08011c5c
 800189c:	20000488 	.word	0x20000488
 80018a0:	08011c74 	.word	0x08011c74
 80018a4:	00000000 	.word	0x00000000

080018a8 <lcd_VinDP>:

void lcd_VinDP(uint16_t* data)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b092      	sub	sp, #72	@ 0x48
 80018ac:	af02      	add	r7, sp, #8
 80018ae:	6078      	str	r0, [r7, #4]
	uint8_t strADC_Data[20];

	double ADCV = 0;
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	f04f 0300 	mov.w	r3, #0
 80018b8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	double VIN = 0;
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	ADCV = data[0] * 0.00806 / 10;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe fd99 	bl	8000404 <__aeabi_i2d>
 80018d2:	a33b      	add	r3, pc, #236	@ (adr r3, 80019c0 <lcd_VinDP+0x118>)
 80018d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d8:	f7fe fdfe 	bl	80004d8 <__aeabi_dmul>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4610      	mov	r0, r2
 80018e2:	4619      	mov	r1, r3
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	4b43      	ldr	r3, [pc, #268]	@ (80019f8 <lcd_VinDP+0x150>)
 80018ea:	f7fe ff1f 	bl	800072c <__aeabi_ddiv>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	VIN = ADCV * 2.52631 + 0.199;
 80018f6:	a334      	add	r3, pc, #208	@ (adr r3, 80019c8 <lcd_VinDP+0x120>)
 80018f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001900:	f7fe fdea 	bl	80004d8 <__aeabi_dmul>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	a330      	add	r3, pc, #192	@ (adr r3, 80019d0 <lcd_VinDP+0x128>)
 800190e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001912:	f7fe fc2b 	bl	800016c <__adddf3>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	double vsense = (float)data[1] * 3.3 / 4095;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3302      	adds	r3, #2
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff f9d5 	bl	8000cd4 <__aeabi_ui2f>
 800192a:	4603      	mov	r3, r0
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fd7b 	bl	8000428 <__aeabi_f2d>
 8001932:	a329      	add	r3, pc, #164	@ (adr r3, 80019d8 <lcd_VinDP+0x130>)
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	f7fe fdce 	bl	80004d8 <__aeabi_dmul>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	a326      	add	r3, pc, #152	@ (adr r3, 80019e0 <lcd_VinDP+0x138>)
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	f7fe feef 	bl	800072c <__aeabi_ddiv>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double MCUTemp = (1.38 - vsense) / 0.0043 + 25;
 8001956:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800195a:	a123      	add	r1, pc, #140	@ (adr r1, 80019e8 <lcd_VinDP+0x140>)
 800195c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001960:	f7fe fc02 	bl	8000168 <__aeabi_dsub>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4610      	mov	r0, r2
 800196a:	4619      	mov	r1, r3
 800196c:	a320      	add	r3, pc, #128	@ (adr r3, 80019f0 <lcd_VinDP+0x148>)
 800196e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001972:	f7fe fedb 	bl	800072c <__aeabi_ddiv>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4610      	mov	r0, r2
 800197c:	4619      	mov	r1, r3
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	4b1e      	ldr	r3, [pc, #120]	@ (80019fc <lcd_VinDP+0x154>)
 8001984:	f7fe fbf2 	bl	800016c <__adddf3>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	e9c7 2308 	strd	r2, r3, [r7, #32]

	sprintf(strADC_Data, "VIN:%.2fV CPU:%.2fC", VIN, MCUTemp);
 8001990:	f107 000c 	add.w	r0, r7, #12
 8001994:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001998:	e9cd 2300 	strd	r2, r3, [sp]
 800199c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80019a0:	4917      	ldr	r1, [pc, #92]	@ (8001a00 <lcd_VinDP+0x158>)
 80019a2:	f00c fcf5 	bl	800e390 <siprintf>
	lcd_setCurStr(0, 3, strADC_Data);
 80019a6:	f107 030c 	add.w	r3, r7, #12
 80019aa:	461a      	mov	r2, r3
 80019ac:	2103      	movs	r1, #3
 80019ae:	2000      	movs	r0, #0
 80019b0:	f7ff faf5 	bl	8000f9e <lcd_setCurStr>
}
 80019b4:	bf00      	nop
 80019b6:	3740      	adds	r7, #64	@ 0x40
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	f3af 8000 	nop.w
 80019c0:	e33eff19 	.word	0xe33eff19
 80019c4:	3f8081c2 	.word	0x3f8081c2
 80019c8:	046c764b 	.word	0x046c764b
 80019cc:	400435e2 	.word	0x400435e2
 80019d0:	fdf3b646 	.word	0xfdf3b646
 80019d4:	3fc978d4 	.word	0x3fc978d4
 80019d8:	66666666 	.word	0x66666666
 80019dc:	400a6666 	.word	0x400a6666
 80019e0:	00000000 	.word	0x00000000
 80019e4:	40affe00 	.word	0x40affe00
 80019e8:	e147ae14 	.word	0xe147ae14
 80019ec:	3ff6147a 	.word	0x3ff6147a
 80019f0:	75f6fd22 	.word	0x75f6fd22
 80019f4:	3f719ce0 	.word	0x3f719ce0
 80019f8:	40240000 	.word	0x40240000
 80019fc:	40390000 	.word	0x40390000
 8001a00:	08011c94 	.word	0x08011c94

08001a04 <Display>:

void Display(TIME *time, uint16_t *val)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
	lcd_TimeDP(time);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff feb2 	bl	8001778 <lcd_TimeDP>
	lcd_Time_ValidDP(time);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff fedd 	bl	80017d4 <lcd_Time_ValidDP>
	lcd_Node_CountDP();
 8001a1a:	f7ff fef7 	bl	800180c <lcd_Node_CountDP>
	lcd_Temp_HumDP();
 8001a1e:	f7ff feff 	bl	8001820 <lcd_Temp_HumDP>
	lcd_VinDP(val);
 8001a22:	6838      	ldr	r0, [r7, #0]
 8001a24:	f7ff ff40 	bl	80018a8 <lcd_VinDP>
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <send_Data>:

void send_Data(TIME *time)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	uint8_t sendData[6];

	sendData[0] = time->year;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	723b      	strb	r3, [r7, #8]
	sendData[1] = time->month;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	785b      	ldrb	r3, [r3, #1]
 8001a42:	727b      	strb	r3, [r7, #9]
	sendData[2] = time->day;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	789b      	ldrb	r3, [r3, #2]
 8001a48:	72bb      	strb	r3, [r7, #10]
	sendData[3] = time->hour;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	78db      	ldrb	r3, [r3, #3]
 8001a4e:	72fb      	strb	r3, [r7, #11]
	sendData[4] = time->min;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	791b      	ldrb	r3, [r3, #4]
 8001a54:	733b      	strb	r3, [r7, #12]
	sendData[5] = time->sec;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	795b      	ldrb	r3, [r3, #5]
 8001a5a:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(&Arduino_USART, sendData, 6, UART_TIME_OUT);
 8001a5c:	f107 0108 	add.w	r1, r7, #8
 8001a60:	2364      	movs	r3, #100	@ 0x64
 8001a62:	2206      	movs	r2, #6
 8001a64:	4803      	ldr	r0, [pc, #12]	@ (8001a74 <send_Data+0x44>)
 8001a66:	f006 f9ad 	bl	8007dc4 <HAL_UART_Transmit>
}
 8001a6a:	bf00      	nop
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200005d4 	.word	0x200005d4

08001a78 <ATmega328p_Reset>:

void ATmega328p_Reset()
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
	static int ATmega328p_ResetCount = -1;

	if(ATmega328p_ResetCount < MAX_RESET_COUNT)
 8001a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab8 <ATmega328p_Reset+0x40>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b18      	cmp	r3, #24
 8001a82:	dc14      	bgt.n	8001aae <ATmega328p_Reset+0x36>
	{
		HAL_GPIO_WritePin(ATmega328p_Reset_GPIO_Port, ATmega328p_Reset_Pin, GPIO_PIN_RESET);
 8001a84:	2200      	movs	r2, #0
 8001a86:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a8a:	480c      	ldr	r0, [pc, #48]	@ (8001abc <ATmega328p_Reset+0x44>)
 8001a8c:	f002 f96d 	bl	8003d6a <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8001a90:	200a      	movs	r0, #10
 8001a92:	f001 f82f 	bl	8002af4 <HAL_Delay>
		HAL_GPIO_WritePin(ATmega328p_Reset_GPIO_Port, ATmega328p_Reset_Pin, GPIO_PIN_SET);
 8001a96:	2201      	movs	r2, #1
 8001a98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a9c:	4807      	ldr	r0, [pc, #28]	@ (8001abc <ATmega328p_Reset+0x44>)
 8001a9e:	f002 f964 	bl	8003d6a <HAL_GPIO_WritePin>
		ATmega328p_ResetCount++;
 8001aa2:	4b05      	ldr	r3, [pc, #20]	@ (8001ab8 <ATmega328p_Reset+0x40>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	4a03      	ldr	r2, [pc, #12]	@ (8001ab8 <ATmega328p_Reset+0x40>)
 8001aaa:	6013      	str	r3, [r2, #0]

		return;
 8001aac:	e002      	b.n	8001ab4 <ATmega328p_Reset+0x3c>
	}

	ATmega328p_flag = 1;
 8001aae:	4b04      	ldr	r3, [pc, #16]	@ (8001ac0 <ATmega328p_Reset+0x48>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	701a      	strb	r2, [r3, #0]
}
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	2000001c 	.word	0x2000001c
 8001abc:	40010c00 	.word	0x40010c00
 8001ac0:	200003ad 	.word	0x200003ad

08001ac4 <SubMCU_Check>:

bool SubMCU_Check(bool *led_flag)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
	extern uint8_t rx_uart3_Data[20];

	if(rx_uart3_Data[10] != 'A' && HAL_GPIO_ReadPin(ISP_GPIO_Port, ISP_Pin) == GPIO_PIN_RESET)
 8001acc:	4b0d      	ldr	r3, [pc, #52]	@ (8001b04 <SubMCU_Check+0x40>)
 8001ace:	7a9b      	ldrb	r3, [r3, #10]
 8001ad0:	2b41      	cmp	r3, #65	@ 0x41
 8001ad2:	d008      	beq.n	8001ae6 <SubMCU_Check+0x22>
 8001ad4:	2120      	movs	r1, #32
 8001ad6:	480c      	ldr	r0, [pc, #48]	@ (8001b08 <SubMCU_Check+0x44>)
 8001ad8:	f002 f930 	bl	8003d3c <HAL_GPIO_ReadPin>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <SubMCU_Check+0x22>
		ATmega328p_Reset();
 8001ae2:	f7ff ffc9 	bl	8001a78 <ATmega328p_Reset>

	rx_uart3_Data[10] = 0;
 8001ae6:	4b07      	ldr	r3, [pc, #28]	@ (8001b04 <SubMCU_Check+0x40>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	729a      	strb	r2, [r3, #10]

	if(rx_uart3_Data[11] == 'B')
 8001aec:	4b05      	ldr	r3, [pc, #20]	@ (8001b04 <SubMCU_Check+0x40>)
 8001aee:	7adb      	ldrb	r3, [r3, #11]
 8001af0:	2b42      	cmp	r3, #66	@ 0x42
 8001af2:	d101      	bne.n	8001af8 <SubMCU_Check+0x34>
		return true;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <SubMCU_Check+0x36>

	return false;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000488 	.word	0x20000488
 8001b08:	40010c00 	.word	0x40010c00

08001b0c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b1c:	4b20      	ldr	r3, [pc, #128]	@ (8001ba0 <MX_ADC1_Init+0x94>)
 8001b1e:	4a21      	ldr	r2, [pc, #132]	@ (8001ba4 <MX_ADC1_Init+0x98>)
 8001b20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001b22:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba0 <MX_ADC1_Init+0x94>)
 8001b24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba0 <MX_ADC1_Init+0x94>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba0 <MX_ADC1_Init+0x94>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b36:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba0 <MX_ADC1_Init+0x94>)
 8001b38:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001b3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b3e:	4b18      	ldr	r3, [pc, #96]	@ (8001ba0 <MX_ADC1_Init+0x94>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001b44:	4b16      	ldr	r3, [pc, #88]	@ (8001ba0 <MX_ADC1_Init+0x94>)
 8001b46:	2202      	movs	r2, #2
 8001b48:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b4a:	4815      	ldr	r0, [pc, #84]	@ (8001ba0 <MX_ADC1_Init+0x94>)
 8001b4c:	f000 fff6 	bl	8002b3c <HAL_ADC_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001b56:	f000 fb7b 	bl	8002250 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001b62:	2306      	movs	r3, #6
 8001b64:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	4619      	mov	r1, r3
 8001b6a:	480d      	ldr	r0, [pc, #52]	@ (8001ba0 <MX_ADC1_Init+0x94>)
 8001b6c:	f001 f9b8 	bl	8002ee0 <HAL_ADC_ConfigChannel>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001b76:	f000 fb6b 	bl	8002250 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001b7a:	2310      	movs	r3, #16
 8001b7c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	4619      	mov	r1, r3
 8001b86:	4806      	ldr	r0, [pc, #24]	@ (8001ba0 <MX_ADC1_Init+0x94>)
 8001b88:	f001 f9aa 	bl	8002ee0 <HAL_ADC_ConfigChannel>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001b92:	f000 fb5d 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200003b0 	.word	0x200003b0
 8001ba4:	40012400 	.word	0x40012400

08001ba8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 0310 	add.w	r3, r7, #16
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a28      	ldr	r2, [pc, #160]	@ (8001c64 <HAL_ADC_MspInit+0xbc>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d149      	bne.n	8001c5c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bc8:	4b27      	ldr	r3, [pc, #156]	@ (8001c68 <HAL_ADC_MspInit+0xc0>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	4a26      	ldr	r2, [pc, #152]	@ (8001c68 <HAL_ADC_MspInit+0xc0>)
 8001bce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bd2:	6193      	str	r3, [r2, #24]
 8001bd4:	4b24      	ldr	r3, [pc, #144]	@ (8001c68 <HAL_ADC_MspInit+0xc0>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be0:	4b21      	ldr	r3, [pc, #132]	@ (8001c68 <HAL_ADC_MspInit+0xc0>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	4a20      	ldr	r2, [pc, #128]	@ (8001c68 <HAL_ADC_MspInit+0xc0>)
 8001be6:	f043 0304 	orr.w	r3, r3, #4
 8001bea:	6193      	str	r3, [r2, #24]
 8001bec:	4b1e      	ldr	r3, [pc, #120]	@ (8001c68 <HAL_ADC_MspInit+0xc0>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_VIN_Pin;
 8001bf8:	2310      	movs	r3, #16
 8001bfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_VIN_GPIO_Port, &GPIO_InitStruct);
 8001c00:	f107 0310 	add.w	r3, r7, #16
 8001c04:	4619      	mov	r1, r3
 8001c06:	4819      	ldr	r0, [pc, #100]	@ (8001c6c <HAL_ADC_MspInit+0xc4>)
 8001c08:	f001 ff14 	bl	8003a34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001c0c:	4b18      	ldr	r3, [pc, #96]	@ (8001c70 <HAL_ADC_MspInit+0xc8>)
 8001c0e:	4a19      	ldr	r2, [pc, #100]	@ (8001c74 <HAL_ADC_MspInit+0xcc>)
 8001c10:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c12:	4b17      	ldr	r3, [pc, #92]	@ (8001c70 <HAL_ADC_MspInit+0xc8>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c18:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <HAL_ADC_MspInit+0xc8>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c1e:	4b14      	ldr	r3, [pc, #80]	@ (8001c70 <HAL_ADC_MspInit+0xc8>)
 8001c20:	2280      	movs	r2, #128	@ 0x80
 8001c22:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c24:	4b12      	ldr	r3, [pc, #72]	@ (8001c70 <HAL_ADC_MspInit+0xc8>)
 8001c26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c2a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c2c:	4b10      	ldr	r3, [pc, #64]	@ (8001c70 <HAL_ADC_MspInit+0xc8>)
 8001c2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c32:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c34:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <HAL_ADC_MspInit+0xc8>)
 8001c36:	2220      	movs	r2, #32
 8001c38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c70 <HAL_ADC_MspInit+0xc8>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c40:	480b      	ldr	r0, [pc, #44]	@ (8001c70 <HAL_ADC_MspInit+0xc8>)
 8001c42:	f001 fc55 	bl	80034f0 <HAL_DMA_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001c4c:	f000 fb00 	bl	8002250 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a07      	ldr	r2, [pc, #28]	@ (8001c70 <HAL_ADC_MspInit+0xc8>)
 8001c54:	621a      	str	r2, [r3, #32]
 8001c56:	4a06      	ldr	r2, [pc, #24]	@ (8001c70 <HAL_ADC_MspInit+0xc8>)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	3720      	adds	r7, #32
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40012400 	.word	0x40012400
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40010800 	.word	0x40010800
 8001c70:	200003e0 	.word	0x200003e0
 8001c74:	40020008 	.word	0x40020008

08001c78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c7e:	4b14      	ldr	r3, [pc, #80]	@ (8001cd0 <MX_DMA_Init+0x58>)
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	4a13      	ldr	r2, [pc, #76]	@ (8001cd0 <MX_DMA_Init+0x58>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6153      	str	r3, [r2, #20]
 8001c8a:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <MX_DMA_Init+0x58>)
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	200b      	movs	r0, #11
 8001c9c:	f001 fbf1 	bl	8003482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ca0:	200b      	movs	r0, #11
 8001ca2:	f001 fc0a 	bl	80034ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2100      	movs	r1, #0
 8001caa:	200c      	movs	r0, #12
 8001cac:	f001 fbe9 	bl	8003482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001cb0:	200c      	movs	r0, #12
 8001cb2:	f001 fc02 	bl	80034ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2100      	movs	r1, #0
 8001cba:	200d      	movs	r0, #13
 8001cbc:	f001 fbe1 	bl	8003482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001cc0:	200d      	movs	r0, #13
 8001cc2:	f001 fbfa 	bl	80034ba <HAL_NVIC_EnableIRQ>

}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cda:	f107 0310 	add.w	r3, r7, #16
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	609a      	str	r2, [r3, #8]
 8001ce6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce8:	4b48      	ldr	r3, [pc, #288]	@ (8001e0c <MX_GPIO_Init+0x138>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	4a47      	ldr	r2, [pc, #284]	@ (8001e0c <MX_GPIO_Init+0x138>)
 8001cee:	f043 0310 	orr.w	r3, r3, #16
 8001cf2:	6193      	str	r3, [r2, #24]
 8001cf4:	4b45      	ldr	r3, [pc, #276]	@ (8001e0c <MX_GPIO_Init+0x138>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d00:	4b42      	ldr	r3, [pc, #264]	@ (8001e0c <MX_GPIO_Init+0x138>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	4a41      	ldr	r2, [pc, #260]	@ (8001e0c <MX_GPIO_Init+0x138>)
 8001d06:	f043 0320 	orr.w	r3, r3, #32
 8001d0a:	6193      	str	r3, [r2, #24]
 8001d0c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e0c <MX_GPIO_Init+0x138>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f003 0320 	and.w	r3, r3, #32
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d18:	4b3c      	ldr	r3, [pc, #240]	@ (8001e0c <MX_GPIO_Init+0x138>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	4a3b      	ldr	r2, [pc, #236]	@ (8001e0c <MX_GPIO_Init+0x138>)
 8001d1e:	f043 0304 	orr.w	r3, r3, #4
 8001d22:	6193      	str	r3, [r2, #24]
 8001d24:	4b39      	ldr	r3, [pc, #228]	@ (8001e0c <MX_GPIO_Init+0x138>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d30:	4b36      	ldr	r3, [pc, #216]	@ (8001e0c <MX_GPIO_Init+0x138>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	4a35      	ldr	r2, [pc, #212]	@ (8001e0c <MX_GPIO_Init+0x138>)
 8001d36:	f043 0308 	orr.w	r3, r3, #8
 8001d3a:	6193      	str	r3, [r2, #24]
 8001d3c:	4b33      	ldr	r3, [pc, #204]	@ (8001e0c <MX_GPIO_Init+0x138>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f003 0308 	and.w	r3, r3, #8
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D4_Pin|EN_Pin|RS_Pin, GPIO_PIN_RESET);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001d4e:	4830      	ldr	r0, [pc, #192]	@ (8001e10 <MX_GPIO_Init+0x13c>)
 8001d50:	f002 f80b 	bl	8003d6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD_HIGH_Pin|LD_LOW_Pin|LD_MIN_Pin|LD_Debug_Pin
 8001d54:	2200      	movs	r2, #0
 8001d56:	f248 1107 	movw	r1, #33031	@ 0x8107
 8001d5a:	482e      	ldr	r0, [pc, #184]	@ (8001e14 <MX_GPIO_Init+0x140>)
 8001d5c:	f002 f805 	bl	8003d6a <HAL_GPIO_WritePin>
                          |Status_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_MAX_Pin|SPI1_CS_Pin|SPI1_CE_Pin|USB_EN_Pin
 8001d60:	2200      	movs	r2, #0
 8001d62:	f240 311f 	movw	r1, #799	@ 0x31f
 8001d66:	482c      	ldr	r0, [pc, #176]	@ (8001e18 <MX_GPIO_Init+0x144>)
 8001d68:	f001 ffff 	bl	8003d6a <HAL_GPIO_WritePin>
                          |D7_Pin|D6_Pin|D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ATmega328p_Reset_GPIO_Port, ATmega328p_Reset_Pin, GPIO_PIN_SET);
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d72:	4829      	ldr	r0, [pc, #164]	@ (8001e18 <MX_GPIO_Init+0x144>)
 8001d74:	f001 fff9 	bl	8003d6a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = D4_Pin|EN_Pin|RS_Pin;
 8001d78:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001d7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d86:	2302      	movs	r3, #2
 8001d88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d8a:	f107 0310 	add.w	r3, r7, #16
 8001d8e:	4619      	mov	r1, r3
 8001d90:	481f      	ldr	r0, [pc, #124]	@ (8001e10 <MX_GPIO_Init+0x13c>)
 8001d92:	f001 fe4f 	bl	8003a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LD_HIGH_Pin|LD_LOW_Pin|LD_MIN_Pin|LD_Debug_Pin
 8001d96:	f248 1307 	movw	r3, #33031	@ 0x8107
 8001d9a:	613b      	str	r3, [r7, #16]
                          |Status_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da4:	2302      	movs	r3, #2
 8001da6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da8:	f107 0310 	add.w	r3, r7, #16
 8001dac:	4619      	mov	r1, r3
 8001dae:	4819      	ldr	r0, [pc, #100]	@ (8001e14 <MX_GPIO_Init+0x140>)
 8001db0:	f001 fe40 	bl	8003a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_4_Pin;
 8001db4:	2308      	movs	r3, #8
 8001db6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW_4_GPIO_Port, &GPIO_InitStruct);
 8001dc0:	f107 0310 	add.w	r3, r7, #16
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4813      	ldr	r0, [pc, #76]	@ (8001e14 <MX_GPIO_Init+0x140>)
 8001dc8:	f001 fe34 	bl	8003a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD_MAX_Pin|SPI1_CS_Pin|SPI1_CE_Pin|ATmega328p_Reset_Pin
 8001dcc:	f248 331f 	movw	r3, #33567	@ 0x831f
 8001dd0:	613b      	str	r3, [r7, #16]
                          |USB_EN_Pin|D7_Pin|D6_Pin|D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dde:	f107 0310 	add.w	r3, r7, #16
 8001de2:	4619      	mov	r1, r3
 8001de4:	480c      	ldr	r0, [pc, #48]	@ (8001e18 <MX_GPIO_Init+0x144>)
 8001de6:	f001 fe25 	bl	8003a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SW_1_Pin|SW_2_Pin|SW_3_Pin|ISP_Pin;
 8001dea:	f247 0320 	movw	r3, #28704	@ 0x7020
 8001dee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df8:	f107 0310 	add.w	r3, r7, #16
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4806      	ldr	r0, [pc, #24]	@ (8001e18 <MX_GPIO_Init+0x144>)
 8001e00:	f001 fe18 	bl	8003a34 <HAL_GPIO_Init>

}
 8001e04:	bf00      	nop
 8001e06:	3720      	adds	r7, #32
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	40011000 	.word	0x40011000
 8001e14:	40010800 	.word	0x40010800
 8001e18:	40010c00 	.word	0x40010c00

08001e1c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e20:	4b12      	ldr	r3, [pc, #72]	@ (8001e6c <MX_I2C1_Init+0x50>)
 8001e22:	4a13      	ldr	r2, [pc, #76]	@ (8001e70 <MX_I2C1_Init+0x54>)
 8001e24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001e26:	4b11      	ldr	r3, [pc, #68]	@ (8001e6c <MX_I2C1_Init+0x50>)
 8001e28:	4a12      	ldr	r2, [pc, #72]	@ (8001e74 <MX_I2C1_Init+0x58>)
 8001e2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e6c <MX_I2C1_Init+0x50>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e32:	4b0e      	ldr	r3, [pc, #56]	@ (8001e6c <MX_I2C1_Init+0x50>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e38:	4b0c      	ldr	r3, [pc, #48]	@ (8001e6c <MX_I2C1_Init+0x50>)
 8001e3a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e40:	4b0a      	ldr	r3, [pc, #40]	@ (8001e6c <MX_I2C1_Init+0x50>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e46:	4b09      	ldr	r3, [pc, #36]	@ (8001e6c <MX_I2C1_Init+0x50>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e4c:	4b07      	ldr	r3, [pc, #28]	@ (8001e6c <MX_I2C1_Init+0x50>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e52:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <MX_I2C1_Init+0x50>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e58:	4804      	ldr	r0, [pc, #16]	@ (8001e6c <MX_I2C1_Init+0x50>)
 8001e5a:	f001 ffb7 	bl	8003dcc <HAL_I2C_Init>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e64:	f000 f9f4 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000424 	.word	0x20000424
 8001e70:	40005400 	.word	0x40005400
 8001e74:	00061a80 	.word	0x00061a80

08001e78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 0310 	add.w	r3, r7, #16
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a15      	ldr	r2, [pc, #84]	@ (8001ee8 <HAL_I2C_MspInit+0x70>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d123      	bne.n	8001ee0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e98:	4b14      	ldr	r3, [pc, #80]	@ (8001eec <HAL_I2C_MspInit+0x74>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	4a13      	ldr	r2, [pc, #76]	@ (8001eec <HAL_I2C_MspInit+0x74>)
 8001e9e:	f043 0308 	orr.w	r3, r3, #8
 8001ea2:	6193      	str	r3, [r2, #24]
 8001ea4:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <HAL_I2C_MspInit+0x74>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001eb0:	23c0      	movs	r3, #192	@ 0xc0
 8001eb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eb4:	2312      	movs	r3, #18
 8001eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ebc:	f107 0310 	add.w	r3, r7, #16
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	480b      	ldr	r0, [pc, #44]	@ (8001ef0 <HAL_I2C_MspInit+0x78>)
 8001ec4:	f001 fdb6 	bl	8003a34 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ec8:	4b08      	ldr	r3, [pc, #32]	@ (8001eec <HAL_I2C_MspInit+0x74>)
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	4a07      	ldr	r2, [pc, #28]	@ (8001eec <HAL_I2C_MspInit+0x74>)
 8001ece:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ed2:	61d3      	str	r3, [r2, #28]
 8001ed4:	4b05      	ldr	r3, [pc, #20]	@ (8001eec <HAL_I2C_MspInit+0x74>)
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	3720      	adds	r7, #32
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40005400 	.word	0x40005400
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40010c00 	.word	0x40010c00

08001ef4 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001ef8:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <MX_IWDG_Init+0x2c>)
 8001efa:	4a0a      	ldr	r2, [pc, #40]	@ (8001f24 <MX_IWDG_Init+0x30>)
 8001efc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8001efe:	4b08      	ldr	r3, [pc, #32]	@ (8001f20 <MX_IWDG_Init+0x2c>)
 8001f00:	2203      	movs	r2, #3
 8001f02:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8001f04:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <MX_IWDG_Init+0x2c>)
 8001f06:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001f0a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001f0c:	4804      	ldr	r0, [pc, #16]	@ (8001f20 <MX_IWDG_Init+0x2c>)
 8001f0e:	f002 ffb6 	bl	8004e7e <HAL_IWDG_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001f18:	f000 f99a 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000478 	.word	0x20000478
 8001f24:	40003000 	.word	0x40003000

08001f28 <_write>:

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int _write(int file, char *ptr, int len){
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, GPIO_PIN_SET);
 8001f34:	2201      	movs	r2, #1
 8001f36:	2108      	movs	r1, #8
 8001f38:	4805      	ldr	r0, [pc, #20]	@ (8001f50 <_write+0x28>)
 8001f3a:	f001 ff16 	bl	8003d6a <HAL_GPIO_WritePin>
    CDC_Transmit_FS(ptr, len);
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	68b8      	ldr	r0, [r7, #8]
 8001f42:	f00a ff19 	bl	800cd78 <CDC_Transmit_FS>
    return (len);
 8001f46:	687b      	ldr	r3, [r7, #4]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40010c00 	.word	0x40010c00

08001f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f5a:	f000 fd69 	bl	8002a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f5e:	f000 f87b 	bl	8002058 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f62:	f7ff feb7 	bl	8001cd4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f66:	f7ff fe87 	bl	8001c78 <MX_DMA_Init>
  MX_I2C1_Init();
 8001f6a:	f7ff ff57 	bl	8001e1c <MX_I2C1_Init>
  MX_ADC1_Init();
 8001f6e:	f7ff fdcd 	bl	8001b0c <MX_ADC1_Init>
  MX_SPI1_Init();
 8001f72:	f000 f973 	bl	800225c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001f76:	f000 fc05 	bl	8002784 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001f7a:	f000 fc2d 	bl	80027d8 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8001f7e:	f00a fe3d 	bl	800cbfc <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001f82:	f000 fb81 	bl	8002688 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001f86:	f000 fb2f 	bl	80025e8 <MX_TIM1_Init>
  MX_IWDG_Init();
 8001f8a:	f7ff ffb3 	bl	8001ef4 <MX_IWDG_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001f8e:	f000 f8c2 	bl	8002116 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  //LCD 초기화
  HAL_TIM_Base_Start(&htim1);
 8001f92:	4826      	ldr	r0, [pc, #152]	@ (800202c <main+0xd8>)
 8001f94:	f005 face 	bl	8007534 <HAL_TIM_Base_Start>
  lcd_Init(20, 4);
 8001f98:	2104      	movs	r1, #4
 8001f9a:	2014      	movs	r0, #20
 8001f9c:	f7fe ff28 	bl	8000df0 <lcd_Init>

  //GPS Module 초기화
  M6N_Init();
 8001fa0:	f7ff fb36 	bl	8001610 <M6N_Init>
  HAL_UART_Receive_IT(&huart1, &rx_uart1_data, 1);
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	4922      	ldr	r1, [pc, #136]	@ (8002030 <main+0xdc>)
 8001fa8:	4822      	ldr	r0, [pc, #136]	@ (8002034 <main+0xe0>)
 8001faa:	f005 ff8e 	bl	8007eca <HAL_UART_Receive_IT>

  //RTC 초기화
  DS3231_Init(&hi2c1);
 8001fae:	4822      	ldr	r0, [pc, #136]	@ (8002038 <main+0xe4>)
 8001fb0:	f7ff f8b0 	bl	8001114 <DS3231_Init>

  //ATmega328p 초기화
  ATmega328p_Reset();
 8001fb4:	f7ff fd60 	bl	8001a78 <ATmega328p_Reset>
  HAL_UART_Receive_DMA(&huart3, rx_uart3_Data, 12);
 8001fb8:	220c      	movs	r2, #12
 8001fba:	4920      	ldr	r1, [pc, #128]	@ (800203c <main+0xe8>)
 8001fbc:	4820      	ldr	r0, [pc, #128]	@ (8002040 <main+0xec>)
 8001fbe:	f005 ffa9 	bl	8007f14 <HAL_UART_Receive_DMA>

  //500ms TIM 인터럽트 시작
  HAL_TIM_Base_Start_IT(&htim2);
 8001fc2:	4820      	ldr	r0, [pc, #128]	@ (8002044 <main+0xf0>)
 8001fc4:	f005 fb00 	bl	80075c8 <HAL_TIM_Base_Start_IT>

  //ADC변환 시작
  uint16_t ADCVAL[2] = {0, };
 8001fc8:	2300      	movs	r3, #0
 8001fca:	613b      	str	r3, [r7, #16]
  HAL_ADC_Start_DMA(&hadc1, &ADCVAL[0], 2);
 8001fcc:	f107 0310 	add.w	r3, r7, #16
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	481c      	ldr	r0, [pc, #112]	@ (8002048 <main+0xf4>)
 8001fd6:	f000 fe89 	bl	8002cec <HAL_ADC_Start_DMA>

  //모든 장치 초기화를 마치고 WDT가동
  HAL_IWDG_Init(&hiwdg);
 8001fda:	481c      	ldr	r0, [pc, #112]	@ (800204c <main+0xf8>)
 8001fdc:	f002 ff4f 	bl	8004e7e <HAL_IWDG_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_IWDG_Refresh(&hiwdg);
 8001fe0:	481a      	ldr	r0, [pc, #104]	@ (800204c <main+0xf8>)
 8001fe2:	f002 ff8e 	bl	8004f02 <HAL_IWDG_Refresh>
	  Time_Calibration(&time, m6n_rx_buf, &rtc);
 8001fe6:	f107 0208 	add.w	r2, r7, #8
 8001fea:	463b      	mov	r3, r7
 8001fec:	4918      	ldr	r1, [pc, #96]	@ (8002050 <main+0xfc>)
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fb93 	bl	800171a <Time_Calibration>
	  if(TIM2_flag)
 8001ff4:	4b17      	ldr	r3, [pc, #92]	@ (8002054 <main+0x100>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0f1      	beq.n	8001fe0 <main+0x8c>
	  {
		  send_Data(&time);
 8001ffc:	463b      	mov	r3, r7
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fd16 	bl	8001a30 <send_Data>
		  TIM2_flag = false;
 8002004:	4b13      	ldr	r3, [pc, #76]	@ (8002054 <main+0x100>)
 8002006:	2200      	movs	r2, #0
 8002008:	701a      	strb	r2, [r3, #0]
		  Display(&time, &ADCVAL);
 800200a:	f107 0210 	add.w	r2, r7, #16
 800200e:	463b      	mov	r3, r7
 8002010:	4611      	mov	r1, r2
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fcf6 	bl	8001a04 <Display>
		  led_flag = SubMCU_Check();
 8002018:	f7ff fd54 	bl	8001ac4 <SubMCU_Check>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	bf14      	ite	ne
 8002022:	2301      	movne	r3, #1
 8002024:	2300      	moveq	r3, #0
 8002026:	75fb      	strb	r3, [r7, #23]
  {
 8002028:	e7da      	b.n	8001fe0 <main+0x8c>
 800202a:	bf00      	nop
 800202c:	200004fc 	.word	0x200004fc
 8002030:	20000484 	.word	0x20000484
 8002034:	2000058c 	.word	0x2000058c
 8002038:	20000424 	.word	0x20000424
 800203c:	20000488 	.word	0x20000488
 8002040:	200005d4 	.word	0x200005d4
 8002044:	20000544 	.word	0x20000544
 8002048:	200003b0 	.word	0x200003b0
 800204c:	20000478 	.word	0x20000478
 8002050:	20000390 	.word	0x20000390
 8002054:	2000049c 	.word	0x2000049c

08002058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b094      	sub	sp, #80	@ 0x50
 800205c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800205e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002062:	2228      	movs	r2, #40	@ 0x28
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f00c f9f5 	bl	800e456 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800207c:	1d3b      	adds	r3, r7, #4
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]
 8002084:	609a      	str	r2, [r3, #8]
 8002086:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002088:	2309      	movs	r3, #9
 800208a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800208c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002090:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002092:	2300      	movs	r3, #0
 8002094:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002096:	2301      	movs	r3, #1
 8002098:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800209a:	2301      	movs	r3, #1
 800209c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800209e:	2302      	movs	r3, #2
 80020a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80020a8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80020ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020b2:	4618      	mov	r0, r3
 80020b4:	f004 fca2 	bl	80069fc <HAL_RCC_OscConfig>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80020be:	f000 f8c7 	bl	8002250 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020c2:	230f      	movs	r3, #15
 80020c4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020c6:	2302      	movs	r3, #2
 80020c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020d4:	2300      	movs	r3, #0
 80020d6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	2102      	movs	r1, #2
 80020de:	4618      	mov	r0, r3
 80020e0:	f004 ff0e 	bl	8006f00 <HAL_RCC_ClockConfig>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80020ea:	f000 f8b1 	bl	8002250 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80020ee:	2312      	movs	r3, #18
 80020f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80020f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020f6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80020f8:	2300      	movs	r3, #0
 80020fa:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020fc:	1d3b      	adds	r3, r7, #4
 80020fe:	4618      	mov	r0, r3
 8002100:	f005 f88e 	bl	8007220 <HAL_RCCEx_PeriphCLKConfig>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800210a:	f000 f8a1 	bl	8002250 <Error_Handler>
  }
}
 800210e:	bf00      	nop
 8002110:	3750      	adds	r7, #80	@ 0x50
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	2025      	movs	r0, #37	@ 0x25
 8002120:	f001 f9af 	bl	8003482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002124:	2025      	movs	r0, #37	@ 0x25
 8002126:	f001 f9c8 	bl	80034ba <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2100      	movs	r1, #0
 800212e:	201c      	movs	r0, #28
 8002130:	f001 f9a7 	bl	8003482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002134:	201c      	movs	r0, #28
 8002136:	f001 f9c0 	bl	80034ba <HAL_NVIC_EnableIRQ>
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
	static unsigned char cnt = false;
	if(huart->Instance == USART1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a2d      	ldr	r2, [pc, #180]	@ (8002204 <HAL_UART_RxCpltCallback+0xc4>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d154      	bne.n	80021fc <HAL_UART_RxCpltCallback+0xbc>
	{
		switch(cnt)
 8002152:	4b2d      	ldr	r3, [pc, #180]	@ (8002208 <HAL_UART_RxCpltCallback+0xc8>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b1b      	cmp	r3, #27
 8002158:	d02e      	beq.n	80021b8 <HAL_UART_RxCpltCallback+0x78>
 800215a:	2b1b      	cmp	r3, #27
 800215c:	dc3a      	bgt.n	80021d4 <HAL_UART_RxCpltCallback+0x94>
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <HAL_UART_RxCpltCallback+0x28>
 8002162:	2b01      	cmp	r3, #1
 8002164:	d012      	beq.n	800218c <HAL_UART_RxCpltCallback+0x4c>
 8002166:	e035      	b.n	80021d4 <HAL_UART_RxCpltCallback+0x94>
		{
		case 0:
			if(rx_uart1_data == 0xb5)
 8002168:	4b28      	ldr	r3, [pc, #160]	@ (800220c <HAL_UART_RxCpltCallback+0xcc>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2bb5      	cmp	r3, #181	@ 0xb5
 800216e:	d13f      	bne.n	80021f0 <HAL_UART_RxCpltCallback+0xb0>
			{
				m6n_rx_buf[cnt] = rx_uart1_data;
 8002170:	4b25      	ldr	r3, [pc, #148]	@ (8002208 <HAL_UART_RxCpltCallback+0xc8>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	4b25      	ldr	r3, [pc, #148]	@ (800220c <HAL_UART_RxCpltCallback+0xcc>)
 8002178:	7819      	ldrb	r1, [r3, #0]
 800217a:	4b25      	ldr	r3, [pc, #148]	@ (8002210 <HAL_UART_RxCpltCallback+0xd0>)
 800217c:	5499      	strb	r1, [r3, r2]
				cnt++;
 800217e:	4b22      	ldr	r3, [pc, #136]	@ (8002208 <HAL_UART_RxCpltCallback+0xc8>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	3301      	adds	r3, #1
 8002184:	b2da      	uxtb	r2, r3
 8002186:	4b20      	ldr	r3, [pc, #128]	@ (8002208 <HAL_UART_RxCpltCallback+0xc8>)
 8002188:	701a      	strb	r2, [r3, #0]
			}
			break;
 800218a:	e031      	b.n	80021f0 <HAL_UART_RxCpltCallback+0xb0>
		case 1:
			if(rx_uart1_data == 0x62)
 800218c:	4b1f      	ldr	r3, [pc, #124]	@ (800220c <HAL_UART_RxCpltCallback+0xcc>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b62      	cmp	r3, #98	@ 0x62
 8002192:	d10d      	bne.n	80021b0 <HAL_UART_RxCpltCallback+0x70>
			{
				m6n_rx_buf[cnt] = rx_uart1_data;
 8002194:	4b1c      	ldr	r3, [pc, #112]	@ (8002208 <HAL_UART_RxCpltCallback+0xc8>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	461a      	mov	r2, r3
 800219a:	4b1c      	ldr	r3, [pc, #112]	@ (800220c <HAL_UART_RxCpltCallback+0xcc>)
 800219c:	7819      	ldrb	r1, [r3, #0]
 800219e:	4b1c      	ldr	r3, [pc, #112]	@ (8002210 <HAL_UART_RxCpltCallback+0xd0>)
 80021a0:	5499      	strb	r1, [r3, r2]
				cnt++;
 80021a2:	4b19      	ldr	r3, [pc, #100]	@ (8002208 <HAL_UART_RxCpltCallback+0xc8>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	3301      	adds	r3, #1
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4b17      	ldr	r3, [pc, #92]	@ (8002208 <HAL_UART_RxCpltCallback+0xc8>)
 80021ac:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 80021ae:	e020      	b.n	80021f2 <HAL_UART_RxCpltCallback+0xb2>
				cnt = 0;
 80021b0:	4b15      	ldr	r3, [pc, #84]	@ (8002208 <HAL_UART_RxCpltCallback+0xc8>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]
			break;
 80021b6:	e01c      	b.n	80021f2 <HAL_UART_RxCpltCallback+0xb2>
		case 27:
			m6n_rx_buf[cnt] = rx_uart1_data;
 80021b8:	4b13      	ldr	r3, [pc, #76]	@ (8002208 <HAL_UART_RxCpltCallback+0xc8>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	4b13      	ldr	r3, [pc, #76]	@ (800220c <HAL_UART_RxCpltCallback+0xcc>)
 80021c0:	7819      	ldrb	r1, [r3, #0]
 80021c2:	4b13      	ldr	r3, [pc, #76]	@ (8002210 <HAL_UART_RxCpltCallback+0xd0>)
 80021c4:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 80021c6:	4b10      	ldr	r3, [pc, #64]	@ (8002208 <HAL_UART_RxCpltCallback+0xc8>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
			m6n_rx_cplt_flag = true;
 80021cc:	4b11      	ldr	r3, [pc, #68]	@ (8002214 <HAL_UART_RxCpltCallback+0xd4>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	701a      	strb	r2, [r3, #0]
			break;
 80021d2:	e00e      	b.n	80021f2 <HAL_UART_RxCpltCallback+0xb2>
		default:
			m6n_rx_buf[cnt] = rx_uart1_data;
 80021d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002208 <HAL_UART_RxCpltCallback+0xc8>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	4b0c      	ldr	r3, [pc, #48]	@ (800220c <HAL_UART_RxCpltCallback+0xcc>)
 80021dc:	7819      	ldrb	r1, [r3, #0]
 80021de:	4b0c      	ldr	r3, [pc, #48]	@ (8002210 <HAL_UART_RxCpltCallback+0xd0>)
 80021e0:	5499      	strb	r1, [r3, r2]
			cnt++;
 80021e2:	4b09      	ldr	r3, [pc, #36]	@ (8002208 <HAL_UART_RxCpltCallback+0xc8>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	3301      	adds	r3, #1
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	4b07      	ldr	r3, [pc, #28]	@ (8002208 <HAL_UART_RxCpltCallback+0xc8>)
 80021ec:	701a      	strb	r2, [r3, #0]
			break;
 80021ee:	e000      	b.n	80021f2 <HAL_UART_RxCpltCallback+0xb2>
			break;
 80021f0:	bf00      	nop
		}
		HAL_UART_Receive_IT(&huart1, &rx_uart1_data, 1);
 80021f2:	2201      	movs	r2, #1
 80021f4:	4905      	ldr	r1, [pc, #20]	@ (800220c <HAL_UART_RxCpltCallback+0xcc>)
 80021f6:	4808      	ldr	r0, [pc, #32]	@ (8002218 <HAL_UART_RxCpltCallback+0xd8>)
 80021f8:	f005 fe67 	bl	8007eca <HAL_UART_Receive_IT>
	}
}
 80021fc:	bf00      	nop
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40013800 	.word	0x40013800
 8002208:	2000049d 	.word	0x2000049d
 800220c:	20000484 	.word	0x20000484
 8002210:	20000390 	.word	0x20000390
 8002214:	200003ac 	.word	0x200003ac
 8002218:	2000058c 	.word	0x2000058c

0800221c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800222c:	d107      	bne.n	800223e <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		TIM2_flag = true;
 800222e:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002230:	2201      	movs	r2, #1
 8002232:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD_Debug_GPIO_Port, LD_Debug_Pin);
 8002234:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002238:	4804      	ldr	r0, [pc, #16]	@ (800224c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800223a:	f001 fdae 	bl	8003d9a <HAL_GPIO_TogglePin>
	}
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	2000049c 	.word	0x2000049c
 800224c:	40010800 	.word	0x40010800

08002250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002254:	b672      	cpsid	i
}
 8002256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002258:	bf00      	nop
 800225a:	e7fd      	b.n	8002258 <Error_Handler+0x8>

0800225c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002260:	4b17      	ldr	r3, [pc, #92]	@ (80022c0 <MX_SPI1_Init+0x64>)
 8002262:	4a18      	ldr	r2, [pc, #96]	@ (80022c4 <MX_SPI1_Init+0x68>)
 8002264:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002266:	4b16      	ldr	r3, [pc, #88]	@ (80022c0 <MX_SPI1_Init+0x64>)
 8002268:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800226c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800226e:	4b14      	ldr	r3, [pc, #80]	@ (80022c0 <MX_SPI1_Init+0x64>)
 8002270:	2200      	movs	r2, #0
 8002272:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002274:	4b12      	ldr	r3, [pc, #72]	@ (80022c0 <MX_SPI1_Init+0x64>)
 8002276:	2200      	movs	r2, #0
 8002278:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800227a:	4b11      	ldr	r3, [pc, #68]	@ (80022c0 <MX_SPI1_Init+0x64>)
 800227c:	2200      	movs	r2, #0
 800227e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002280:	4b0f      	ldr	r3, [pc, #60]	@ (80022c0 <MX_SPI1_Init+0x64>)
 8002282:	2200      	movs	r2, #0
 8002284:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002286:	4b0e      	ldr	r3, [pc, #56]	@ (80022c0 <MX_SPI1_Init+0x64>)
 8002288:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800228c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800228e:	4b0c      	ldr	r3, [pc, #48]	@ (80022c0 <MX_SPI1_Init+0x64>)
 8002290:	2220      	movs	r2, #32
 8002292:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002294:	4b0a      	ldr	r3, [pc, #40]	@ (80022c0 <MX_SPI1_Init+0x64>)
 8002296:	2200      	movs	r2, #0
 8002298:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800229a:	4b09      	ldr	r3, [pc, #36]	@ (80022c0 <MX_SPI1_Init+0x64>)
 800229c:	2200      	movs	r2, #0
 800229e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022a0:	4b07      	ldr	r3, [pc, #28]	@ (80022c0 <MX_SPI1_Init+0x64>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80022a6:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <MX_SPI1_Init+0x64>)
 80022a8:	220a      	movs	r2, #10
 80022aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022ac:	4804      	ldr	r0, [pc, #16]	@ (80022c0 <MX_SPI1_Init+0x64>)
 80022ae:	f005 f86d 	bl	800738c <HAL_SPI_Init>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80022b8:	f7ff ffca 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022bc:	bf00      	nop
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	200004a0 	.word	0x200004a0
 80022c4:	40013000 	.word	0x40013000

080022c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d0:	f107 0310 	add.w	r3, r7, #16
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002350 <HAL_SPI_MspInit+0x88>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d12f      	bne.n	8002348 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002354 <HAL_SPI_MspInit+0x8c>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	4a19      	ldr	r2, [pc, #100]	@ (8002354 <HAL_SPI_MspInit+0x8c>)
 80022ee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022f2:	6193      	str	r3, [r2, #24]
 80022f4:	4b17      	ldr	r3, [pc, #92]	@ (8002354 <HAL_SPI_MspInit+0x8c>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002300:	4b14      	ldr	r3, [pc, #80]	@ (8002354 <HAL_SPI_MspInit+0x8c>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	4a13      	ldr	r2, [pc, #76]	@ (8002354 <HAL_SPI_MspInit+0x8c>)
 8002306:	f043 0304 	orr.w	r3, r3, #4
 800230a:	6193      	str	r3, [r2, #24]
 800230c:	4b11      	ldr	r3, [pc, #68]	@ (8002354 <HAL_SPI_MspInit+0x8c>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002318:	23a0      	movs	r3, #160	@ 0xa0
 800231a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231c:	2302      	movs	r3, #2
 800231e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002320:	2303      	movs	r3, #3
 8002322:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002324:	f107 0310 	add.w	r3, r7, #16
 8002328:	4619      	mov	r1, r3
 800232a:	480b      	ldr	r0, [pc, #44]	@ (8002358 <HAL_SPI_MspInit+0x90>)
 800232c:	f001 fb82 	bl	8003a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002330:	2340      	movs	r3, #64	@ 0x40
 8002332:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233c:	f107 0310 	add.w	r3, r7, #16
 8002340:	4619      	mov	r1, r3
 8002342:	4805      	ldr	r0, [pc, #20]	@ (8002358 <HAL_SPI_MspInit+0x90>)
 8002344:	f001 fb76 	bl	8003a34 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002348:	bf00      	nop
 800234a:	3720      	adds	r7, #32
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40013000 	.word	0x40013000
 8002354:	40021000 	.word	0x40021000
 8002358:	40010800 	.word	0x40010800

0800235c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002362:	4b15      	ldr	r3, [pc, #84]	@ (80023b8 <HAL_MspInit+0x5c>)
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	4a14      	ldr	r2, [pc, #80]	@ (80023b8 <HAL_MspInit+0x5c>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6193      	str	r3, [r2, #24]
 800236e:	4b12      	ldr	r3, [pc, #72]	@ (80023b8 <HAL_MspInit+0x5c>)
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800237a:	4b0f      	ldr	r3, [pc, #60]	@ (80023b8 <HAL_MspInit+0x5c>)
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	4a0e      	ldr	r2, [pc, #56]	@ (80023b8 <HAL_MspInit+0x5c>)
 8002380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002384:	61d3      	str	r3, [r2, #28]
 8002386:	4b0c      	ldr	r3, [pc, #48]	@ (80023b8 <HAL_MspInit+0x5c>)
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800238e:	607b      	str	r3, [r7, #4]
 8002390:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002392:	4b0a      	ldr	r3, [pc, #40]	@ (80023bc <HAL_MspInit+0x60>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	4a04      	ldr	r2, [pc, #16]	@ (80023bc <HAL_MspInit+0x60>)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ae:	bf00      	nop
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr
 80023b8:	40021000 	.word	0x40021000
 80023bc:	40010000 	.word	0x40010000

080023c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023c4:	bf00      	nop
 80023c6:	e7fd      	b.n	80023c4 <NMI_Handler+0x4>

080023c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023cc:	bf00      	nop
 80023ce:	e7fd      	b.n	80023cc <HardFault_Handler+0x4>

080023d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023d4:	bf00      	nop
 80023d6:	e7fd      	b.n	80023d4 <MemManage_Handler+0x4>

080023d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023dc:	bf00      	nop
 80023de:	e7fd      	b.n	80023dc <BusFault_Handler+0x4>

080023e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023e4:	bf00      	nop
 80023e6:	e7fd      	b.n	80023e4 <UsageFault_Handler+0x4>

080023e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr

08002400 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr

0800240c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002410:	f000 fb54 	bl	8002abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002414:	bf00      	nop
 8002416:	bd80      	pop	{r7, pc}

08002418 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800241c:	4802      	ldr	r0, [pc, #8]	@ (8002428 <DMA1_Channel1_IRQHandler+0x10>)
 800241e:	f001 f9d5 	bl	80037cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200003e0 	.word	0x200003e0

0800242c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002430:	4802      	ldr	r0, [pc, #8]	@ (800243c <DMA1_Channel2_IRQHandler+0x10>)
 8002432:	f001 f9cb 	bl	80037cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000660 	.word	0x20000660

08002440 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002444:	4802      	ldr	r0, [pc, #8]	@ (8002450 <DMA1_Channel3_IRQHandler+0x10>)
 8002446:	f001 f9c1 	bl	80037cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	2000061c 	.word	0x2000061c

08002454 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002458:	4802      	ldr	r0, [pc, #8]	@ (8002464 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800245a:	f002 fe86 	bl	800516a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20001370 	.word	0x20001370

08002468 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800246c:	4802      	ldr	r0, [pc, #8]	@ (8002478 <TIM2_IRQHandler+0x10>)
 800246e:	f005 f8fd 	bl	800766c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000544 	.word	0x20000544

0800247c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002480:	4802      	ldr	r0, [pc, #8]	@ (800248c <USART1_IRQHandler+0x10>)
 8002482:	f005 fd6d 	bl	8007f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	2000058c 	.word	0x2000058c

08002490 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return 1;
 8002494:	2301      	movs	r3, #1
}
 8002496:	4618      	mov	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr

0800249e <_kill>:

int _kill(int pid, int sig)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024a8:	f00c f828 	bl	800e4fc <__errno>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2216      	movs	r2, #22
 80024b0:	601a      	str	r2, [r3, #0]
  return -1;
 80024b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <_exit>:

void _exit (int status)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024c6:	f04f 31ff 	mov.w	r1, #4294967295
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff ffe7 	bl	800249e <_kill>
  while (1) {}    /* Make sure we hang here */
 80024d0:	bf00      	nop
 80024d2:	e7fd      	b.n	80024d0 <_exit+0x12>

080024d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	e00a      	b.n	80024fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024e6:	f3af 8000 	nop.w
 80024ea:	4601      	mov	r1, r0
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	60ba      	str	r2, [r7, #8]
 80024f2:	b2ca      	uxtb	r2, r1
 80024f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	3301      	adds	r3, #1
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	429a      	cmp	r2, r3
 8002502:	dbf0      	blt.n	80024e6 <_read+0x12>
  }

  return len;
 8002504:	687b      	ldr	r3, [r7, #4]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <_close>:
  }
  return len;
}

int _close(int file)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002516:	f04f 33ff 	mov.w	r3, #4294967295
}
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr

08002524 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002534:	605a      	str	r2, [r3, #4]
  return 0;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr

08002542 <_isatty>:

int _isatty(int file)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800254a:	2301      	movs	r3, #1
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr

08002556 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002556:	b480      	push	{r7}
 8002558:	b085      	sub	sp, #20
 800255a:	af00      	add	r7, sp, #0
 800255c:	60f8      	str	r0, [r7, #12]
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr
	...

08002570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002578:	4a14      	ldr	r2, [pc, #80]	@ (80025cc <_sbrk+0x5c>)
 800257a:	4b15      	ldr	r3, [pc, #84]	@ (80025d0 <_sbrk+0x60>)
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002584:	4b13      	ldr	r3, [pc, #76]	@ (80025d4 <_sbrk+0x64>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d102      	bne.n	8002592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800258c:	4b11      	ldr	r3, [pc, #68]	@ (80025d4 <_sbrk+0x64>)
 800258e:	4a12      	ldr	r2, [pc, #72]	@ (80025d8 <_sbrk+0x68>)
 8002590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002592:	4b10      	ldr	r3, [pc, #64]	@ (80025d4 <_sbrk+0x64>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4413      	add	r3, r2
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	429a      	cmp	r2, r3
 800259e:	d207      	bcs.n	80025b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025a0:	f00b ffac 	bl	800e4fc <__errno>
 80025a4:	4603      	mov	r3, r0
 80025a6:	220c      	movs	r2, #12
 80025a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025aa:	f04f 33ff 	mov.w	r3, #4294967295
 80025ae:	e009      	b.n	80025c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025b0:	4b08      	ldr	r3, [pc, #32]	@ (80025d4 <_sbrk+0x64>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025b6:	4b07      	ldr	r3, [pc, #28]	@ (80025d4 <_sbrk+0x64>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	4a05      	ldr	r2, [pc, #20]	@ (80025d4 <_sbrk+0x64>)
 80025c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025c2:	68fb      	ldr	r3, [r7, #12]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20005000 	.word	0x20005000
 80025d0:	00000400 	.word	0x00000400
 80025d4:	200004f8 	.word	0x200004f8
 80025d8:	200019d0 	.word	0x200019d0

080025dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr

080025e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ee:	f107 0308 	add.w	r3, r7, #8
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	605a      	str	r2, [r3, #4]
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025fc:	463b      	mov	r3, r7
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002604:	4b1e      	ldr	r3, [pc, #120]	@ (8002680 <MX_TIM1_Init+0x98>)
 8002606:	4a1f      	ldr	r2, [pc, #124]	@ (8002684 <MX_TIM1_Init+0x9c>)
 8002608:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800260a:	4b1d      	ldr	r3, [pc, #116]	@ (8002680 <MX_TIM1_Init+0x98>)
 800260c:	2247      	movs	r2, #71	@ 0x47
 800260e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002610:	4b1b      	ldr	r3, [pc, #108]	@ (8002680 <MX_TIM1_Init+0x98>)
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8002616:	4b1a      	ldr	r3, [pc, #104]	@ (8002680 <MX_TIM1_Init+0x98>)
 8002618:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800261c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800261e:	4b18      	ldr	r3, [pc, #96]	@ (8002680 <MX_TIM1_Init+0x98>)
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002624:	4b16      	ldr	r3, [pc, #88]	@ (8002680 <MX_TIM1_Init+0x98>)
 8002626:	2200      	movs	r2, #0
 8002628:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800262a:	4b15      	ldr	r3, [pc, #84]	@ (8002680 <MX_TIM1_Init+0x98>)
 800262c:	2200      	movs	r2, #0
 800262e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002630:	4813      	ldr	r0, [pc, #76]	@ (8002680 <MX_TIM1_Init+0x98>)
 8002632:	f004 ff2f 	bl	8007494 <HAL_TIM_Base_Init>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800263c:	f7ff fe08 	bl	8002250 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002640:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002644:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002646:	f107 0308 	add.w	r3, r7, #8
 800264a:	4619      	mov	r1, r3
 800264c:	480c      	ldr	r0, [pc, #48]	@ (8002680 <MX_TIM1_Init+0x98>)
 800264e:	f005 f915 	bl	800787c <HAL_TIM_ConfigClockSource>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002658:	f7ff fdfa 	bl	8002250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800265c:	2300      	movs	r3, #0
 800265e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002660:	2300      	movs	r3, #0
 8002662:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002664:	463b      	mov	r3, r7
 8002666:	4619      	mov	r1, r3
 8002668:	4805      	ldr	r0, [pc, #20]	@ (8002680 <MX_TIM1_Init+0x98>)
 800266a:	f005 faeb 	bl	8007c44 <HAL_TIMEx_MasterConfigSynchronization>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002674:	f7ff fdec 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002678:	bf00      	nop
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	200004fc 	.word	0x200004fc
 8002684:	40012c00 	.word	0x40012c00

08002688 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800268e:	f107 0308 	add.w	r3, r7, #8
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	609a      	str	r2, [r3, #8]
 800269a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800269c:	463b      	mov	r3, r7
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002720 <MX_TIM2_Init+0x98>)
 80026a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80026aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 80026ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002720 <MX_TIM2_Init+0x98>)
 80026ae:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80026b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002720 <MX_TIM2_Init+0x98>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 80026ba:	4b19      	ldr	r3, [pc, #100]	@ (8002720 <MX_TIM2_Init+0x98>)
 80026bc:	f241 3287 	movw	r2, #4999	@ 0x1387
 80026c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026c2:	4b17      	ldr	r3, [pc, #92]	@ (8002720 <MX_TIM2_Init+0x98>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026c8:	4b15      	ldr	r3, [pc, #84]	@ (8002720 <MX_TIM2_Init+0x98>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026ce:	4814      	ldr	r0, [pc, #80]	@ (8002720 <MX_TIM2_Init+0x98>)
 80026d0:	f004 fee0 	bl	8007494 <HAL_TIM_Base_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80026da:	f7ff fdb9 	bl	8002250 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026e4:	f107 0308 	add.w	r3, r7, #8
 80026e8:	4619      	mov	r1, r3
 80026ea:	480d      	ldr	r0, [pc, #52]	@ (8002720 <MX_TIM2_Init+0x98>)
 80026ec:	f005 f8c6 	bl	800787c <HAL_TIM_ConfigClockSource>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80026f6:	f7ff fdab 	bl	8002250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026fa:	2300      	movs	r3, #0
 80026fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026fe:	2300      	movs	r3, #0
 8002700:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002702:	463b      	mov	r3, r7
 8002704:	4619      	mov	r1, r3
 8002706:	4806      	ldr	r0, [pc, #24]	@ (8002720 <MX_TIM2_Init+0x98>)
 8002708:	f005 fa9c 	bl	8007c44 <HAL_TIMEx_MasterConfigSynchronization>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002712:	f7ff fd9d 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002716:	bf00      	nop
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000544 	.word	0x20000544

08002724 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a12      	ldr	r2, [pc, #72]	@ (800277c <HAL_TIM_Base_MspInit+0x58>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d10c      	bne.n	8002750 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002736:	4b12      	ldr	r3, [pc, #72]	@ (8002780 <HAL_TIM_Base_MspInit+0x5c>)
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	4a11      	ldr	r2, [pc, #68]	@ (8002780 <HAL_TIM_Base_MspInit+0x5c>)
 800273c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002740:	6193      	str	r3, [r2, #24]
 8002742:	4b0f      	ldr	r3, [pc, #60]	@ (8002780 <HAL_TIM_Base_MspInit+0x5c>)
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800274e:	e010      	b.n	8002772 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM2)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002758:	d10b      	bne.n	8002772 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800275a:	4b09      	ldr	r3, [pc, #36]	@ (8002780 <HAL_TIM_Base_MspInit+0x5c>)
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	4a08      	ldr	r2, [pc, #32]	@ (8002780 <HAL_TIM_Base_MspInit+0x5c>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	61d3      	str	r3, [r2, #28]
 8002766:	4b06      	ldr	r3, [pc, #24]	@ (8002780 <HAL_TIM_Base_MspInit+0x5c>)
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	60bb      	str	r3, [r7, #8]
 8002770:	68bb      	ldr	r3, [r7, #8]
}
 8002772:	bf00      	nop
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr
 800277c:	40012c00 	.word	0x40012c00
 8002780:	40021000 	.word	0x40021000

08002784 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002788:	4b11      	ldr	r3, [pc, #68]	@ (80027d0 <MX_USART1_UART_Init+0x4c>)
 800278a:	4a12      	ldr	r2, [pc, #72]	@ (80027d4 <MX_USART1_UART_Init+0x50>)
 800278c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800278e:	4b10      	ldr	r3, [pc, #64]	@ (80027d0 <MX_USART1_UART_Init+0x4c>)
 8002790:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002794:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002796:	4b0e      	ldr	r3, [pc, #56]	@ (80027d0 <MX_USART1_UART_Init+0x4c>)
 8002798:	2200      	movs	r2, #0
 800279a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800279c:	4b0c      	ldr	r3, [pc, #48]	@ (80027d0 <MX_USART1_UART_Init+0x4c>)
 800279e:	2200      	movs	r2, #0
 80027a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027a2:	4b0b      	ldr	r3, [pc, #44]	@ (80027d0 <MX_USART1_UART_Init+0x4c>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027a8:	4b09      	ldr	r3, [pc, #36]	@ (80027d0 <MX_USART1_UART_Init+0x4c>)
 80027aa:	220c      	movs	r2, #12
 80027ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ae:	4b08      	ldr	r3, [pc, #32]	@ (80027d0 <MX_USART1_UART_Init+0x4c>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027b4:	4b06      	ldr	r3, [pc, #24]	@ (80027d0 <MX_USART1_UART_Init+0x4c>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027ba:	4805      	ldr	r0, [pc, #20]	@ (80027d0 <MX_USART1_UART_Init+0x4c>)
 80027bc:	f005 fab2 	bl	8007d24 <HAL_UART_Init>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80027c6:	f7ff fd43 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	2000058c 	.word	0x2000058c
 80027d4:	40013800 	.word	0x40013800

080027d8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80027dc:	4b11      	ldr	r3, [pc, #68]	@ (8002824 <MX_USART3_UART_Init+0x4c>)
 80027de:	4a12      	ldr	r2, [pc, #72]	@ (8002828 <MX_USART3_UART_Init+0x50>)
 80027e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80027e2:	4b10      	ldr	r3, [pc, #64]	@ (8002824 <MX_USART3_UART_Init+0x4c>)
 80027e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80027ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002824 <MX_USART3_UART_Init+0x4c>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80027f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002824 <MX_USART3_UART_Init+0x4c>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80027f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002824 <MX_USART3_UART_Init+0x4c>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027fc:	4b09      	ldr	r3, [pc, #36]	@ (8002824 <MX_USART3_UART_Init+0x4c>)
 80027fe:	220c      	movs	r2, #12
 8002800:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002802:	4b08      	ldr	r3, [pc, #32]	@ (8002824 <MX_USART3_UART_Init+0x4c>)
 8002804:	2200      	movs	r2, #0
 8002806:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002808:	4b06      	ldr	r3, [pc, #24]	@ (8002824 <MX_USART3_UART_Init+0x4c>)
 800280a:	2200      	movs	r2, #0
 800280c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800280e:	4805      	ldr	r0, [pc, #20]	@ (8002824 <MX_USART3_UART_Init+0x4c>)
 8002810:	f005 fa88 	bl	8007d24 <HAL_UART_Init>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800281a:	f7ff fd19 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	200005d4 	.word	0x200005d4
 8002828:	40004800 	.word	0x40004800

0800282c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	@ 0x28
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002834:	f107 0318 	add.w	r3, r7, #24
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a5e      	ldr	r2, [pc, #376]	@ (80029c0 <HAL_UART_MspInit+0x194>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d132      	bne.n	80028b2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800284c:	4b5d      	ldr	r3, [pc, #372]	@ (80029c4 <HAL_UART_MspInit+0x198>)
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	4a5c      	ldr	r2, [pc, #368]	@ (80029c4 <HAL_UART_MspInit+0x198>)
 8002852:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002856:	6193      	str	r3, [r2, #24]
 8002858:	4b5a      	ldr	r3, [pc, #360]	@ (80029c4 <HAL_UART_MspInit+0x198>)
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002864:	4b57      	ldr	r3, [pc, #348]	@ (80029c4 <HAL_UART_MspInit+0x198>)
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	4a56      	ldr	r2, [pc, #344]	@ (80029c4 <HAL_UART_MspInit+0x198>)
 800286a:	f043 0304 	orr.w	r3, r3, #4
 800286e:	6193      	str	r3, [r2, #24]
 8002870:	4b54      	ldr	r3, [pc, #336]	@ (80029c4 <HAL_UART_MspInit+0x198>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_Tx_Pin;
 800287c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002882:	2302      	movs	r3, #2
 8002884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002886:	2303      	movs	r3, #3
 8002888:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPS_Tx_GPIO_Port, &GPIO_InitStruct);
 800288a:	f107 0318 	add.w	r3, r7, #24
 800288e:	4619      	mov	r1, r3
 8002890:	484d      	ldr	r0, [pc, #308]	@ (80029c8 <HAL_UART_MspInit+0x19c>)
 8002892:	f001 f8cf 	bl	8003a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPS_Rx_Pin;
 8002896:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800289a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800289c:	2300      	movs	r3, #0
 800289e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPS_Rx_GPIO_Port, &GPIO_InitStruct);
 80028a4:	f107 0318 	add.w	r3, r7, #24
 80028a8:	4619      	mov	r1, r3
 80028aa:	4847      	ldr	r0, [pc, #284]	@ (80029c8 <HAL_UART_MspInit+0x19c>)
 80028ac:	f001 f8c2 	bl	8003a34 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80028b0:	e082      	b.n	80029b8 <HAL_UART_MspInit+0x18c>
  else if(uartHandle->Instance==USART3)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a45      	ldr	r2, [pc, #276]	@ (80029cc <HAL_UART_MspInit+0x1a0>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d17d      	bne.n	80029b8 <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80028bc:	4b41      	ldr	r3, [pc, #260]	@ (80029c4 <HAL_UART_MspInit+0x198>)
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	4a40      	ldr	r2, [pc, #256]	@ (80029c4 <HAL_UART_MspInit+0x198>)
 80028c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028c6:	61d3      	str	r3, [r2, #28]
 80028c8:	4b3e      	ldr	r3, [pc, #248]	@ (80029c4 <HAL_UART_MspInit+0x198>)
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d4:	4b3b      	ldr	r3, [pc, #236]	@ (80029c4 <HAL_UART_MspInit+0x198>)
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	4a3a      	ldr	r2, [pc, #232]	@ (80029c4 <HAL_UART_MspInit+0x198>)
 80028da:	f043 0308 	orr.w	r3, r3, #8
 80028de:	6193      	str	r3, [r2, #24]
 80028e0:	4b38      	ldr	r3, [pc, #224]	@ (80029c4 <HAL_UART_MspInit+0x198>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	f003 0308 	and.w	r3, r3, #8
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ATmega328p_Tx_Pin;
 80028ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f2:	2302      	movs	r3, #2
 80028f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028f6:	2303      	movs	r3, #3
 80028f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ATmega328p_Tx_GPIO_Port, &GPIO_InitStruct);
 80028fa:	f107 0318 	add.w	r3, r7, #24
 80028fe:	4619      	mov	r1, r3
 8002900:	4833      	ldr	r0, [pc, #204]	@ (80029d0 <HAL_UART_MspInit+0x1a4>)
 8002902:	f001 f897 	bl	8003a34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ATmega328p_Rx_Pin;
 8002906:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800290a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800290c:	2300      	movs	r3, #0
 800290e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(ATmega328p_Rx_GPIO_Port, &GPIO_InitStruct);
 8002914:	f107 0318 	add.w	r3, r7, #24
 8002918:	4619      	mov	r1, r3
 800291a:	482d      	ldr	r0, [pc, #180]	@ (80029d0 <HAL_UART_MspInit+0x1a4>)
 800291c:	f001 f88a 	bl	8003a34 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002920:	4b2c      	ldr	r3, [pc, #176]	@ (80029d4 <HAL_UART_MspInit+0x1a8>)
 8002922:	4a2d      	ldr	r2, [pc, #180]	@ (80029d8 <HAL_UART_MspInit+0x1ac>)
 8002924:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002926:	4b2b      	ldr	r3, [pc, #172]	@ (80029d4 <HAL_UART_MspInit+0x1a8>)
 8002928:	2200      	movs	r2, #0
 800292a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800292c:	4b29      	ldr	r3, [pc, #164]	@ (80029d4 <HAL_UART_MspInit+0x1a8>)
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002932:	4b28      	ldr	r3, [pc, #160]	@ (80029d4 <HAL_UART_MspInit+0x1a8>)
 8002934:	2280      	movs	r2, #128	@ 0x80
 8002936:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002938:	4b26      	ldr	r3, [pc, #152]	@ (80029d4 <HAL_UART_MspInit+0x1a8>)
 800293a:	2200      	movs	r2, #0
 800293c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800293e:	4b25      	ldr	r3, [pc, #148]	@ (80029d4 <HAL_UART_MspInit+0x1a8>)
 8002940:	2200      	movs	r2, #0
 8002942:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002944:	4b23      	ldr	r3, [pc, #140]	@ (80029d4 <HAL_UART_MspInit+0x1a8>)
 8002946:	2220      	movs	r2, #32
 8002948:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800294a:	4b22      	ldr	r3, [pc, #136]	@ (80029d4 <HAL_UART_MspInit+0x1a8>)
 800294c:	2200      	movs	r2, #0
 800294e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002950:	4820      	ldr	r0, [pc, #128]	@ (80029d4 <HAL_UART_MspInit+0x1a8>)
 8002952:	f000 fdcd 	bl	80034f0 <HAL_DMA_Init>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_UART_MspInit+0x134>
      Error_Handler();
 800295c:	f7ff fc78 	bl	8002250 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a1c      	ldr	r2, [pc, #112]	@ (80029d4 <HAL_UART_MspInit+0x1a8>)
 8002964:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002966:	4a1b      	ldr	r2, [pc, #108]	@ (80029d4 <HAL_UART_MspInit+0x1a8>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800296c:	4b1b      	ldr	r3, [pc, #108]	@ (80029dc <HAL_UART_MspInit+0x1b0>)
 800296e:	4a1c      	ldr	r2, [pc, #112]	@ (80029e0 <HAL_UART_MspInit+0x1b4>)
 8002970:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002972:	4b1a      	ldr	r3, [pc, #104]	@ (80029dc <HAL_UART_MspInit+0x1b0>)
 8002974:	2210      	movs	r2, #16
 8002976:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002978:	4b18      	ldr	r3, [pc, #96]	@ (80029dc <HAL_UART_MspInit+0x1b0>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800297e:	4b17      	ldr	r3, [pc, #92]	@ (80029dc <HAL_UART_MspInit+0x1b0>)
 8002980:	2280      	movs	r2, #128	@ 0x80
 8002982:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002984:	4b15      	ldr	r3, [pc, #84]	@ (80029dc <HAL_UART_MspInit+0x1b0>)
 8002986:	2200      	movs	r2, #0
 8002988:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800298a:	4b14      	ldr	r3, [pc, #80]	@ (80029dc <HAL_UART_MspInit+0x1b0>)
 800298c:	2200      	movs	r2, #0
 800298e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002990:	4b12      	ldr	r3, [pc, #72]	@ (80029dc <HAL_UART_MspInit+0x1b0>)
 8002992:	2200      	movs	r2, #0
 8002994:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002996:	4b11      	ldr	r3, [pc, #68]	@ (80029dc <HAL_UART_MspInit+0x1b0>)
 8002998:	2200      	movs	r2, #0
 800299a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800299c:	480f      	ldr	r0, [pc, #60]	@ (80029dc <HAL_UART_MspInit+0x1b0>)
 800299e:	f000 fda7 	bl	80034f0 <HAL_DMA_Init>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <HAL_UART_MspInit+0x180>
      Error_Handler();
 80029a8:	f7ff fc52 	bl	8002250 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a0b      	ldr	r2, [pc, #44]	@ (80029dc <HAL_UART_MspInit+0x1b0>)
 80029b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80029b2:	4a0a      	ldr	r2, [pc, #40]	@ (80029dc <HAL_UART_MspInit+0x1b0>)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80029b8:	bf00      	nop
 80029ba:	3728      	adds	r7, #40	@ 0x28
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40013800 	.word	0x40013800
 80029c4:	40021000 	.word	0x40021000
 80029c8:	40010800 	.word	0x40010800
 80029cc:	40004800 	.word	0x40004800
 80029d0:	40010c00 	.word	0x40010c00
 80029d4:	2000061c 	.word	0x2000061c
 80029d8:	40020030 	.word	0x40020030
 80029dc:	20000660 	.word	0x20000660
 80029e0:	4002001c 	.word	0x4002001c

080029e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80029e4:	f7ff fdfa 	bl	80025dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029e8:	480b      	ldr	r0, [pc, #44]	@ (8002a18 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80029ea:	490c      	ldr	r1, [pc, #48]	@ (8002a1c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80029ec:	4a0c      	ldr	r2, [pc, #48]	@ (8002a20 <LoopFillZerobss+0x16>)
  movs r3, #0
 80029ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029f0:	e002      	b.n	80029f8 <LoopCopyDataInit>

080029f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029f6:	3304      	adds	r3, #4

080029f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029fc:	d3f9      	bcc.n	80029f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029fe:	4a09      	ldr	r2, [pc, #36]	@ (8002a24 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002a00:	4c09      	ldr	r4, [pc, #36]	@ (8002a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a04:	e001      	b.n	8002a0a <LoopFillZerobss>

08002a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a08:	3204      	adds	r2, #4

08002a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a0c:	d3fb      	bcc.n	8002a06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a0e:	f00b fd7b 	bl	800e508 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a12:	f7ff fa9f 	bl	8001f54 <main>
  bx lr
 8002a16:	4770      	bx	lr
  ldr r0, =_sdata
 8002a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a1c:	20000364 	.word	0x20000364
  ldr r2, =_sidata
 8002a20:	080121b8 	.word	0x080121b8
  ldr r2, =_sbss
 8002a24:	20000364 	.word	0x20000364
  ldr r4, =_ebss
 8002a28:	200019cc 	.word	0x200019cc

08002a2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a2c:	e7fe      	b.n	8002a2c <ADC1_2_IRQHandler>
	...

08002a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a34:	4b08      	ldr	r3, [pc, #32]	@ (8002a58 <HAL_Init+0x28>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a07      	ldr	r2, [pc, #28]	@ (8002a58 <HAL_Init+0x28>)
 8002a3a:	f043 0310 	orr.w	r3, r3, #16
 8002a3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a40:	2003      	movs	r0, #3
 8002a42:	f000 fd13 	bl	800346c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a46:	200f      	movs	r0, #15
 8002a48:	f000 f808 	bl	8002a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a4c:	f7ff fc86 	bl	800235c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40022000 	.word	0x40022000

08002a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a64:	4b12      	ldr	r3, [pc, #72]	@ (8002ab0 <HAL_InitTick+0x54>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4b12      	ldr	r3, [pc, #72]	@ (8002ab4 <HAL_InitTick+0x58>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fd2b 	bl	80034d6 <HAL_SYSTICK_Config>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e00e      	b.n	8002aa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b0f      	cmp	r3, #15
 8002a8e:	d80a      	bhi.n	8002aa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a90:	2200      	movs	r2, #0
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	f04f 30ff 	mov.w	r0, #4294967295
 8002a98:	f000 fcf3 	bl	8003482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a9c:	4a06      	ldr	r2, [pc, #24]	@ (8002ab8 <HAL_InitTick+0x5c>)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	e000      	b.n	8002aa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	20000020 	.word	0x20000020
 8002ab4:	20000028 	.word	0x20000028
 8002ab8:	20000024 	.word	0x20000024

08002abc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ac0:	4b05      	ldr	r3, [pc, #20]	@ (8002ad8 <HAL_IncTick+0x1c>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4b05      	ldr	r3, [pc, #20]	@ (8002adc <HAL_IncTick+0x20>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4413      	add	r3, r2
 8002acc:	4a03      	ldr	r2, [pc, #12]	@ (8002adc <HAL_IncTick+0x20>)
 8002ace:	6013      	str	r3, [r2, #0]
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr
 8002ad8:	20000028 	.word	0x20000028
 8002adc:	200006a4 	.word	0x200006a4

08002ae0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ae4:	4b02      	ldr	r3, [pc, #8]	@ (8002af0 <HAL_GetTick+0x10>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr
 8002af0:	200006a4 	.word	0x200006a4

08002af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002afc:	f7ff fff0 	bl	8002ae0 <HAL_GetTick>
 8002b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0c:	d005      	beq.n	8002b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b38 <HAL_Delay+0x44>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4413      	add	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b1a:	bf00      	nop
 8002b1c:	f7ff ffe0 	bl	8002ae0 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d8f7      	bhi.n	8002b1c <HAL_Delay+0x28>
  {
  }
}
 8002b2c:	bf00      	nop
 8002b2e:	bf00      	nop
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000028 	.word	0x20000028

08002b3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e0be      	b.n	8002cdc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d109      	bne.n	8002b80 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff f814 	bl	8001ba8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 faff 	bl	8003184 <ADC_ConversionStop_Disable>
 8002b86:	4603      	mov	r3, r0
 8002b88:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b8e:	f003 0310 	and.w	r3, r3, #16
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f040 8099 	bne.w	8002cca <HAL_ADC_Init+0x18e>
 8002b98:	7dfb      	ldrb	r3, [r7, #23]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f040 8095 	bne.w	8002cca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ba8:	f023 0302 	bic.w	r3, r3, #2
 8002bac:	f043 0202 	orr.w	r2, r3, #2
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002bbc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	7b1b      	ldrb	r3, [r3, #12]
 8002bc2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002bc4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bd4:	d003      	beq.n	8002bde <HAL_ADC_Init+0xa2>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d102      	bne.n	8002be4 <HAL_ADC_Init+0xa8>
 8002bde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002be2:	e000      	b.n	8002be6 <HAL_ADC_Init+0xaa>
 8002be4:	2300      	movs	r3, #0
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	7d1b      	ldrb	r3, [r3, #20]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d119      	bne.n	8002c28 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	7b1b      	ldrb	r3, [r3, #12]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d109      	bne.n	8002c10 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	3b01      	subs	r3, #1
 8002c02:	035a      	lsls	r2, r3, #13
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	e00b      	b.n	8002c28 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c14:	f043 0220 	orr.w	r2, r3, #32
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c20:	f043 0201 	orr.w	r2, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	4b28      	ldr	r3, [pc, #160]	@ (8002ce4 <HAL_ADC_Init+0x1a8>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	68b9      	ldr	r1, [r7, #8]
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c58:	d003      	beq.n	8002c62 <HAL_ADC_Init+0x126>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d104      	bne.n	8002c6c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	051b      	lsls	r3, r3, #20
 8002c6a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c72:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	4b18      	ldr	r3, [pc, #96]	@ (8002ce8 <HAL_ADC_Init+0x1ac>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d10b      	bne.n	8002ca8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9a:	f023 0303 	bic.w	r3, r3, #3
 8002c9e:	f043 0201 	orr.w	r2, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ca6:	e018      	b.n	8002cda <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cac:	f023 0312 	bic.w	r3, r3, #18
 8002cb0:	f043 0210 	orr.w	r2, r3, #16
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cbc:	f043 0201 	orr.w	r2, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002cc8:	e007      	b.n	8002cda <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cce:	f043 0210 	orr.w	r2, r3, #16
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	ffe1f7fd 	.word	0xffe1f7fd
 8002ce8:	ff1f0efe 	.word	0xff1f0efe

08002cec <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a64      	ldr	r2, [pc, #400]	@ (8002e94 <HAL_ADC_Start_DMA+0x1a8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d004      	beq.n	8002d10 <HAL_ADC_Start_DMA+0x24>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a63      	ldr	r2, [pc, #396]	@ (8002e98 <HAL_ADC_Start_DMA+0x1ac>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d106      	bne.n	8002d1e <HAL_ADC_Start_DMA+0x32>
 8002d10:	4b60      	ldr	r3, [pc, #384]	@ (8002e94 <HAL_ADC_Start_DMA+0x1a8>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f040 80b3 	bne.w	8002e84 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d101      	bne.n	8002d2c <HAL_ADC_Start_DMA+0x40>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e0ae      	b.n	8002e8a <HAL_ADC_Start_DMA+0x19e>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 f9cb 	bl	80030d0 <ADC_Enable>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002d3e:	7dfb      	ldrb	r3, [r7, #23]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f040 809a 	bne.w	8002e7a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002d4e:	f023 0301 	bic.w	r3, r3, #1
 8002d52:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a4e      	ldr	r2, [pc, #312]	@ (8002e98 <HAL_ADC_Start_DMA+0x1ac>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d105      	bne.n	8002d70 <HAL_ADC_Start_DMA+0x84>
 8002d64:	4b4b      	ldr	r3, [pc, #300]	@ (8002e94 <HAL_ADC_Start_DMA+0x1a8>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d115      	bne.n	8002d9c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d74:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d026      	beq.n	8002dd8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d92:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d9a:	e01d      	b.n	8002dd8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a39      	ldr	r2, [pc, #228]	@ (8002e94 <HAL_ADC_Start_DMA+0x1a8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d004      	beq.n	8002dbc <HAL_ADC_Start_DMA+0xd0>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a38      	ldr	r2, [pc, #224]	@ (8002e98 <HAL_ADC_Start_DMA+0x1ac>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d10d      	bne.n	8002dd8 <HAL_ADC_Start_DMA+0xec>
 8002dbc:	4b35      	ldr	r3, [pc, #212]	@ (8002e94 <HAL_ADC_Start_DMA+0x1a8>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d007      	beq.n	8002dd8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dcc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002dd0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ddc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d006      	beq.n	8002df2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de8:	f023 0206 	bic.w	r2, r3, #6
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002df0:	e002      	b.n	8002df8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	4a25      	ldr	r2, [pc, #148]	@ (8002e9c <HAL_ADC_Start_DMA+0x1b0>)
 8002e06:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	4a24      	ldr	r2, [pc, #144]	@ (8002ea0 <HAL_ADC_Start_DMA+0x1b4>)
 8002e0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	4a23      	ldr	r2, [pc, #140]	@ (8002ea4 <HAL_ADC_Start_DMA+0x1b8>)
 8002e16:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f06f 0202 	mvn.w	r2, #2
 8002e20:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e30:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a18      	ldr	r0, [r3, #32]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	334c      	adds	r3, #76	@ 0x4c
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f000 fbaf 	bl	80035a4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002e50:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002e54:	d108      	bne.n	8002e68 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002e64:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002e66:	e00f      	b.n	8002e88 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002e76:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002e78:	e006      	b.n	8002e88 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8002e82:	e001      	b.n	8002e88 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40012400 	.word	0x40012400
 8002e98:	40012800 	.word	0x40012800
 8002e9c:	08003207 	.word	0x08003207
 8002ea0:	08003283 	.word	0x08003283
 8002ea4:	0800329f 	.word	0x0800329f

08002ea8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr

08002eba <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr
	...

08002ee0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x20>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e0dc      	b.n	80030ba <HAL_ADC_ConfigChannel+0x1da>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b06      	cmp	r3, #6
 8002f0e:	d81c      	bhi.n	8002f4a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	3b05      	subs	r3, #5
 8002f22:	221f      	movs	r2, #31
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	4019      	ands	r1, r3
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	6818      	ldr	r0, [r3, #0]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	3b05      	subs	r3, #5
 8002f3c:	fa00 f203 	lsl.w	r2, r0, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f48:	e03c      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b0c      	cmp	r3, #12
 8002f50:	d81c      	bhi.n	8002f8c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	3b23      	subs	r3, #35	@ 0x23
 8002f64:	221f      	movs	r2, #31
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	4019      	ands	r1, r3
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3b23      	subs	r3, #35	@ 0x23
 8002f7e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f8a:	e01b      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3b41      	subs	r3, #65	@ 0x41
 8002f9e:	221f      	movs	r2, #31
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	4019      	ands	r1, r3
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	6818      	ldr	r0, [r3, #0]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3b41      	subs	r3, #65	@ 0x41
 8002fb8:	fa00 f203 	lsl.w	r2, r0, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b09      	cmp	r3, #9
 8002fca:	d91c      	bls.n	8003006 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68d9      	ldr	r1, [r3, #12]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	4413      	add	r3, r2
 8002fdc:	3b1e      	subs	r3, #30
 8002fde:	2207      	movs	r2, #7
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	4019      	ands	r1, r3
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	6898      	ldr	r0, [r3, #8]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3b1e      	subs	r3, #30
 8002ff8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	60da      	str	r2, [r3, #12]
 8003004:	e019      	b.n	800303a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6919      	ldr	r1, [r3, #16]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	4613      	mov	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	4413      	add	r3, r2
 8003016:	2207      	movs	r2, #7
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	4019      	ands	r1, r3
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	6898      	ldr	r0, [r3, #8]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	4613      	mov	r3, r2
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	4413      	add	r3, r2
 800302e:	fa00 f203 	lsl.w	r2, r0, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b10      	cmp	r3, #16
 8003040:	d003      	beq.n	800304a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003046:	2b11      	cmp	r3, #17
 8003048:	d132      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a1d      	ldr	r2, [pc, #116]	@ (80030c4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d125      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d126      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003070:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b10      	cmp	r3, #16
 8003078:	d11a      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800307a:	4b13      	ldr	r3, [pc, #76]	@ (80030c8 <HAL_ADC_ConfigChannel+0x1e8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a13      	ldr	r2, [pc, #76]	@ (80030cc <HAL_ADC_ConfigChannel+0x1ec>)
 8003080:	fba2 2303 	umull	r2, r3, r2, r3
 8003084:	0c9a      	lsrs	r2, r3, #18
 8003086:	4613      	mov	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003090:	e002      	b.n	8003098 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	3b01      	subs	r3, #1
 8003096:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f9      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x1b2>
 800309e:	e007      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a4:	f043 0220 	orr.w	r2, r3, #32
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr
 80030c4:	40012400 	.word	0x40012400
 80030c8:	20000020 	.word	0x20000020
 80030cc:	431bde83 	.word	0x431bde83

080030d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80030dc:	2300      	movs	r3, #0
 80030de:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d040      	beq.n	8003170 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f042 0201 	orr.w	r2, r2, #1
 80030fc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030fe:	4b1f      	ldr	r3, [pc, #124]	@ (800317c <ADC_Enable+0xac>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a1f      	ldr	r2, [pc, #124]	@ (8003180 <ADC_Enable+0xb0>)
 8003104:	fba2 2303 	umull	r2, r3, r2, r3
 8003108:	0c9b      	lsrs	r3, r3, #18
 800310a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800310c:	e002      	b.n	8003114 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	3b01      	subs	r3, #1
 8003112:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f9      	bne.n	800310e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800311a:	f7ff fce1 	bl	8002ae0 <HAL_GetTick>
 800311e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003120:	e01f      	b.n	8003162 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003122:	f7ff fcdd 	bl	8002ae0 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d918      	bls.n	8003162 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b01      	cmp	r3, #1
 800313c:	d011      	beq.n	8003162 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003142:	f043 0210 	orr.w	r2, r3, #16
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314e:	f043 0201 	orr.w	r2, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e007      	b.n	8003172 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b01      	cmp	r3, #1
 800316e:	d1d8      	bne.n	8003122 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	20000020 	.word	0x20000020
 8003180:	431bde83 	.word	0x431bde83

08003184 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b01      	cmp	r3, #1
 800319c:	d12e      	bne.n	80031fc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0201 	bic.w	r2, r2, #1
 80031ac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031ae:	f7ff fc97 	bl	8002ae0 <HAL_GetTick>
 80031b2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80031b4:	e01b      	b.n	80031ee <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031b6:	f7ff fc93 	bl	8002ae0 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d914      	bls.n	80031ee <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d10d      	bne.n	80031ee <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d6:	f043 0210 	orr.w	r2, r3, #16
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e2:	f043 0201 	orr.w	r2, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e007      	b.n	80031fe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d0dc      	beq.n	80031b6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b084      	sub	sp, #16
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003212:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003218:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800321c:	2b00      	cmp	r3, #0
 800321e:	d127      	bne.n	8003270 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003224:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003236:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800323a:	d115      	bne.n	8003268 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003240:	2b00      	cmp	r3, #0
 8003242:	d111      	bne.n	8003268 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003248:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003254:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d105      	bne.n	8003268 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003260:	f043 0201 	orr.w	r2, r3, #1
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f7ff fe1d 	bl	8002ea8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800326e:	e004      	b.n	800327a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	4798      	blx	r3
}
 800327a:	bf00      	nop
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b084      	sub	sp, #16
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f7ff fe12 	bl	8002eba <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003296:	bf00      	nop
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b084      	sub	sp, #16
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032aa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032bc:	f043 0204 	orr.w	r2, r3, #4
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f7ff fe01 	bl	8002ecc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032ca:	bf00      	nop
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
	...

080032d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003318 <__NVIC_SetPriorityGrouping+0x44>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032f0:	4013      	ands	r3, r2
 80032f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003300:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003306:	4a04      	ldr	r2, [pc, #16]	@ (8003318 <__NVIC_SetPriorityGrouping+0x44>)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	60d3      	str	r3, [r2, #12]
}
 800330c:	bf00      	nop
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003320:	4b04      	ldr	r3, [pc, #16]	@ (8003334 <__NVIC_GetPriorityGrouping+0x18>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	0a1b      	lsrs	r3, r3, #8
 8003326:	f003 0307 	and.w	r3, r3, #7
}
 800332a:	4618      	mov	r0, r3
 800332c:	46bd      	mov	sp, r7
 800332e:	bc80      	pop	{r7}
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	e000ed00 	.word	0xe000ed00

08003338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003346:	2b00      	cmp	r3, #0
 8003348:	db0b      	blt.n	8003362 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	f003 021f 	and.w	r2, r3, #31
 8003350:	4906      	ldr	r1, [pc, #24]	@ (800336c <__NVIC_EnableIRQ+0x34>)
 8003352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	2001      	movs	r0, #1
 800335a:	fa00 f202 	lsl.w	r2, r0, r2
 800335e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr
 800336c:	e000e100 	.word	0xe000e100

08003370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	6039      	str	r1, [r7, #0]
 800337a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800337c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003380:	2b00      	cmp	r3, #0
 8003382:	db0a      	blt.n	800339a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	b2da      	uxtb	r2, r3
 8003388:	490c      	ldr	r1, [pc, #48]	@ (80033bc <__NVIC_SetPriority+0x4c>)
 800338a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338e:	0112      	lsls	r2, r2, #4
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	440b      	add	r3, r1
 8003394:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003398:	e00a      	b.n	80033b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	b2da      	uxtb	r2, r3
 800339e:	4908      	ldr	r1, [pc, #32]	@ (80033c0 <__NVIC_SetPriority+0x50>)
 80033a0:	79fb      	ldrb	r3, [r7, #7]
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	3b04      	subs	r3, #4
 80033a8:	0112      	lsls	r2, r2, #4
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	440b      	add	r3, r1
 80033ae:	761a      	strb	r2, [r3, #24]
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bc80      	pop	{r7}
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	e000e100 	.word	0xe000e100
 80033c0:	e000ed00 	.word	0xe000ed00

080033c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b089      	sub	sp, #36	@ 0x24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f1c3 0307 	rsb	r3, r3, #7
 80033de:	2b04      	cmp	r3, #4
 80033e0:	bf28      	it	cs
 80033e2:	2304      	movcs	r3, #4
 80033e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	3304      	adds	r3, #4
 80033ea:	2b06      	cmp	r3, #6
 80033ec:	d902      	bls.n	80033f4 <NVIC_EncodePriority+0x30>
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	3b03      	subs	r3, #3
 80033f2:	e000      	b.n	80033f6 <NVIC_EncodePriority+0x32>
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f8:	f04f 32ff 	mov.w	r2, #4294967295
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43da      	mvns	r2, r3
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	401a      	ands	r2, r3
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800340c:	f04f 31ff 	mov.w	r1, #4294967295
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	fa01 f303 	lsl.w	r3, r1, r3
 8003416:	43d9      	mvns	r1, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800341c:	4313      	orrs	r3, r2
         );
}
 800341e:	4618      	mov	r0, r3
 8003420:	3724      	adds	r7, #36	@ 0x24
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr

08003428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3b01      	subs	r3, #1
 8003434:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003438:	d301      	bcc.n	800343e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800343a:	2301      	movs	r3, #1
 800343c:	e00f      	b.n	800345e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800343e:	4a0a      	ldr	r2, [pc, #40]	@ (8003468 <SysTick_Config+0x40>)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3b01      	subs	r3, #1
 8003444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003446:	210f      	movs	r1, #15
 8003448:	f04f 30ff 	mov.w	r0, #4294967295
 800344c:	f7ff ff90 	bl	8003370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003450:	4b05      	ldr	r3, [pc, #20]	@ (8003468 <SysTick_Config+0x40>)
 8003452:	2200      	movs	r2, #0
 8003454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003456:	4b04      	ldr	r3, [pc, #16]	@ (8003468 <SysTick_Config+0x40>)
 8003458:	2207      	movs	r2, #7
 800345a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	e000e010 	.word	0xe000e010

0800346c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7ff ff2d 	bl	80032d4 <__NVIC_SetPriorityGrouping>
}
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003482:	b580      	push	{r7, lr}
 8003484:	b086      	sub	sp, #24
 8003486:	af00      	add	r7, sp, #0
 8003488:	4603      	mov	r3, r0
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
 800348e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003490:	2300      	movs	r3, #0
 8003492:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003494:	f7ff ff42 	bl	800331c <__NVIC_GetPriorityGrouping>
 8003498:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	68b9      	ldr	r1, [r7, #8]
 800349e:	6978      	ldr	r0, [r7, #20]
 80034a0:	f7ff ff90 	bl	80033c4 <NVIC_EncodePriority>
 80034a4:	4602      	mov	r2, r0
 80034a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034aa:	4611      	mov	r1, r2
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff ff5f 	bl	8003370 <__NVIC_SetPriority>
}
 80034b2:	bf00      	nop
 80034b4:	3718      	adds	r7, #24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	4603      	mov	r3, r0
 80034c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff ff35 	bl	8003338 <__NVIC_EnableIRQ>
}
 80034ce:	bf00      	nop
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b082      	sub	sp, #8
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7ff ffa2 	bl	8003428 <SysTick_Config>
 80034e4:	4603      	mov	r3, r0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
	...

080034f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e043      	b.n	800358e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	4b22      	ldr	r3, [pc, #136]	@ (8003598 <HAL_DMA_Init+0xa8>)
 800350e:	4413      	add	r3, r2
 8003510:	4a22      	ldr	r2, [pc, #136]	@ (800359c <HAL_DMA_Init+0xac>)
 8003512:	fba2 2303 	umull	r2, r3, r2, r3
 8003516:	091b      	lsrs	r3, r3, #4
 8003518:	009a      	lsls	r2, r3, #2
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a1f      	ldr	r2, [pc, #124]	@ (80035a0 <HAL_DMA_Init+0xb0>)
 8003522:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800353a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800353e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003548:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003554:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003560:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr
 8003598:	bffdfff8 	.word	0xbffdfff8
 800359c:	cccccccd 	.word	0xcccccccd
 80035a0:	40020000 	.word	0x40020000

080035a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d101      	bne.n	80035c4 <HAL_DMA_Start_IT+0x20>
 80035c0:	2302      	movs	r3, #2
 80035c2:	e04b      	b.n	800365c <HAL_DMA_Start_IT+0xb8>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d13a      	bne.n	800364e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0201 	bic.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	68b9      	ldr	r1, [r7, #8]
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 f9eb 	bl	80039d8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003606:	2b00      	cmp	r3, #0
 8003608:	d008      	beq.n	800361c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f042 020e 	orr.w	r2, r2, #14
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	e00f      	b.n	800363c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0204 	bic.w	r2, r2, #4
 800362a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 020a 	orr.w	r2, r2, #10
 800363a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0201 	orr.w	r2, r2, #1
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	e005      	b.n	800365a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003656:	2302      	movs	r3, #2
 8003658:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800365a:	7dfb      	ldrb	r3, [r7, #23]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800366c:	2300      	movs	r3, #0
 800366e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d008      	beq.n	800368e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2204      	movs	r2, #4
 8003680:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e020      	b.n	80036d0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 020e 	bic.w	r2, r2, #14
 800369c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0201 	bic.w	r2, r2, #1
 80036ac:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b6:	2101      	movs	r1, #1
 80036b8:	fa01 f202 	lsl.w	r2, r1, r2
 80036bc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr
	...

080036dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d005      	beq.n	8003700 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2204      	movs	r2, #4
 80036f8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	73fb      	strb	r3, [r7, #15]
 80036fe:	e051      	b.n	80037a4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 020e 	bic.w	r2, r2, #14
 800370e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0201 	bic.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a22      	ldr	r2, [pc, #136]	@ (80037b0 <HAL_DMA_Abort_IT+0xd4>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d029      	beq.n	800377e <HAL_DMA_Abort_IT+0xa2>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a21      	ldr	r2, [pc, #132]	@ (80037b4 <HAL_DMA_Abort_IT+0xd8>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d022      	beq.n	800377a <HAL_DMA_Abort_IT+0x9e>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a1f      	ldr	r2, [pc, #124]	@ (80037b8 <HAL_DMA_Abort_IT+0xdc>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d01a      	beq.n	8003774 <HAL_DMA_Abort_IT+0x98>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a1e      	ldr	r2, [pc, #120]	@ (80037bc <HAL_DMA_Abort_IT+0xe0>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d012      	beq.n	800376e <HAL_DMA_Abort_IT+0x92>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a1c      	ldr	r2, [pc, #112]	@ (80037c0 <HAL_DMA_Abort_IT+0xe4>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d00a      	beq.n	8003768 <HAL_DMA_Abort_IT+0x8c>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a1b      	ldr	r2, [pc, #108]	@ (80037c4 <HAL_DMA_Abort_IT+0xe8>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d102      	bne.n	8003762 <HAL_DMA_Abort_IT+0x86>
 800375c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003760:	e00e      	b.n	8003780 <HAL_DMA_Abort_IT+0xa4>
 8003762:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003766:	e00b      	b.n	8003780 <HAL_DMA_Abort_IT+0xa4>
 8003768:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800376c:	e008      	b.n	8003780 <HAL_DMA_Abort_IT+0xa4>
 800376e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003772:	e005      	b.n	8003780 <HAL_DMA_Abort_IT+0xa4>
 8003774:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003778:	e002      	b.n	8003780 <HAL_DMA_Abort_IT+0xa4>
 800377a:	2310      	movs	r3, #16
 800377c:	e000      	b.n	8003780 <HAL_DMA_Abort_IT+0xa4>
 800377e:	2301      	movs	r3, #1
 8003780:	4a11      	ldr	r2, [pc, #68]	@ (80037c8 <HAL_DMA_Abort_IT+0xec>)
 8003782:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	4798      	blx	r3
    } 
  }
  return status;
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40020008 	.word	0x40020008
 80037b4:	4002001c 	.word	0x4002001c
 80037b8:	40020030 	.word	0x40020030
 80037bc:	40020044 	.word	0x40020044
 80037c0:	40020058 	.word	0x40020058
 80037c4:	4002006c 	.word	0x4002006c
 80037c8:	40020000 	.word	0x40020000

080037cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e8:	2204      	movs	r2, #4
 80037ea:	409a      	lsls	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4013      	ands	r3, r2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d04f      	beq.n	8003894 <HAL_DMA_IRQHandler+0xc8>
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d04a      	beq.n	8003894 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0320 	and.w	r3, r3, #32
 8003808:	2b00      	cmp	r3, #0
 800380a:	d107      	bne.n	800381c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0204 	bic.w	r2, r2, #4
 800381a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a66      	ldr	r2, [pc, #408]	@ (80039bc <HAL_DMA_IRQHandler+0x1f0>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d029      	beq.n	800387a <HAL_DMA_IRQHandler+0xae>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a65      	ldr	r2, [pc, #404]	@ (80039c0 <HAL_DMA_IRQHandler+0x1f4>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d022      	beq.n	8003876 <HAL_DMA_IRQHandler+0xaa>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a63      	ldr	r2, [pc, #396]	@ (80039c4 <HAL_DMA_IRQHandler+0x1f8>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d01a      	beq.n	8003870 <HAL_DMA_IRQHandler+0xa4>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a62      	ldr	r2, [pc, #392]	@ (80039c8 <HAL_DMA_IRQHandler+0x1fc>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d012      	beq.n	800386a <HAL_DMA_IRQHandler+0x9e>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a60      	ldr	r2, [pc, #384]	@ (80039cc <HAL_DMA_IRQHandler+0x200>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00a      	beq.n	8003864 <HAL_DMA_IRQHandler+0x98>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a5f      	ldr	r2, [pc, #380]	@ (80039d0 <HAL_DMA_IRQHandler+0x204>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d102      	bne.n	800385e <HAL_DMA_IRQHandler+0x92>
 8003858:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800385c:	e00e      	b.n	800387c <HAL_DMA_IRQHandler+0xb0>
 800385e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003862:	e00b      	b.n	800387c <HAL_DMA_IRQHandler+0xb0>
 8003864:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003868:	e008      	b.n	800387c <HAL_DMA_IRQHandler+0xb0>
 800386a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800386e:	e005      	b.n	800387c <HAL_DMA_IRQHandler+0xb0>
 8003870:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003874:	e002      	b.n	800387c <HAL_DMA_IRQHandler+0xb0>
 8003876:	2340      	movs	r3, #64	@ 0x40
 8003878:	e000      	b.n	800387c <HAL_DMA_IRQHandler+0xb0>
 800387a:	2304      	movs	r3, #4
 800387c:	4a55      	ldr	r2, [pc, #340]	@ (80039d4 <HAL_DMA_IRQHandler+0x208>)
 800387e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 8094 	beq.w	80039b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003892:	e08e      	b.n	80039b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003898:	2202      	movs	r2, #2
 800389a:	409a      	lsls	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4013      	ands	r3, r2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d056      	beq.n	8003952 <HAL_DMA_IRQHandler+0x186>
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d051      	beq.n	8003952 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0320 	and.w	r3, r3, #32
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10b      	bne.n	80038d4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 020a 	bic.w	r2, r2, #10
 80038ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a38      	ldr	r2, [pc, #224]	@ (80039bc <HAL_DMA_IRQHandler+0x1f0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d029      	beq.n	8003932 <HAL_DMA_IRQHandler+0x166>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a37      	ldr	r2, [pc, #220]	@ (80039c0 <HAL_DMA_IRQHandler+0x1f4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d022      	beq.n	800392e <HAL_DMA_IRQHandler+0x162>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a35      	ldr	r2, [pc, #212]	@ (80039c4 <HAL_DMA_IRQHandler+0x1f8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d01a      	beq.n	8003928 <HAL_DMA_IRQHandler+0x15c>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a34      	ldr	r2, [pc, #208]	@ (80039c8 <HAL_DMA_IRQHandler+0x1fc>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d012      	beq.n	8003922 <HAL_DMA_IRQHandler+0x156>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a32      	ldr	r2, [pc, #200]	@ (80039cc <HAL_DMA_IRQHandler+0x200>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00a      	beq.n	800391c <HAL_DMA_IRQHandler+0x150>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a31      	ldr	r2, [pc, #196]	@ (80039d0 <HAL_DMA_IRQHandler+0x204>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d102      	bne.n	8003916 <HAL_DMA_IRQHandler+0x14a>
 8003910:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003914:	e00e      	b.n	8003934 <HAL_DMA_IRQHandler+0x168>
 8003916:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800391a:	e00b      	b.n	8003934 <HAL_DMA_IRQHandler+0x168>
 800391c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003920:	e008      	b.n	8003934 <HAL_DMA_IRQHandler+0x168>
 8003922:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003926:	e005      	b.n	8003934 <HAL_DMA_IRQHandler+0x168>
 8003928:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800392c:	e002      	b.n	8003934 <HAL_DMA_IRQHandler+0x168>
 800392e:	2320      	movs	r3, #32
 8003930:	e000      	b.n	8003934 <HAL_DMA_IRQHandler+0x168>
 8003932:	2302      	movs	r3, #2
 8003934:	4a27      	ldr	r2, [pc, #156]	@ (80039d4 <HAL_DMA_IRQHandler+0x208>)
 8003936:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003944:	2b00      	cmp	r3, #0
 8003946:	d034      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003950:	e02f      	b.n	80039b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003956:	2208      	movs	r2, #8
 8003958:	409a      	lsls	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4013      	ands	r3, r2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d028      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x1e8>
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	f003 0308 	and.w	r3, r3, #8
 8003968:	2b00      	cmp	r3, #0
 800396a:	d023      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 020e 	bic.w	r2, r2, #14
 800397a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003984:	2101      	movs	r1, #1
 8003986:	fa01 f202 	lsl.w	r2, r1, r2
 800398a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d004      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	4798      	blx	r3
    }
  }
  return;
 80039b2:	bf00      	nop
 80039b4:	bf00      	nop
}
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40020008 	.word	0x40020008
 80039c0:	4002001c 	.word	0x4002001c
 80039c4:	40020030 	.word	0x40020030
 80039c8:	40020044 	.word	0x40020044
 80039cc:	40020058 	.word	0x40020058
 80039d0:	4002006c 	.word	0x4002006c
 80039d4:	40020000 	.word	0x40020000

080039d8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
 80039e4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ee:	2101      	movs	r1, #1
 80039f0:	fa01 f202 	lsl.w	r2, r1, r2
 80039f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b10      	cmp	r3, #16
 8003a04:	d108      	bne.n	8003a18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a16:	e007      	b.n	8003a28 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	60da      	str	r2, [r3, #12]
}
 8003a28:	bf00      	nop
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr
	...

08003a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b08b      	sub	sp, #44	@ 0x2c
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003a42:	2300      	movs	r3, #0
 8003a44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a46:	e169      	b.n	8003d1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003a48:	2201      	movs	r2, #1
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	69fa      	ldr	r2, [r7, #28]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	f040 8158 	bne.w	8003d16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	4a9a      	ldr	r2, [pc, #616]	@ (8003cd4 <HAL_GPIO_Init+0x2a0>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d05e      	beq.n	8003b2e <HAL_GPIO_Init+0xfa>
 8003a70:	4a98      	ldr	r2, [pc, #608]	@ (8003cd4 <HAL_GPIO_Init+0x2a0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d875      	bhi.n	8003b62 <HAL_GPIO_Init+0x12e>
 8003a76:	4a98      	ldr	r2, [pc, #608]	@ (8003cd8 <HAL_GPIO_Init+0x2a4>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d058      	beq.n	8003b2e <HAL_GPIO_Init+0xfa>
 8003a7c:	4a96      	ldr	r2, [pc, #600]	@ (8003cd8 <HAL_GPIO_Init+0x2a4>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d86f      	bhi.n	8003b62 <HAL_GPIO_Init+0x12e>
 8003a82:	4a96      	ldr	r2, [pc, #600]	@ (8003cdc <HAL_GPIO_Init+0x2a8>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d052      	beq.n	8003b2e <HAL_GPIO_Init+0xfa>
 8003a88:	4a94      	ldr	r2, [pc, #592]	@ (8003cdc <HAL_GPIO_Init+0x2a8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d869      	bhi.n	8003b62 <HAL_GPIO_Init+0x12e>
 8003a8e:	4a94      	ldr	r2, [pc, #592]	@ (8003ce0 <HAL_GPIO_Init+0x2ac>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d04c      	beq.n	8003b2e <HAL_GPIO_Init+0xfa>
 8003a94:	4a92      	ldr	r2, [pc, #584]	@ (8003ce0 <HAL_GPIO_Init+0x2ac>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d863      	bhi.n	8003b62 <HAL_GPIO_Init+0x12e>
 8003a9a:	4a92      	ldr	r2, [pc, #584]	@ (8003ce4 <HAL_GPIO_Init+0x2b0>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d046      	beq.n	8003b2e <HAL_GPIO_Init+0xfa>
 8003aa0:	4a90      	ldr	r2, [pc, #576]	@ (8003ce4 <HAL_GPIO_Init+0x2b0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d85d      	bhi.n	8003b62 <HAL_GPIO_Init+0x12e>
 8003aa6:	2b12      	cmp	r3, #18
 8003aa8:	d82a      	bhi.n	8003b00 <HAL_GPIO_Init+0xcc>
 8003aaa:	2b12      	cmp	r3, #18
 8003aac:	d859      	bhi.n	8003b62 <HAL_GPIO_Init+0x12e>
 8003aae:	a201      	add	r2, pc, #4	@ (adr r2, 8003ab4 <HAL_GPIO_Init+0x80>)
 8003ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab4:	08003b2f 	.word	0x08003b2f
 8003ab8:	08003b09 	.word	0x08003b09
 8003abc:	08003b1b 	.word	0x08003b1b
 8003ac0:	08003b5d 	.word	0x08003b5d
 8003ac4:	08003b63 	.word	0x08003b63
 8003ac8:	08003b63 	.word	0x08003b63
 8003acc:	08003b63 	.word	0x08003b63
 8003ad0:	08003b63 	.word	0x08003b63
 8003ad4:	08003b63 	.word	0x08003b63
 8003ad8:	08003b63 	.word	0x08003b63
 8003adc:	08003b63 	.word	0x08003b63
 8003ae0:	08003b63 	.word	0x08003b63
 8003ae4:	08003b63 	.word	0x08003b63
 8003ae8:	08003b63 	.word	0x08003b63
 8003aec:	08003b63 	.word	0x08003b63
 8003af0:	08003b63 	.word	0x08003b63
 8003af4:	08003b63 	.word	0x08003b63
 8003af8:	08003b11 	.word	0x08003b11
 8003afc:	08003b25 	.word	0x08003b25
 8003b00:	4a79      	ldr	r2, [pc, #484]	@ (8003ce8 <HAL_GPIO_Init+0x2b4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d013      	beq.n	8003b2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003b06:	e02c      	b.n	8003b62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	623b      	str	r3, [r7, #32]
          break;
 8003b0e:	e029      	b.n	8003b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	3304      	adds	r3, #4
 8003b16:	623b      	str	r3, [r7, #32]
          break;
 8003b18:	e024      	b.n	8003b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	3308      	adds	r3, #8
 8003b20:	623b      	str	r3, [r7, #32]
          break;
 8003b22:	e01f      	b.n	8003b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	330c      	adds	r3, #12
 8003b2a:	623b      	str	r3, [r7, #32]
          break;
 8003b2c:	e01a      	b.n	8003b64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d102      	bne.n	8003b3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b36:	2304      	movs	r3, #4
 8003b38:	623b      	str	r3, [r7, #32]
          break;
 8003b3a:	e013      	b.n	8003b64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d105      	bne.n	8003b50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b44:	2308      	movs	r3, #8
 8003b46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69fa      	ldr	r2, [r7, #28]
 8003b4c:	611a      	str	r2, [r3, #16]
          break;
 8003b4e:	e009      	b.n	8003b64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b50:	2308      	movs	r3, #8
 8003b52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	69fa      	ldr	r2, [r7, #28]
 8003b58:	615a      	str	r2, [r3, #20]
          break;
 8003b5a:	e003      	b.n	8003b64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	623b      	str	r3, [r7, #32]
          break;
 8003b60:	e000      	b.n	8003b64 <HAL_GPIO_Init+0x130>
          break;
 8003b62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	2bff      	cmp	r3, #255	@ 0xff
 8003b68:	d801      	bhi.n	8003b6e <HAL_GPIO_Init+0x13a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	e001      	b.n	8003b72 <HAL_GPIO_Init+0x13e>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	3304      	adds	r3, #4
 8003b72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	2bff      	cmp	r3, #255	@ 0xff
 8003b78:	d802      	bhi.n	8003b80 <HAL_GPIO_Init+0x14c>
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	e002      	b.n	8003b86 <HAL_GPIO_Init+0x152>
 8003b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b82:	3b08      	subs	r3, #8
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	210f      	movs	r1, #15
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	fa01 f303 	lsl.w	r3, r1, r3
 8003b94:	43db      	mvns	r3, r3
 8003b96:	401a      	ands	r2, r3
 8003b98:	6a39      	ldr	r1, [r7, #32]
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 80b1 	beq.w	8003d16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003bb4:	4b4d      	ldr	r3, [pc, #308]	@ (8003cec <HAL_GPIO_Init+0x2b8>)
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	4a4c      	ldr	r2, [pc, #304]	@ (8003cec <HAL_GPIO_Init+0x2b8>)
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	6193      	str	r3, [r2, #24]
 8003bc0:	4b4a      	ldr	r3, [pc, #296]	@ (8003cec <HAL_GPIO_Init+0x2b8>)
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003bcc:	4a48      	ldr	r2, [pc, #288]	@ (8003cf0 <HAL_GPIO_Init+0x2bc>)
 8003bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd0:	089b      	lsrs	r3, r3, #2
 8003bd2:	3302      	adds	r3, #2
 8003bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	220f      	movs	r2, #15
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	43db      	mvns	r3, r3
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4013      	ands	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a40      	ldr	r2, [pc, #256]	@ (8003cf4 <HAL_GPIO_Init+0x2c0>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d013      	beq.n	8003c20 <HAL_GPIO_Init+0x1ec>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a3f      	ldr	r2, [pc, #252]	@ (8003cf8 <HAL_GPIO_Init+0x2c4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d00d      	beq.n	8003c1c <HAL_GPIO_Init+0x1e8>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a3e      	ldr	r2, [pc, #248]	@ (8003cfc <HAL_GPIO_Init+0x2c8>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d007      	beq.n	8003c18 <HAL_GPIO_Init+0x1e4>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a3d      	ldr	r2, [pc, #244]	@ (8003d00 <HAL_GPIO_Init+0x2cc>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d101      	bne.n	8003c14 <HAL_GPIO_Init+0x1e0>
 8003c10:	2303      	movs	r3, #3
 8003c12:	e006      	b.n	8003c22 <HAL_GPIO_Init+0x1ee>
 8003c14:	2304      	movs	r3, #4
 8003c16:	e004      	b.n	8003c22 <HAL_GPIO_Init+0x1ee>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e002      	b.n	8003c22 <HAL_GPIO_Init+0x1ee>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e000      	b.n	8003c22 <HAL_GPIO_Init+0x1ee>
 8003c20:	2300      	movs	r3, #0
 8003c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c24:	f002 0203 	and.w	r2, r2, #3
 8003c28:	0092      	lsls	r2, r2, #2
 8003c2a:	4093      	lsls	r3, r2
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003c32:	492f      	ldr	r1, [pc, #188]	@ (8003cf0 <HAL_GPIO_Init+0x2bc>)
 8003c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c36:	089b      	lsrs	r3, r3, #2
 8003c38:	3302      	adds	r3, #2
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d006      	beq.n	8003c5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003c4c:	4b2d      	ldr	r3, [pc, #180]	@ (8003d04 <HAL_GPIO_Init+0x2d0>)
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	492c      	ldr	r1, [pc, #176]	@ (8003d04 <HAL_GPIO_Init+0x2d0>)
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	608b      	str	r3, [r1, #8]
 8003c58:	e006      	b.n	8003c68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8003d04 <HAL_GPIO_Init+0x2d0>)
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	43db      	mvns	r3, r3
 8003c62:	4928      	ldr	r1, [pc, #160]	@ (8003d04 <HAL_GPIO_Init+0x2d0>)
 8003c64:	4013      	ands	r3, r2
 8003c66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d006      	beq.n	8003c82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c74:	4b23      	ldr	r3, [pc, #140]	@ (8003d04 <HAL_GPIO_Init+0x2d0>)
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	4922      	ldr	r1, [pc, #136]	@ (8003d04 <HAL_GPIO_Init+0x2d0>)
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60cb      	str	r3, [r1, #12]
 8003c80:	e006      	b.n	8003c90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003c82:	4b20      	ldr	r3, [pc, #128]	@ (8003d04 <HAL_GPIO_Init+0x2d0>)
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	491e      	ldr	r1, [pc, #120]	@ (8003d04 <HAL_GPIO_Init+0x2d0>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d006      	beq.n	8003caa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c9c:	4b19      	ldr	r3, [pc, #100]	@ (8003d04 <HAL_GPIO_Init+0x2d0>)
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	4918      	ldr	r1, [pc, #96]	@ (8003d04 <HAL_GPIO_Init+0x2d0>)
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	604b      	str	r3, [r1, #4]
 8003ca8:	e006      	b.n	8003cb8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003caa:	4b16      	ldr	r3, [pc, #88]	@ (8003d04 <HAL_GPIO_Init+0x2d0>)
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	4914      	ldr	r1, [pc, #80]	@ (8003d04 <HAL_GPIO_Init+0x2d0>)
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d021      	beq.n	8003d08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8003d04 <HAL_GPIO_Init+0x2d0>)
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	490e      	ldr	r1, [pc, #56]	@ (8003d04 <HAL_GPIO_Init+0x2d0>)
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	600b      	str	r3, [r1, #0]
 8003cd0:	e021      	b.n	8003d16 <HAL_GPIO_Init+0x2e2>
 8003cd2:	bf00      	nop
 8003cd4:	10320000 	.word	0x10320000
 8003cd8:	10310000 	.word	0x10310000
 8003cdc:	10220000 	.word	0x10220000
 8003ce0:	10210000 	.word	0x10210000
 8003ce4:	10120000 	.word	0x10120000
 8003ce8:	10110000 	.word	0x10110000
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	40010000 	.word	0x40010000
 8003cf4:	40010800 	.word	0x40010800
 8003cf8:	40010c00 	.word	0x40010c00
 8003cfc:	40011000 	.word	0x40011000
 8003d00:	40011400 	.word	0x40011400
 8003d04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003d08:	4b0b      	ldr	r3, [pc, #44]	@ (8003d38 <HAL_GPIO_Init+0x304>)
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	4909      	ldr	r1, [pc, #36]	@ (8003d38 <HAL_GPIO_Init+0x304>)
 8003d12:	4013      	ands	r3, r2
 8003d14:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d18:	3301      	adds	r3, #1
 8003d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d22:	fa22 f303 	lsr.w	r3, r2, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f47f ae8e 	bne.w	8003a48 <HAL_GPIO_Init+0x14>
  }
}
 8003d2c:	bf00      	nop
 8003d2e:	bf00      	nop
 8003d30:	372c      	adds	r7, #44	@ 0x2c
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr
 8003d38:	40010400 	.word	0x40010400

08003d3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	460b      	mov	r3, r1
 8003d46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	887b      	ldrh	r3, [r7, #2]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d54:	2301      	movs	r3, #1
 8003d56:	73fb      	strb	r3, [r7, #15]
 8003d58:	e001      	b.n	8003d5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr

08003d6a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	460b      	mov	r3, r1
 8003d74:	807b      	strh	r3, [r7, #2]
 8003d76:	4613      	mov	r3, r2
 8003d78:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d7a:	787b      	ldrb	r3, [r7, #1]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d80:	887a      	ldrh	r2, [r7, #2]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003d86:	e003      	b.n	8003d90 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d88:	887b      	ldrh	r3, [r7, #2]
 8003d8a:	041a      	lsls	r2, r3, #16
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	611a      	str	r2, [r3, #16]
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bc80      	pop	{r7}
 8003d98:	4770      	bx	lr

08003d9a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b085      	sub	sp, #20
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	460b      	mov	r3, r1
 8003da4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003dac:	887a      	ldrh	r2, [r7, #2]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	4013      	ands	r3, r2
 8003db2:	041a      	lsls	r2, r3, #16
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	43d9      	mvns	r1, r3
 8003db8:	887b      	ldrh	r3, [r7, #2]
 8003dba:	400b      	ands	r3, r1
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	611a      	str	r2, [r3, #16]
}
 8003dc2:	bf00      	nop
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr

08003dcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e12b      	b.n	8004036 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d106      	bne.n	8003df8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7fe f840 	bl	8001e78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2224      	movs	r2, #36	@ 0x24
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0201 	bic.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e30:	f003 f9b0 	bl	8007194 <HAL_RCC_GetPCLK1Freq>
 8003e34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	4a81      	ldr	r2, [pc, #516]	@ (8004040 <HAL_I2C_Init+0x274>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d807      	bhi.n	8003e50 <HAL_I2C_Init+0x84>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4a80      	ldr	r2, [pc, #512]	@ (8004044 <HAL_I2C_Init+0x278>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	bf94      	ite	ls
 8003e48:	2301      	movls	r3, #1
 8003e4a:	2300      	movhi	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	e006      	b.n	8003e5e <HAL_I2C_Init+0x92>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4a7d      	ldr	r2, [pc, #500]	@ (8004048 <HAL_I2C_Init+0x27c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	bf94      	ite	ls
 8003e58:	2301      	movls	r3, #1
 8003e5a:	2300      	movhi	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e0e7      	b.n	8004036 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4a78      	ldr	r2, [pc, #480]	@ (800404c <HAL_I2C_Init+0x280>)
 8003e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6e:	0c9b      	lsrs	r3, r3, #18
 8003e70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	4a6a      	ldr	r2, [pc, #424]	@ (8004040 <HAL_I2C_Init+0x274>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d802      	bhi.n	8003ea0 <HAL_I2C_Init+0xd4>
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	e009      	b.n	8003eb4 <HAL_I2C_Init+0xe8>
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003ea6:	fb02 f303 	mul.w	r3, r2, r3
 8003eaa:	4a69      	ldr	r2, [pc, #420]	@ (8004050 <HAL_I2C_Init+0x284>)
 8003eac:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb0:	099b      	lsrs	r3, r3, #6
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6812      	ldr	r2, [r2, #0]
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003ec6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	495c      	ldr	r1, [pc, #368]	@ (8004040 <HAL_I2C_Init+0x274>)
 8003ed0:	428b      	cmp	r3, r1
 8003ed2:	d819      	bhi.n	8003f08 <HAL_I2C_Init+0x13c>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	1e59      	subs	r1, r3, #1
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ee2:	1c59      	adds	r1, r3, #1
 8003ee4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003ee8:	400b      	ands	r3, r1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <HAL_I2C_Init+0x138>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	1e59      	subs	r1, r3, #1
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003efc:	3301      	adds	r3, #1
 8003efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f02:	e051      	b.n	8003fa8 <HAL_I2C_Init+0x1dc>
 8003f04:	2304      	movs	r3, #4
 8003f06:	e04f      	b.n	8003fa8 <HAL_I2C_Init+0x1dc>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d111      	bne.n	8003f34 <HAL_I2C_Init+0x168>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	1e58      	subs	r0, r3, #1
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6859      	ldr	r1, [r3, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	440b      	add	r3, r1
 8003f1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f22:	3301      	adds	r3, #1
 8003f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	bf0c      	ite	eq
 8003f2c:	2301      	moveq	r3, #1
 8003f2e:	2300      	movne	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	e012      	b.n	8003f5a <HAL_I2C_Init+0x18e>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	1e58      	subs	r0, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6859      	ldr	r1, [r3, #4]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	0099      	lsls	r1, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	bf0c      	ite	eq
 8003f54:	2301      	moveq	r3, #1
 8003f56:	2300      	movne	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_I2C_Init+0x196>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e022      	b.n	8003fa8 <HAL_I2C_Init+0x1dc>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10e      	bne.n	8003f88 <HAL_I2C_Init+0x1bc>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	1e58      	subs	r0, r3, #1
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6859      	ldr	r1, [r3, #4]
 8003f72:	460b      	mov	r3, r1
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	440b      	add	r3, r1
 8003f78:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f86:	e00f      	b.n	8003fa8 <HAL_I2C_Init+0x1dc>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	1e58      	subs	r0, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6859      	ldr	r1, [r3, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	0099      	lsls	r1, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003fa8:	6879      	ldr	r1, [r7, #4]
 8003faa:	6809      	ldr	r1, [r1, #0]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	69da      	ldr	r2, [r3, #28]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003fd6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6911      	ldr	r1, [r2, #16]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	68d2      	ldr	r2, [r2, #12]
 8003fe2:	4311      	orrs	r1, r2
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6812      	ldr	r2, [r2, #0]
 8003fe8:	430b      	orrs	r3, r1
 8003fea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	695a      	ldr	r2, [r3, #20]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2220      	movs	r2, #32
 8004022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	000186a0 	.word	0x000186a0
 8004044:	001e847f 	.word	0x001e847f
 8004048:	003d08ff 	.word	0x003d08ff
 800404c:	431bde83 	.word	0x431bde83
 8004050:	10624dd3 	.word	0x10624dd3

08004054 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b088      	sub	sp, #32
 8004058:	af02      	add	r7, sp, #8
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	4608      	mov	r0, r1
 800405e:	4611      	mov	r1, r2
 8004060:	461a      	mov	r2, r3
 8004062:	4603      	mov	r3, r0
 8004064:	817b      	strh	r3, [r7, #10]
 8004066:	460b      	mov	r3, r1
 8004068:	813b      	strh	r3, [r7, #8]
 800406a:	4613      	mov	r3, r2
 800406c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800406e:	f7fe fd37 	bl	8002ae0 <HAL_GetTick>
 8004072:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b20      	cmp	r3, #32
 800407e:	f040 80d9 	bne.w	8004234 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	2319      	movs	r3, #25
 8004088:	2201      	movs	r2, #1
 800408a:	496d      	ldr	r1, [pc, #436]	@ (8004240 <HAL_I2C_Mem_Write+0x1ec>)
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 fcc1 	bl	8004a14 <I2C_WaitOnFlagUntilTimeout>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004098:	2302      	movs	r3, #2
 800409a:	e0cc      	b.n	8004236 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d101      	bne.n	80040aa <HAL_I2C_Mem_Write+0x56>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e0c5      	b.n	8004236 <HAL_I2C_Mem_Write+0x1e2>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d007      	beq.n	80040d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2221      	movs	r2, #33	@ 0x21
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2240      	movs	r2, #64	@ 0x40
 80040ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a3a      	ldr	r2, [r7, #32]
 80040fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004100:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4a4d      	ldr	r2, [pc, #308]	@ (8004244 <HAL_I2C_Mem_Write+0x1f0>)
 8004110:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004112:	88f8      	ldrh	r0, [r7, #6]
 8004114:	893a      	ldrh	r2, [r7, #8]
 8004116:	8979      	ldrh	r1, [r7, #10]
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	9301      	str	r3, [sp, #4]
 800411c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	4603      	mov	r3, r0
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 faf8 	bl	8004718 <I2C_RequestMemoryWrite>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d052      	beq.n	80041d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e081      	b.n	8004236 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 fd86 	bl	8004c48 <I2C_WaitOnTXEFlagUntilTimeout>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00d      	beq.n	800415e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004146:	2b04      	cmp	r3, #4
 8004148:	d107      	bne.n	800415a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004158:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e06b      	b.n	8004236 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004162:	781a      	ldrb	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004184:	b29b      	uxth	r3, r3
 8004186:	3b01      	subs	r3, #1
 8004188:	b29a      	uxth	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b04      	cmp	r3, #4
 800419a:	d11b      	bne.n	80041d4 <HAL_I2C_Mem_Write+0x180>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d017      	beq.n	80041d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a8:	781a      	ldrb	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1aa      	bne.n	8004132 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 fd79 	bl	8004cd8 <I2C_WaitOnBTFFlagUntilTimeout>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00d      	beq.n	8004208 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	d107      	bne.n	8004204 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004202:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e016      	b.n	8004236 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004216:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2220      	movs	r2, #32
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	e000      	b.n	8004236 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004234:	2302      	movs	r3, #2
  }
}
 8004236:	4618      	mov	r0, r3
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	00100002 	.word	0x00100002
 8004244:	ffff0000 	.word	0xffff0000

08004248 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08c      	sub	sp, #48	@ 0x30
 800424c:	af02      	add	r7, sp, #8
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	4608      	mov	r0, r1
 8004252:	4611      	mov	r1, r2
 8004254:	461a      	mov	r2, r3
 8004256:	4603      	mov	r3, r0
 8004258:	817b      	strh	r3, [r7, #10]
 800425a:	460b      	mov	r3, r1
 800425c:	813b      	strh	r3, [r7, #8]
 800425e:	4613      	mov	r3, r2
 8004260:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004262:	2300      	movs	r3, #0
 8004264:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004266:	f7fe fc3b 	bl	8002ae0 <HAL_GetTick>
 800426a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b20      	cmp	r3, #32
 8004276:	f040 8244 	bne.w	8004702 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800427a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	2319      	movs	r3, #25
 8004280:	2201      	movs	r2, #1
 8004282:	4982      	ldr	r1, [pc, #520]	@ (800448c <HAL_I2C_Mem_Read+0x244>)
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 fbc5 	bl	8004a14 <I2C_WaitOnFlagUntilTimeout>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004290:	2302      	movs	r3, #2
 8004292:	e237      	b.n	8004704 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <HAL_I2C_Mem_Read+0x5a>
 800429e:	2302      	movs	r3, #2
 80042a0:	e230      	b.n	8004704 <HAL_I2C_Mem_Read+0x4bc>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d007      	beq.n	80042c8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2222      	movs	r2, #34	@ 0x22
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2240      	movs	r2, #64	@ 0x40
 80042e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80042f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4a62      	ldr	r2, [pc, #392]	@ (8004490 <HAL_I2C_Mem_Read+0x248>)
 8004308:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800430a:	88f8      	ldrh	r0, [r7, #6]
 800430c:	893a      	ldrh	r2, [r7, #8]
 800430e:	8979      	ldrh	r1, [r7, #10]
 8004310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004312:	9301      	str	r3, [sp, #4]
 8004314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	4603      	mov	r3, r0
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 fa92 	bl	8004844 <I2C_RequestMemoryRead>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e1ec      	b.n	8004704 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800432e:	2b00      	cmp	r3, #0
 8004330:	d113      	bne.n	800435a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004332:	2300      	movs	r3, #0
 8004334:	61fb      	str	r3, [r7, #28]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	61fb      	str	r3, [r7, #28]
 8004346:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	e1c0      	b.n	80046dc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800435e:	2b01      	cmp	r3, #1
 8004360:	d11e      	bne.n	80043a0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004370:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004372:	b672      	cpsid	i
}
 8004374:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004376:	2300      	movs	r3, #0
 8004378:	61bb      	str	r3, [r7, #24]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	61bb      	str	r3, [r7, #24]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	61bb      	str	r3, [r7, #24]
 800438a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800439a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800439c:	b662      	cpsie	i
}
 800439e:	e035      	b.n	800440c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d11e      	bne.n	80043e6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80043b8:	b672      	cpsid	i
}
 80043ba:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043bc:	2300      	movs	r3, #0
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80043e2:	b662      	cpsie	i
}
 80043e4:	e012      	b.n	800440c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043f4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043f6:	2300      	movs	r3, #0
 80043f8:	613b      	str	r3, [r7, #16]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	613b      	str	r3, [r7, #16]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	613b      	str	r3, [r7, #16]
 800440a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800440c:	e166      	b.n	80046dc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004412:	2b03      	cmp	r3, #3
 8004414:	f200 811f 	bhi.w	8004656 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800441c:	2b01      	cmp	r3, #1
 800441e:	d123      	bne.n	8004468 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004420:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004422:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 fc9f 	bl	8004d68 <I2C_WaitOnRXNEFlagUntilTimeout>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e167      	b.n	8004704 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691a      	ldr	r2, [r3, #16]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004450:	3b01      	subs	r3, #1
 8004452:	b29a      	uxth	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004466:	e139      	b.n	80046dc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800446c:	2b02      	cmp	r3, #2
 800446e:	d152      	bne.n	8004516 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004476:	2200      	movs	r2, #0
 8004478:	4906      	ldr	r1, [pc, #24]	@ (8004494 <HAL_I2C_Mem_Read+0x24c>)
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 faca 	bl	8004a14 <I2C_WaitOnFlagUntilTimeout>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d008      	beq.n	8004498 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e13c      	b.n	8004704 <HAL_I2C_Mem_Read+0x4bc>
 800448a:	bf00      	nop
 800448c:	00100002 	.word	0x00100002
 8004490:	ffff0000 	.word	0xffff0000
 8004494:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004498:	b672      	cpsid	i
}
 800449a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691a      	ldr	r2, [r3, #16]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b6:	b2d2      	uxtb	r2, r2
 80044b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044be:	1c5a      	adds	r2, r3, #1
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c8:	3b01      	subs	r3, #1
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80044de:	b662      	cpsie	i
}
 80044e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044fe:	3b01      	subs	r3, #1
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004514:	e0e2      	b.n	80046dc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800451c:	2200      	movs	r2, #0
 800451e:	497b      	ldr	r1, [pc, #492]	@ (800470c <HAL_I2C_Mem_Read+0x4c4>)
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 fa77 	bl	8004a14 <I2C_WaitOnFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e0e9      	b.n	8004704 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800453e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004540:	b672      	cpsid	i
}
 8004542:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691a      	ldr	r2, [r3, #16]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004556:	1c5a      	adds	r2, r3, #1
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004560:	3b01      	subs	r3, #1
 8004562:	b29a      	uxth	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800456c:	b29b      	uxth	r3, r3
 800456e:	3b01      	subs	r3, #1
 8004570:	b29a      	uxth	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004576:	4b66      	ldr	r3, [pc, #408]	@ (8004710 <HAL_I2C_Mem_Read+0x4c8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	08db      	lsrs	r3, r3, #3
 800457c:	4a65      	ldr	r2, [pc, #404]	@ (8004714 <HAL_I2C_Mem_Read+0x4cc>)
 800457e:	fba2 2303 	umull	r2, r3, r2, r3
 8004582:	0a1a      	lsrs	r2, r3, #8
 8004584:	4613      	mov	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	00da      	lsls	r2, r3, #3
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	3b01      	subs	r3, #1
 8004594:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d118      	bne.n	80045ce <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b6:	f043 0220 	orr.w	r2, r3, #32
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80045be:	b662      	cpsie	i
}
 80045c0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e09a      	b.n	8004704 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b04      	cmp	r3, #4
 80045da:	d1d9      	bne.n	8004590 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	691a      	ldr	r2, [r3, #16]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fe:	1c5a      	adds	r2, r3, #1
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004614:	b29b      	uxth	r3, r3
 8004616:	3b01      	subs	r3, #1
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800461e:	b662      	cpsie	i
}
 8004620:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	691a      	ldr	r2, [r3, #16]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800464a:	b29b      	uxth	r3, r3
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004654:	e042      	b.n	80046dc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004658:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 fb84 	bl	8004d68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e04c      	b.n	8004704 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	b2d2      	uxtb	r2, r2
 8004676:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004686:	3b01      	subs	r3, #1
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004692:	b29b      	uxth	r3, r3
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	f003 0304 	and.w	r3, r3, #4
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	d118      	bne.n	80046dc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f47f ae94 	bne.w	800440e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	e000      	b.n	8004704 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004702:	2302      	movs	r3, #2
  }
}
 8004704:	4618      	mov	r0, r3
 8004706:	3728      	adds	r7, #40	@ 0x28
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	00010004 	.word	0x00010004
 8004710:	20000020 	.word	0x20000020
 8004714:	14f8b589 	.word	0x14f8b589

08004718 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b088      	sub	sp, #32
 800471c:	af02      	add	r7, sp, #8
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	4608      	mov	r0, r1
 8004722:	4611      	mov	r1, r2
 8004724:	461a      	mov	r2, r3
 8004726:	4603      	mov	r3, r0
 8004728:	817b      	strh	r3, [r7, #10]
 800472a:	460b      	mov	r3, r1
 800472c:	813b      	strh	r3, [r7, #8]
 800472e:	4613      	mov	r3, r2
 8004730:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004740:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	2200      	movs	r2, #0
 800474a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 f960 	bl	8004a14 <I2C_WaitOnFlagUntilTimeout>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00d      	beq.n	8004776 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004764:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004768:	d103      	bne.n	8004772 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004770:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e05f      	b.n	8004836 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004776:	897b      	ldrh	r3, [r7, #10]
 8004778:	b2db      	uxtb	r3, r3
 800477a:	461a      	mov	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004784:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004788:	6a3a      	ldr	r2, [r7, #32]
 800478a:	492d      	ldr	r1, [pc, #180]	@ (8004840 <I2C_RequestMemoryWrite+0x128>)
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 f9bb 	bl	8004b08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e04c      	b.n	8004836 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800479c:	2300      	movs	r3, #0
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	617b      	str	r3, [r7, #20]
 80047b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047b4:	6a39      	ldr	r1, [r7, #32]
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 fa46 	bl	8004c48 <I2C_WaitOnTXEFlagUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00d      	beq.n	80047de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d107      	bne.n	80047da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e02b      	b.n	8004836 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047de:	88fb      	ldrh	r3, [r7, #6]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d105      	bne.n	80047f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047e4:	893b      	ldrh	r3, [r7, #8]
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	611a      	str	r2, [r3, #16]
 80047ee:	e021      	b.n	8004834 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047f0:	893b      	ldrh	r3, [r7, #8]
 80047f2:	0a1b      	lsrs	r3, r3, #8
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	b2da      	uxtb	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004800:	6a39      	ldr	r1, [r7, #32]
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 fa20 	bl	8004c48 <I2C_WaitOnTXEFlagUntilTimeout>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00d      	beq.n	800482a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004812:	2b04      	cmp	r3, #4
 8004814:	d107      	bne.n	8004826 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004824:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e005      	b.n	8004836 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800482a:	893b      	ldrh	r3, [r7, #8]
 800482c:	b2da      	uxtb	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	00010002 	.word	0x00010002

08004844 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b088      	sub	sp, #32
 8004848:	af02      	add	r7, sp, #8
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	4608      	mov	r0, r1
 800484e:	4611      	mov	r1, r2
 8004850:	461a      	mov	r2, r3
 8004852:	4603      	mov	r3, r0
 8004854:	817b      	strh	r3, [r7, #10]
 8004856:	460b      	mov	r3, r1
 8004858:	813b      	strh	r3, [r7, #8]
 800485a:	4613      	mov	r3, r2
 800485c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800486c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800487c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800487e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	2200      	movs	r2, #0
 8004886:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 f8c2 	bl	8004a14 <I2C_WaitOnFlagUntilTimeout>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00d      	beq.n	80048b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048a4:	d103      	bne.n	80048ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e0aa      	b.n	8004a08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048b2:	897b      	ldrh	r3, [r7, #10]
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	461a      	mov	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c4:	6a3a      	ldr	r2, [r7, #32]
 80048c6:	4952      	ldr	r1, [pc, #328]	@ (8004a10 <I2C_RequestMemoryRead+0x1cc>)
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 f91d 	bl	8004b08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e097      	b.n	8004a08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048d8:	2300      	movs	r3, #0
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	617b      	str	r3, [r7, #20]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048f0:	6a39      	ldr	r1, [r7, #32]
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 f9a8 	bl	8004c48 <I2C_WaitOnTXEFlagUntilTimeout>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00d      	beq.n	800491a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004902:	2b04      	cmp	r3, #4
 8004904:	d107      	bne.n	8004916 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004914:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e076      	b.n	8004a08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800491a:	88fb      	ldrh	r3, [r7, #6]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d105      	bne.n	800492c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004920:	893b      	ldrh	r3, [r7, #8]
 8004922:	b2da      	uxtb	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	611a      	str	r2, [r3, #16]
 800492a:	e021      	b.n	8004970 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800492c:	893b      	ldrh	r3, [r7, #8]
 800492e:	0a1b      	lsrs	r3, r3, #8
 8004930:	b29b      	uxth	r3, r3
 8004932:	b2da      	uxtb	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800493a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800493c:	6a39      	ldr	r1, [r7, #32]
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 f982 	bl	8004c48 <I2C_WaitOnTXEFlagUntilTimeout>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00d      	beq.n	8004966 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494e:	2b04      	cmp	r3, #4
 8004950:	d107      	bne.n	8004962 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004960:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e050      	b.n	8004a08 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004966:	893b      	ldrh	r3, [r7, #8]
 8004968:	b2da      	uxtb	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004972:	6a39      	ldr	r1, [r7, #32]
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f000 f967 	bl	8004c48 <I2C_WaitOnTXEFlagUntilTimeout>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00d      	beq.n	800499c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004984:	2b04      	cmp	r3, #4
 8004986:	d107      	bne.n	8004998 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004996:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e035      	b.n	8004a08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 f82b 	bl	8004a14 <I2C_WaitOnFlagUntilTimeout>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00d      	beq.n	80049e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049d2:	d103      	bne.n	80049dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e013      	b.n	8004a08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80049e0:	897b      	ldrh	r3, [r7, #10]
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	f043 0301 	orr.w	r3, r3, #1
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f2:	6a3a      	ldr	r2, [r7, #32]
 80049f4:	4906      	ldr	r1, [pc, #24]	@ (8004a10 <I2C_RequestMemoryRead+0x1cc>)
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 f886 	bl	8004b08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e000      	b.n	8004a08 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3718      	adds	r7, #24
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	00010002 	.word	0x00010002

08004a14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	603b      	str	r3, [r7, #0]
 8004a20:	4613      	mov	r3, r2
 8004a22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a24:	e048      	b.n	8004ab8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2c:	d044      	beq.n	8004ab8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a2e:	f7fe f857 	bl	8002ae0 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d302      	bcc.n	8004a44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d139      	bne.n	8004ab8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	0c1b      	lsrs	r3, r3, #16
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d10d      	bne.n	8004a6a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	43da      	mvns	r2, r3
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	bf0c      	ite	eq
 8004a60:	2301      	moveq	r3, #1
 8004a62:	2300      	movne	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	461a      	mov	r2, r3
 8004a68:	e00c      	b.n	8004a84 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	43da      	mvns	r2, r3
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	4013      	ands	r3, r2
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	bf0c      	ite	eq
 8004a7c:	2301      	moveq	r3, #1
 8004a7e:	2300      	movne	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	461a      	mov	r2, r3
 8004a84:	79fb      	ldrb	r3, [r7, #7]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d116      	bne.n	8004ab8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa4:	f043 0220 	orr.w	r2, r3, #32
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e023      	b.n	8004b00 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	0c1b      	lsrs	r3, r3, #16
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d10d      	bne.n	8004ade <I2C_WaitOnFlagUntilTimeout+0xca>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	43da      	mvns	r2, r3
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	4013      	ands	r3, r2
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	bf0c      	ite	eq
 8004ad4:	2301      	moveq	r3, #1
 8004ad6:	2300      	movne	r3, #0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	461a      	mov	r2, r3
 8004adc:	e00c      	b.n	8004af8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	43da      	mvns	r2, r3
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	bf0c      	ite	eq
 8004af0:	2301      	moveq	r3, #1
 8004af2:	2300      	movne	r3, #0
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	461a      	mov	r2, r3
 8004af8:	79fb      	ldrb	r3, [r7, #7]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d093      	beq.n	8004a26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
 8004b14:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b16:	e071      	b.n	8004bfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b26:	d123      	bne.n	8004b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b36:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5c:	f043 0204 	orr.w	r2, r3, #4
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e067      	b.n	8004c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b76:	d041      	beq.n	8004bfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b78:	f7fd ffb2 	bl	8002ae0 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d302      	bcc.n	8004b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d136      	bne.n	8004bfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	0c1b      	lsrs	r3, r3, #16
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d10c      	bne.n	8004bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	43da      	mvns	r2, r3
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	bf14      	ite	ne
 8004baa:	2301      	movne	r3, #1
 8004bac:	2300      	moveq	r3, #0
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	e00b      	b.n	8004bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	43da      	mvns	r2, r3
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	bf14      	ite	ne
 8004bc4:	2301      	movne	r3, #1
 8004bc6:	2300      	moveq	r3, #0
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d016      	beq.n	8004bfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be8:	f043 0220 	orr.w	r2, r3, #32
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e021      	b.n	8004c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	0c1b      	lsrs	r3, r3, #16
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d10c      	bne.n	8004c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	43da      	mvns	r2, r3
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	4013      	ands	r3, r2
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	bf14      	ite	ne
 8004c18:	2301      	movne	r3, #1
 8004c1a:	2300      	moveq	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	e00b      	b.n	8004c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	43da      	mvns	r2, r3
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	bf14      	ite	ne
 8004c32:	2301      	movne	r3, #1
 8004c34:	2300      	moveq	r3, #0
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f47f af6d 	bne.w	8004b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c54:	e034      	b.n	8004cc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 f8e3 	bl	8004e22 <I2C_IsAcknowledgeFailed>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e034      	b.n	8004cd0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6c:	d028      	beq.n	8004cc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c6e:	f7fd ff37 	bl	8002ae0 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d302      	bcc.n	8004c84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d11d      	bne.n	8004cc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c8e:	2b80      	cmp	r3, #128	@ 0x80
 8004c90:	d016      	beq.n	8004cc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cac:	f043 0220 	orr.w	r2, r3, #32
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e007      	b.n	8004cd0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cca:	2b80      	cmp	r3, #128	@ 0x80
 8004ccc:	d1c3      	bne.n	8004c56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ce4:	e034      	b.n	8004d50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 f89b 	bl	8004e22 <I2C_IsAcknowledgeFailed>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e034      	b.n	8004d60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfc:	d028      	beq.n	8004d50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cfe:	f7fd feef 	bl	8002ae0 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d302      	bcc.n	8004d14 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d11d      	bne.n	8004d50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	f003 0304 	and.w	r3, r3, #4
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d016      	beq.n	8004d50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3c:	f043 0220 	orr.w	r2, r3, #32
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e007      	b.n	8004d60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	f003 0304 	and.w	r3, r3, #4
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d1c3      	bne.n	8004ce6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d74:	e049      	b.n	8004e0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	f003 0310 	and.w	r3, r3, #16
 8004d80:	2b10      	cmp	r3, #16
 8004d82:	d119      	bne.n	8004db8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f06f 0210 	mvn.w	r2, #16
 8004d8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e030      	b.n	8004e1a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db8:	f7fd fe92 	bl	8002ae0 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d302      	bcc.n	8004dce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d11d      	bne.n	8004e0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd8:	2b40      	cmp	r3, #64	@ 0x40
 8004dda:	d016      	beq.n	8004e0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2220      	movs	r2, #32
 8004de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df6:	f043 0220 	orr.w	r2, r3, #32
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e007      	b.n	8004e1a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e14:	2b40      	cmp	r3, #64	@ 0x40
 8004e16:	d1ae      	bne.n	8004d76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e38:	d11b      	bne.n	8004e72 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e42:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5e:	f043 0204 	orr.w	r2, r3, #4
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e000      	b.n	8004e74 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bc80      	pop	{r7}
 8004e7c:	4770      	bx	lr

08004e7e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b084      	sub	sp, #16
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e034      	b.n	8004efa <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8004e98:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f245 5255 	movw	r2, #21845	@ 0x5555
 8004ea2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6852      	ldr	r2, [r2, #4]
 8004eac:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6892      	ldr	r2, [r2, #8]
 8004eb6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004eb8:	f7fd fe12 	bl	8002ae0 <HAL_GetTick>
 8004ebc:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004ebe:	e00f      	b.n	8004ee0 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004ec0:	f7fd fe0e 	bl	8002ae0 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b27      	cmp	r3, #39	@ 0x27
 8004ecc:	d908      	bls.n	8004ee0 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f003 0303 	and.w	r3, r3, #3
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e00c      	b.n	8004efa <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	f003 0303 	and.w	r3, r3, #3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1e8      	bne.n	8004ec0 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004ef6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004f12:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bc80      	pop	{r7}
 8004f1e:	4770      	bx	lr

08004f20 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f22:	b08b      	sub	sp, #44	@ 0x2c
 8004f24:	af06      	add	r7, sp, #24
 8004f26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e0f1      	b.n	8005116 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d106      	bne.n	8004f4c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f008 f84a 	bl	800cfe0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2203      	movs	r2, #3
 8004f50:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f003 ff6f 	bl	8008e3c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	603b      	str	r3, [r7, #0]
 8004f64:	687e      	ldr	r6, [r7, #4]
 8004f66:	466d      	mov	r5, sp
 8004f68:	f106 0410 	add.w	r4, r6, #16
 8004f6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f70:	6823      	ldr	r3, [r4, #0]
 8004f72:	602b      	str	r3, [r5, #0]
 8004f74:	1d33      	adds	r3, r6, #4
 8004f76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f78:	6838      	ldr	r0, [r7, #0]
 8004f7a:	f003 ff39 	bl	8008df0 <USB_CoreInit>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d005      	beq.n	8004f90 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e0c2      	b.n	8005116 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2100      	movs	r1, #0
 8004f96:	4618      	mov	r0, r3
 8004f98:	f003 ff6a 	bl	8008e70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	73fb      	strb	r3, [r7, #15]
 8004fa0:	e040      	b.n	8005024 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004fa2:	7bfb      	ldrb	r3, [r7, #15]
 8004fa4:	6879      	ldr	r1, [r7, #4]
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	4613      	mov	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	440b      	add	r3, r1
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	6879      	ldr	r1, [r7, #4]
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	440b      	add	r3, r1
 8004fc8:	7bfa      	ldrb	r2, [r7, #15]
 8004fca:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
 8004fce:	6879      	ldr	r1, [r7, #4]
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	440b      	add	r3, r1
 8004fdc:	3303      	adds	r3, #3
 8004fde:	2200      	movs	r2, #0
 8004fe0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004fe2:	7bfa      	ldrb	r2, [r7, #15]
 8004fe4:	6879      	ldr	r1, [r7, #4]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	440b      	add	r3, r1
 8004ff0:	3338      	adds	r3, #56	@ 0x38
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ff6:	7bfa      	ldrb	r2, [r7, #15]
 8004ff8:	6879      	ldr	r1, [r7, #4]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	00db      	lsls	r3, r3, #3
 8005002:	440b      	add	r3, r1
 8005004:	333c      	adds	r3, #60	@ 0x3c
 8005006:	2200      	movs	r2, #0
 8005008:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800500a:	7bfa      	ldrb	r2, [r7, #15]
 800500c:	6879      	ldr	r1, [r7, #4]
 800500e:	4613      	mov	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	00db      	lsls	r3, r3, #3
 8005016:	440b      	add	r3, r1
 8005018:	3340      	adds	r3, #64	@ 0x40
 800501a:	2200      	movs	r2, #0
 800501c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800501e:	7bfb      	ldrb	r3, [r7, #15]
 8005020:	3301      	adds	r3, #1
 8005022:	73fb      	strb	r3, [r7, #15]
 8005024:	7bfa      	ldrb	r2, [r7, #15]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	429a      	cmp	r2, r3
 800502c:	d3b9      	bcc.n	8004fa2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800502e:	2300      	movs	r3, #0
 8005030:	73fb      	strb	r3, [r7, #15]
 8005032:	e044      	b.n	80050be <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005034:	7bfa      	ldrb	r2, [r7, #15]
 8005036:	6879      	ldr	r1, [r7, #4]
 8005038:	4613      	mov	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	440b      	add	r3, r1
 8005042:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8005046:	2200      	movs	r2, #0
 8005048:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800504a:	7bfa      	ldrb	r2, [r7, #15]
 800504c:	6879      	ldr	r1, [r7, #4]
 800504e:	4613      	mov	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	00db      	lsls	r3, r3, #3
 8005056:	440b      	add	r3, r1
 8005058:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800505c:	7bfa      	ldrb	r2, [r7, #15]
 800505e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005060:	7bfa      	ldrb	r2, [r7, #15]
 8005062:	6879      	ldr	r1, [r7, #4]
 8005064:	4613      	mov	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	440b      	add	r3, r1
 800506e:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8005072:	2200      	movs	r2, #0
 8005074:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005076:	7bfa      	ldrb	r2, [r7, #15]
 8005078:	6879      	ldr	r1, [r7, #4]
 800507a:	4613      	mov	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	00db      	lsls	r3, r3, #3
 8005082:	440b      	add	r3, r1
 8005084:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8005088:	2200      	movs	r2, #0
 800508a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800508c:	7bfa      	ldrb	r2, [r7, #15]
 800508e:	6879      	ldr	r1, [r7, #4]
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	440b      	add	r3, r1
 800509a:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800509e:	2200      	movs	r2, #0
 80050a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80050a2:	7bfa      	ldrb	r2, [r7, #15]
 80050a4:	6879      	ldr	r1, [r7, #4]
 80050a6:	4613      	mov	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4413      	add	r3, r2
 80050ac:	00db      	lsls	r3, r3, #3
 80050ae:	440b      	add	r3, r1
 80050b0:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80050b4:	2200      	movs	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
 80050ba:	3301      	adds	r3, #1
 80050bc:	73fb      	strb	r3, [r7, #15]
 80050be:	7bfa      	ldrb	r2, [r7, #15]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d3b5      	bcc.n	8005034 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	603b      	str	r3, [r7, #0]
 80050ce:	687e      	ldr	r6, [r7, #4]
 80050d0:	466d      	mov	r5, sp
 80050d2:	f106 0410 	add.w	r4, r6, #16
 80050d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	602b      	str	r3, [r5, #0]
 80050de:	1d33      	adds	r3, r6, #4
 80050e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050e2:	6838      	ldr	r0, [r7, #0]
 80050e4:	f003 fed0 	bl	8008e88 <USB_DevInit>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d005      	beq.n	80050fa <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2202      	movs	r2, #2
 80050f2:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e00d      	b.n	8005116 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f006 f951 	bl	800b3b6 <USB_DevDisconnect>

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800511e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b082      	sub	sp, #8
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800512c:	2b01      	cmp	r3, #1
 800512e:	d101      	bne.n	8005134 <HAL_PCD_Start+0x16>
 8005130:	2302      	movs	r3, #2
 8005132:	e016      	b.n	8005162 <HAL_PCD_Start+0x44>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4618      	mov	r0, r3
 8005142:	f003 fe65 	bl	8008e10 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005146:	2101      	movs	r1, #1
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f008 f9bc 	bl	800d4c6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f006 f925 	bl	800b3a2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b088      	sub	sp, #32
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4618      	mov	r0, r3
 8005178:	f006 f927 	bl	800b3ca <USB_ReadInterrupts>
 800517c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 fb1b 	bl	80057c4 <PCD_EP_ISR_Handler>

    return;
 800518e:	e119      	b.n	80053c4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005196:	2b00      	cmp	r3, #0
 8005198:	d013      	beq.n	80051c2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051ac:	b292      	uxth	r2, r2
 80051ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f007 ff8f 	bl	800d0d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80051b8:	2100      	movs	r1, #0
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f905 	bl	80053ca <HAL_PCD_SetAddress>

    return;
 80051c0:	e100      	b.n	80053c4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00c      	beq.n	80051e6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80051de:	b292      	uxth	r2, r2
 80051e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80051e4:	e0ee      	b.n	80053c4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00c      	beq.n	800520a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005202:	b292      	uxth	r2, r2
 8005204:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005208:	e0dc      	b.n	80053c4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d027      	beq.n	8005264 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800521c:	b29a      	uxth	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 0204 	bic.w	r2, r2, #4
 8005226:	b292      	uxth	r2, r2
 8005228:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005234:	b29a      	uxth	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 0208 	bic.w	r2, r2, #8
 800523e:	b292      	uxth	r2, r2
 8005240:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f007 ff7f 	bl	800d148 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005252:	b29a      	uxth	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800525c:	b292      	uxth	r2, r2
 800525e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005262:	e0af      	b.n	80053c4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800526a:	2b00      	cmp	r3, #0
 800526c:	f000 8083 	beq.w	8005376 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8005270:	2300      	movs	r3, #0
 8005272:	77fb      	strb	r3, [r7, #31]
 8005274:	e010      	b.n	8005298 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	461a      	mov	r2, r3
 800527c:	7ffb      	ldrb	r3, [r7, #31]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	441a      	add	r2, r3
 8005282:	7ffb      	ldrb	r3, [r7, #31]
 8005284:	8812      	ldrh	r2, [r2, #0]
 8005286:	b292      	uxth	r2, r2
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	3320      	adds	r3, #32
 800528c:	443b      	add	r3, r7
 800528e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8005292:	7ffb      	ldrb	r3, [r7, #31]
 8005294:	3301      	adds	r3, #1
 8005296:	77fb      	strb	r3, [r7, #31]
 8005298:	7ffb      	ldrb	r3, [r7, #31]
 800529a:	2b07      	cmp	r3, #7
 800529c:	d9eb      	bls.n	8005276 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f042 0201 	orr.w	r2, r2, #1
 80052b0:	b292      	uxth	r2, r2
 80052b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80052be:	b29a      	uxth	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 0201 	bic.w	r2, r2, #1
 80052c8:	b292      	uxth	r2, r2
 80052ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80052ce:	bf00      	nop
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80052d8:	b29b      	uxth	r3, r3
 80052da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0f6      	beq.n	80052d0 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052f4:	b292      	uxth	r2, r2
 80052f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80052fa:	2300      	movs	r3, #0
 80052fc:	77fb      	strb	r3, [r7, #31]
 80052fe:	e00f      	b.n	8005320 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005300:	7ffb      	ldrb	r3, [r7, #31]
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	6812      	ldr	r2, [r2, #0]
 8005306:	4611      	mov	r1, r2
 8005308:	7ffa      	ldrb	r2, [r7, #31]
 800530a:	0092      	lsls	r2, r2, #2
 800530c:	440a      	add	r2, r1
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	3320      	adds	r3, #32
 8005312:	443b      	add	r3, r7
 8005314:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005318:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800531a:	7ffb      	ldrb	r3, [r7, #31]
 800531c:	3301      	adds	r3, #1
 800531e:	77fb      	strb	r3, [r7, #31]
 8005320:	7ffb      	ldrb	r3, [r7, #31]
 8005322:	2b07      	cmp	r3, #7
 8005324:	d9ec      	bls.n	8005300 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800532e:	b29a      	uxth	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f042 0208 	orr.w	r2, r2, #8
 8005338:	b292      	uxth	r2, r2
 800533a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005346:	b29a      	uxth	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005350:	b292      	uxth	r2, r2
 8005352:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800535e:	b29a      	uxth	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f042 0204 	orr.w	r2, r2, #4
 8005368:	b292      	uxth	r2, r2
 800536a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f007 fed0 	bl	800d114 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005374:	e026      	b.n	80053c4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00f      	beq.n	80053a0 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005388:	b29a      	uxth	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005392:	b292      	uxth	r2, r2
 8005394:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f007 fe8e 	bl	800d0ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800539e:	e011      	b.n	80053c4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00c      	beq.n	80053c4 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053bc:	b292      	uxth	r2, r2
 80053be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80053c2:	bf00      	nop
  }
}
 80053c4:	3720      	adds	r7, #32
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b082      	sub	sp, #8
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	460b      	mov	r3, r1
 80053d4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d101      	bne.n	80053e4 <HAL_PCD_SetAddress+0x1a>
 80053e0:	2302      	movs	r3, #2
 80053e2:	e013      	b.n	800540c <HAL_PCD_SetAddress+0x42>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	78fa      	ldrb	r2, [r7, #3]
 80053f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	78fa      	ldrb	r2, [r7, #3]
 80053fa:	4611      	mov	r1, r2
 80053fc:	4618      	mov	r0, r3
 80053fe:	f005 ffbd 	bl	800b37c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	4608      	mov	r0, r1
 800541e:	4611      	mov	r1, r2
 8005420:	461a      	mov	r2, r3
 8005422:	4603      	mov	r3, r0
 8005424:	70fb      	strb	r3, [r7, #3]
 8005426:	460b      	mov	r3, r1
 8005428:	803b      	strh	r3, [r7, #0]
 800542a:	4613      	mov	r3, r2
 800542c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800542e:	2300      	movs	r3, #0
 8005430:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005432:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005436:	2b00      	cmp	r3, #0
 8005438:	da0e      	bge.n	8005458 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800543a:	78fb      	ldrb	r3, [r7, #3]
 800543c:	f003 0307 	and.w	r3, r3, #7
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	4613      	mov	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	00db      	lsls	r3, r3, #3
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	4413      	add	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2201      	movs	r2, #1
 8005454:	705a      	strb	r2, [r3, #1]
 8005456:	e00e      	b.n	8005476 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005458:	78fb      	ldrb	r3, [r7, #3]
 800545a:	f003 0207 	and.w	r2, r3, #7
 800545e:	4613      	mov	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	4413      	add	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005476:	78fb      	ldrb	r3, [r7, #3]
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	b2da      	uxtb	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005482:	883a      	ldrh	r2, [r7, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	78ba      	ldrb	r2, [r7, #2]
 800548c:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800548e:	78bb      	ldrb	r3, [r7, #2]
 8005490:	2b02      	cmp	r3, #2
 8005492:	d102      	bne.n	800549a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d101      	bne.n	80054a8 <HAL_PCD_EP_Open+0x94>
 80054a4:	2302      	movs	r3, #2
 80054a6:	e00e      	b.n	80054c6 <HAL_PCD_EP_Open+0xb2>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68f9      	ldr	r1, [r7, #12]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f003 fd06 	bl	8008ec8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 80054c4:	7afb      	ldrb	r3, [r7, #11]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b084      	sub	sp, #16
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
 80054d6:	460b      	mov	r3, r1
 80054d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80054da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	da0e      	bge.n	8005500 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054e2:	78fb      	ldrb	r3, [r7, #3]
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	4613      	mov	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	00db      	lsls	r3, r3, #3
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	4413      	add	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2201      	movs	r2, #1
 80054fc:	705a      	strb	r2, [r3, #1]
 80054fe:	e00e      	b.n	800551e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	f003 0207 	and.w	r2, r3, #7
 8005506:	4613      	mov	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	00db      	lsls	r3, r3, #3
 800550e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	4413      	add	r3, r2
 8005516:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800551e:	78fb      	ldrb	r3, [r7, #3]
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	b2da      	uxtb	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005530:	2b01      	cmp	r3, #1
 8005532:	d101      	bne.n	8005538 <HAL_PCD_EP_Close+0x6a>
 8005534:	2302      	movs	r3, #2
 8005536:	e00e      	b.n	8005556 <HAL_PCD_EP_Close+0x88>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68f9      	ldr	r1, [r7, #12]
 8005546:	4618      	mov	r0, r3
 8005548:	f004 f87e 	bl	8009648 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3710      	adds	r7, #16
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b086      	sub	sp, #24
 8005562:	af00      	add	r7, sp, #0
 8005564:	60f8      	str	r0, [r7, #12]
 8005566:	607a      	str	r2, [r7, #4]
 8005568:	603b      	str	r3, [r7, #0]
 800556a:	460b      	mov	r3, r1
 800556c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800556e:	7afb      	ldrb	r3, [r7, #11]
 8005570:	f003 0207 	and.w	r2, r3, #7
 8005574:	4613      	mov	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	4413      	add	r3, r2
 8005584:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2200      	movs	r2, #0
 8005596:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	2200      	movs	r2, #0
 800559c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800559e:	7afb      	ldrb	r3, [r7, #11]
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6979      	ldr	r1, [r7, #20]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f004 fa35 	bl	8009a20 <USB_EPStartXfer>

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3718      	adds	r7, #24
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	460b      	mov	r3, r1
 80055ca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80055cc:	78fb      	ldrb	r3, [r7, #3]
 80055ce:	f003 0207 	and.w	r2, r3, #7
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	4613      	mov	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	440b      	add	r3, r1
 80055de:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80055e2:	681b      	ldr	r3, [r3, #0]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bc80      	pop	{r7}
 80055ec:	4770      	bx	lr

080055ee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b086      	sub	sp, #24
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	60f8      	str	r0, [r7, #12]
 80055f6:	607a      	str	r2, [r7, #4]
 80055f8:	603b      	str	r3, [r7, #0]
 80055fa:	460b      	mov	r3, r1
 80055fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055fe:	7afb      	ldrb	r3, [r7, #11]
 8005600:	f003 0307 	and.w	r3, r3, #7
 8005604:	1c5a      	adds	r2, r3, #1
 8005606:	4613      	mov	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	00db      	lsls	r3, r3, #3
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	4413      	add	r3, r2
 8005612:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2200      	movs	r2, #0
 8005632:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2201      	movs	r2, #1
 8005638:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800563a:	7afb      	ldrb	r3, [r7, #11]
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	b2da      	uxtb	r2, r3
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6979      	ldr	r1, [r7, #20]
 800564c:	4618      	mov	r0, r3
 800564e:	f004 f9e7 	bl	8009a20 <USB_EPStartXfer>

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	460b      	mov	r3, r1
 8005666:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005668:	78fb      	ldrb	r3, [r7, #3]
 800566a:	f003 0207 	and.w	r2, r3, #7
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	429a      	cmp	r2, r3
 8005674:	d901      	bls.n	800567a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e04c      	b.n	8005714 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800567a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800567e:	2b00      	cmp	r3, #0
 8005680:	da0e      	bge.n	80056a0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005682:	78fb      	ldrb	r3, [r7, #3]
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	4613      	mov	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	4413      	add	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2201      	movs	r2, #1
 800569c:	705a      	strb	r2, [r3, #1]
 800569e:	e00c      	b.n	80056ba <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80056a0:	78fa      	ldrb	r2, [r7, #3]
 80056a2:	4613      	mov	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	00db      	lsls	r3, r3, #3
 80056aa:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	4413      	add	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2201      	movs	r2, #1
 80056be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056c0:	78fb      	ldrb	r3, [r7, #3]
 80056c2:	f003 0307 	and.w	r3, r3, #7
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d101      	bne.n	80056da <HAL_PCD_EP_SetStall+0x7e>
 80056d6:	2302      	movs	r3, #2
 80056d8:	e01c      	b.n	8005714 <HAL_PCD_EP_SetStall+0xb8>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68f9      	ldr	r1, [r7, #12]
 80056e8:	4618      	mov	r0, r3
 80056ea:	f005 fd4a 	bl	800b182 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80056ee:	78fb      	ldrb	r3, [r7, #3]
 80056f0:	f003 0307 	and.w	r3, r3, #7
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d108      	bne.n	800570a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8005702:	4619      	mov	r1, r3
 8005704:	4610      	mov	r0, r2
 8005706:	f005 fe6f 	bl	800b3e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	460b      	mov	r3, r1
 8005726:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005728:	78fb      	ldrb	r3, [r7, #3]
 800572a:	f003 020f 	and.w	r2, r3, #15
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	429a      	cmp	r2, r3
 8005734:	d901      	bls.n	800573a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e040      	b.n	80057bc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800573a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800573e:	2b00      	cmp	r3, #0
 8005740:	da0e      	bge.n	8005760 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005742:	78fb      	ldrb	r3, [r7, #3]
 8005744:	f003 0307 	and.w	r3, r3, #7
 8005748:	1c5a      	adds	r2, r3, #1
 800574a:	4613      	mov	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4413      	add	r3, r2
 8005750:	00db      	lsls	r3, r3, #3
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	4413      	add	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2201      	movs	r2, #1
 800575c:	705a      	strb	r2, [r3, #1]
 800575e:	e00e      	b.n	800577e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005760:	78fb      	ldrb	r3, [r7, #3]
 8005762:	f003 0207 	and.w	r2, r3, #7
 8005766:	4613      	mov	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4413      	add	r3, r2
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	4413      	add	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005784:	78fb      	ldrb	r3, [r7, #3]
 8005786:	f003 0307 	and.w	r3, r3, #7
 800578a:	b2da      	uxtb	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005796:	2b01      	cmp	r3, #1
 8005798:	d101      	bne.n	800579e <HAL_PCD_EP_ClrStall+0x82>
 800579a:	2302      	movs	r3, #2
 800579c:	e00e      	b.n	80057bc <HAL_PCD_EP_ClrStall+0xa0>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68f9      	ldr	r1, [r7, #12]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f005 fd38 	bl	800b222 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b096      	sub	sp, #88	@ 0x58
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80057cc:	e3be      	b.n	8005f4c <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80057d6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80057da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	f003 030f 	and.w	r3, r3, #15
 80057e4:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80057e8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f040 8178 	bne.w	8005ae2 <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80057f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80057f6:	f003 0310 	and.w	r3, r3, #16
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d151      	bne.n	80058a2 <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	881b      	ldrh	r3, [r3, #0]
 8005804:	b29b      	uxth	r3, r3
 8005806:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800580a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800580e:	81fb      	strh	r3, [r7, #14]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	89fb      	ldrh	r3, [r7, #14]
 8005816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800581a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800581e:	b29b      	uxth	r3, r3
 8005820:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	3328      	adds	r3, #40	@ 0x28
 8005826:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005830:	b29b      	uxth	r3, r3
 8005832:	461a      	mov	r2, r3
 8005834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	4413      	add	r3, r2
 800583c:	3302      	adds	r3, #2
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	6812      	ldr	r2, [r2, #0]
 8005844:	4413      	add	r3, r2
 8005846:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005852:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005854:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005856:	695a      	ldr	r2, [r3, #20]
 8005858:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800585a:	69db      	ldr	r3, [r3, #28]
 800585c:	441a      	add	r2, r3
 800585e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005860:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005862:	2100      	movs	r1, #0
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f007 fc0e 	bl	800d086 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 836a 	beq.w	8005f4c <PCD_EP_ISR_Handler+0x788>
 8005878:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	2b00      	cmp	r3, #0
 800587e:	f040 8365 	bne.w	8005f4c <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005888:	b2db      	uxtb	r3, r3
 800588a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800588e:	b2da      	uxtb	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80058a0:	e354      	b.n	8005f4c <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80058a8:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	881b      	ldrh	r3, [r3, #0]
 80058b0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80058b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80058b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d034      	beq.n	800592a <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	461a      	mov	r2, r3
 80058cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	00db      	lsls	r3, r3, #3
 80058d2:	4413      	add	r3, r2
 80058d4:	3306      	adds	r3, #6
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6812      	ldr	r2, [r2, #0]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80058e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058ea:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6818      	ldr	r0, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 80058f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058f8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80058fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058fc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80058fe:	b29b      	uxth	r3, r3
 8005900:	f005 fdc2 	bl	800b488 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	b29a      	uxth	r2, r3
 800590c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005910:	4013      	ands	r3, r2
 8005912:	823b      	strh	r3, [r7, #16]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	8a3a      	ldrh	r2, [r7, #16]
 800591a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800591e:	b292      	uxth	r2, r2
 8005920:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f007 fb82 	bl	800d02c <HAL_PCD_SetupStageCallback>
 8005928:	e310      	b.n	8005f4c <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800592a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800592e:	2b00      	cmp	r3, #0
 8005930:	f280 830c 	bge.w	8005f4c <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	b29a      	uxth	r2, r3
 800593c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005940:	4013      	ands	r3, r2
 8005942:	83fb      	strh	r3, [r7, #30]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	8bfa      	ldrh	r2, [r7, #30]
 800594a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800594e:	b292      	uxth	r2, r2
 8005950:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800595a:	b29b      	uxth	r3, r3
 800595c:	461a      	mov	r2, r3
 800595e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	4413      	add	r3, r2
 8005966:	3306      	adds	r3, #6
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	6812      	ldr	r2, [r2, #0]
 800596e:	4413      	add	r3, r2
 8005970:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800597a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800597c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800597e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d019      	beq.n	80059ba <PCD_EP_ISR_Handler+0x1f6>
 8005986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d015      	beq.n	80059ba <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6818      	ldr	r0, [r3, #0]
 8005992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005994:	6959      	ldr	r1, [r3, #20]
 8005996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005998:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800599a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800599c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800599e:	b29b      	uxth	r3, r3
 80059a0:	f005 fd72 	bl	800b488 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80059a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059a6:	695a      	ldr	r2, [r3, #20]
 80059a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059aa:	69db      	ldr	r3, [r3, #28]
 80059ac:	441a      	add	r2, r3
 80059ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059b0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80059b2:	2100      	movs	r1, #0
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f007 fb4b 	bl	800d050 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80059c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80059c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f040 82bd 	bne.w	8005f4c <PCD_EP_ISR_Handler+0x788>
 80059d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80059d6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80059da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80059de:	f000 82b5 	beq.w	8005f4c <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	61bb      	str	r3, [r7, #24]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	461a      	mov	r2, r3
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	4413      	add	r3, r2
 80059f8:	61bb      	str	r3, [r7, #24]
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a00:	617b      	str	r3, [r7, #20]
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	881b      	ldrh	r3, [r3, #0]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	801a      	strh	r2, [r3, #0]
 8005a12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a18:	d91d      	bls.n	8005a56 <PCD_EP_ISR_Handler+0x292>
 8005a1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	095b      	lsrs	r3, r3, #5
 8005a20:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	f003 031f 	and.w	r3, r3, #31
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d102      	bne.n	8005a34 <PCD_EP_ISR_Handler+0x270>
 8005a2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a30:	3b01      	subs	r3, #1
 8005a32:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	029b      	lsls	r3, r3, #10
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	4313      	orrs	r3, r2
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	801a      	strh	r2, [r3, #0]
 8005a54:	e026      	b.n	8005aa4 <PCD_EP_ISR_Handler+0x2e0>
 8005a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10a      	bne.n	8005a74 <PCD_EP_ISR_Handler+0x2b0>
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	881b      	ldrh	r3, [r3, #0]
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	801a      	strh	r2, [r3, #0]
 8005a72:	e017      	b.n	8005aa4 <PCD_EP_ISR_Handler+0x2e0>
 8005a74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	085b      	lsrs	r3, r3, #1
 8005a7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <PCD_EP_ISR_Handler+0x2ca>
 8005a88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	029b      	lsls	r3, r3, #10
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ab0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ab4:	827b      	strh	r3, [r7, #18]
 8005ab6:	8a7b      	ldrh	r3, [r7, #18]
 8005ab8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005abc:	827b      	strh	r3, [r7, #18]
 8005abe:	8a7b      	ldrh	r3, [r7, #18]
 8005ac0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005ac4:	827b      	strh	r3, [r7, #18]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	8a7b      	ldrh	r3, [r7, #18]
 8005acc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ad0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ad4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	8013      	strh	r3, [r2, #0]
 8005ae0:	e234      	b.n	8005f4c <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	4413      	add	r3, r2
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005af6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f280 80fc 	bge.w	8005cf8 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	461a      	mov	r2, r3
 8005b06:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4413      	add	r3, r2
 8005b0e:	881b      	ldrh	r3, [r3, #0]
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005b16:	4013      	ands	r3, r2
 8005b18:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	461a      	mov	r2, r3
 8005b22:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8005b2e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005b32:	b292      	uxth	r2, r2
 8005b34:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005b36:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	00db      	lsls	r3, r3, #3
 8005b42:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	4413      	add	r3, r2
 8005b4a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005b4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b4e:	7b1b      	ldrb	r3, [r3, #12]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d125      	bne.n	8005ba0 <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	461a      	mov	r2, r3
 8005b60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	00db      	lsls	r3, r3, #3
 8005b66:	4413      	add	r3, r2
 8005b68:	3306      	adds	r3, #6
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	6812      	ldr	r2, [r2, #0]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b7c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8005b80:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 8092 	beq.w	8005cae <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6818      	ldr	r0, [r3, #0]
 8005b8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b90:	6959      	ldr	r1, [r3, #20]
 8005b92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b94:	88da      	ldrh	r2, [r3, #6]
 8005b96:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005b9a:	f005 fc75 	bl	800b488 <USB_ReadPMA>
 8005b9e:	e086      	b.n	8005cae <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005ba0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ba2:	78db      	ldrb	r3, [r3, #3]
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d10a      	bne.n	8005bbe <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005ba8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005bac:	461a      	mov	r2, r3
 8005bae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f9d9 	bl	8005f68 <HAL_PCD_EP_DB_Receive>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8005bbc:	e077      	b.n	8005cae <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bd8:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	461a      	mov	r2, r3
 8005be2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	441a      	add	r2, r3
 8005bea:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8005bee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bfa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	461a      	mov	r2, r3
 8005c08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d024      	beq.n	8005c66 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	461a      	mov	r2, r3
 8005c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	00db      	lsls	r3, r3, #3
 8005c2e:	4413      	add	r3, r2
 8005c30:	3302      	adds	r3, #2
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	6812      	ldr	r2, [r2, #0]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c44:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005c48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d02e      	beq.n	8005cae <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6818      	ldr	r0, [r3, #0]
 8005c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c56:	6959      	ldr	r1, [r3, #20]
 8005c58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c5a:	891a      	ldrh	r2, [r3, #8]
 8005c5c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005c60:	f005 fc12 	bl	800b488 <USB_ReadPMA>
 8005c64:	e023      	b.n	8005cae <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	461a      	mov	r2, r3
 8005c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	00db      	lsls	r3, r3, #3
 8005c78:	4413      	add	r3, r2
 8005c7a:	3306      	adds	r3, #6
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	6812      	ldr	r2, [r2, #0]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c8e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005c92:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d009      	beq.n	8005cae <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6818      	ldr	r0, [r3, #0]
 8005c9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ca0:	6959      	ldr	r1, [r3, #20]
 8005ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ca4:	895a      	ldrh	r2, [r3, #10]
 8005ca6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005caa:	f005 fbed 	bl	800b488 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005cae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cb0:	69da      	ldr	r2, [r3, #28]
 8005cb2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005cb6:	441a      	add	r2, r3
 8005cb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cba:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005cbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cbe:	695a      	ldr	r2, [r3, #20]
 8005cc0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005cc4:	441a      	add	r2, r3
 8005cc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cc8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d005      	beq.n	8005cde <PCD_EP_ISR_Handler+0x51a>
 8005cd2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8005cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d206      	bcs.n	8005cec <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005cde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f007 f9b3 	bl	800d050 <HAL_PCD_DataOutStageCallback>
 8005cea:	e005      	b.n	8005cf8 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f003 fe94 	bl	8009a20 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005cf8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 8123 	beq.w	8005f4c <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8005d06:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005d0a:	1c5a      	adds	r2, r3, #1
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	00db      	lsls	r3, r3, #3
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	4413      	add	r3, r2
 8005d18:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005d30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d34:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	441a      	add	r2, r3
 8005d46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005d4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d58:	78db      	ldrb	r3, [r3, #3]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	f040 80a2 	bne.w	8005ea4 <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8005d60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d62:	2200      	movs	r2, #0
 8005d64:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005d66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d68:	7b1b      	ldrb	r3, [r3, #12]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 8093 	beq.w	8005e96 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005d70:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d046      	beq.n	8005e0a <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d7e:	785b      	ldrb	r3, [r3, #1]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d126      	bne.n	8005dd2 <PCD_EP_ISR_Handler+0x60e>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	461a      	mov	r2, r3
 8005d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d98:	4413      	add	r3, r2
 8005d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	011a      	lsls	r2, r3, #4
 8005da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da4:	4413      	add	r3, r2
 8005da6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005daa:	623b      	str	r3, [r7, #32]
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	801a      	strh	r2, [r3, #0]
 8005dbc:	6a3b      	ldr	r3, [r7, #32]
 8005dbe:	881b      	ldrh	r3, [r3, #0]
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	6a3b      	ldr	r3, [r7, #32]
 8005dce:	801a      	strh	r2, [r3, #0]
 8005dd0:	e061      	b.n	8005e96 <PCD_EP_ISR_Handler+0x6d2>
 8005dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dd4:	785b      	ldrb	r3, [r3, #1]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d15d      	bne.n	8005e96 <PCD_EP_ISR_Handler+0x6d2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	461a      	mov	r2, r3
 8005dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dee:	4413      	add	r3, r2
 8005df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005df2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	011a      	lsls	r2, r3, #4
 8005df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e04:	2200      	movs	r2, #0
 8005e06:	801a      	strh	r2, [r3, #0]
 8005e08:	e045      	b.n	8005e96 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e12:	785b      	ldrb	r3, [r3, #1]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d126      	bne.n	8005e66 <PCD_EP_ISR_Handler+0x6a2>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	461a      	mov	r2, r3
 8005e2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e2c:	4413      	add	r3, r2
 8005e2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	011a      	lsls	r2, r3, #4
 8005e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e38:	4413      	add	r3, r2
 8005e3a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4e:	801a      	strh	r2, [r3, #0]
 8005e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e52:	881b      	ldrh	r3, [r3, #0]
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e62:	801a      	strh	r2, [r3, #0]
 8005e64:	e017      	b.n	8005e96 <PCD_EP_ISR_Handler+0x6d2>
 8005e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e68:	785b      	ldrb	r3, [r3, #1]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d113      	bne.n	8005e96 <PCD_EP_ISR_Handler+0x6d2>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	461a      	mov	r2, r3
 8005e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e7c:	4413      	add	r3, r2
 8005e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	011a      	lsls	r2, r3, #4
 8005e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e88:	4413      	add	r3, r2
 8005e8a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e92:	2200      	movs	r2, #0
 8005e94:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f007 f8f2 	bl	800d086 <HAL_PCD_DataInStageCallback>
 8005ea2:	e053      	b.n	8005f4c <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005ea4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d146      	bne.n	8005f3e <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	461a      	mov	r2, r3
 8005ebc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	00db      	lsls	r3, r3, #3
 8005ec2:	4413      	add	r3, r2
 8005ec4:	3302      	adds	r3, #2
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	6812      	ldr	r2, [r2, #0]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ed2:	881b      	ldrh	r3, [r3, #0]
 8005ed4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ed8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8005edc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ede:	699a      	ldr	r2, [r3, #24]
 8005ee0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d907      	bls.n	8005ef8 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8005ee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005eea:	699a      	ldr	r2, [r3, #24]
 8005eec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005ef0:	1ad2      	subs	r2, r2, r3
 8005ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ef4:	619a      	str	r2, [r3, #24]
 8005ef6:	e002      	b.n	8005efe <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8005ef8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005efa:	2200      	movs	r2, #0
 8005efc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005efe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d106      	bne.n	8005f14 <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005f06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f007 f8ba 	bl	800d086 <HAL_PCD_DataInStageCallback>
 8005f12:	e01b      	b.n	8005f4c <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005f14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f16:	695a      	ldr	r2, [r3, #20]
 8005f18:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005f1c:	441a      	add	r2, r3
 8005f1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f20:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005f22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f24:	69da      	ldr	r2, [r3, #28]
 8005f26:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005f2a:	441a      	add	r2, r3
 8005f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f2e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f36:	4618      	mov	r0, r3
 8005f38:	f003 fd72 	bl	8009a20 <USB_EPStartXfer>
 8005f3c:	e006      	b.n	8005f4c <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005f3e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005f42:	461a      	mov	r2, r3
 8005f44:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f91b 	bl	8006182 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	b21b      	sxth	r3, r3
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f6ff ac38 	blt.w	80057ce <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3758      	adds	r7, #88	@ 0x58
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b088      	sub	sp, #32
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	4613      	mov	r3, r2
 8005f74:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005f76:	88fb      	ldrh	r3, [r7, #6]
 8005f78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d07e      	beq.n	800607e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	4413      	add	r3, r2
 8005f94:	3302      	adds	r3, #2
 8005f96:	005b      	lsls	r3, r3, #1
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	6812      	ldr	r2, [r2, #0]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005fa2:	881b      	ldrh	r3, [r3, #0]
 8005fa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fa8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	699a      	ldr	r2, [r3, #24]
 8005fae:	8b7b      	ldrh	r3, [r7, #26]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d306      	bcc.n	8005fc2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	699a      	ldr	r2, [r3, #24]
 8005fb8:	8b7b      	ldrh	r3, [r7, #26]
 8005fba:	1ad2      	subs	r2, r2, r3
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	619a      	str	r2, [r3, #24]
 8005fc0:	e002      	b.n	8005fc8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d123      	bne.n	8006018 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fea:	833b      	strh	r3, [r7, #24]
 8005fec:	8b3b      	ldrh	r3, [r7, #24]
 8005fee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005ff2:	833b      	strh	r3, [r7, #24]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	441a      	add	r2, r3
 8006002:	8b3b      	ldrh	r3, [r7, #24]
 8006004:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006008:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800600c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006010:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006014:	b29b      	uxth	r3, r3
 8006016:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006018:	88fb      	ldrh	r3, [r7, #6]
 800601a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800601e:	2b00      	cmp	r3, #0
 8006020:	d01f      	beq.n	8006062 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	461a      	mov	r2, r3
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	b29b      	uxth	r3, r3
 8006034:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006038:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800603c:	82fb      	strh	r3, [r7, #22]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	461a      	mov	r2, r3
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	441a      	add	r2, r3
 800604c:	8afb      	ldrh	r3, [r7, #22]
 800604e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006052:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006056:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800605a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800605e:	b29b      	uxth	r3, r3
 8006060:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006062:	8b7b      	ldrh	r3, [r7, #26]
 8006064:	2b00      	cmp	r3, #0
 8006066:	f000 8087 	beq.w	8006178 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6818      	ldr	r0, [r3, #0]
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	6959      	ldr	r1, [r3, #20]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	891a      	ldrh	r2, [r3, #8]
 8006076:	8b7b      	ldrh	r3, [r7, #26]
 8006078:	f005 fa06 	bl	800b488 <USB_ReadPMA>
 800607c:	e07c      	b.n	8006178 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006086:	b29b      	uxth	r3, r3
 8006088:	461a      	mov	r2, r3
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	4413      	add	r3, r2
 8006092:	3306      	adds	r3, #6
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	6812      	ldr	r2, [r2, #0]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060a0:	881b      	ldrh	r3, [r3, #0]
 80060a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060a6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	699a      	ldr	r2, [r3, #24]
 80060ac:	8b7b      	ldrh	r3, [r7, #26]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d306      	bcc.n	80060c0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	699a      	ldr	r2, [r3, #24]
 80060b6:	8b7b      	ldrh	r3, [r7, #26]
 80060b8:	1ad2      	subs	r2, r2, r3
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	619a      	str	r2, [r3, #24]
 80060be:	e002      	b.n	80060c6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2200      	movs	r2, #0
 80060c4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d123      	bne.n	8006116 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	461a      	mov	r2, r3
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	881b      	ldrh	r3, [r3, #0]
 80060de:	b29b      	uxth	r3, r3
 80060e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060e8:	83fb      	strh	r3, [r7, #30]
 80060ea:	8bfb      	ldrh	r3, [r7, #30]
 80060ec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80060f0:	83fb      	strh	r3, [r7, #30]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	441a      	add	r2, r3
 8006100:	8bfb      	ldrh	r3, [r7, #30]
 8006102:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006106:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800610a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800610e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006112:	b29b      	uxth	r3, r3
 8006114:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006116:	88fb      	ldrh	r3, [r7, #6]
 8006118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800611c:	2b00      	cmp	r3, #0
 800611e:	d11f      	bne.n	8006160 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	461a      	mov	r2, r3
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	b29b      	uxth	r3, r3
 8006132:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800613a:	83bb      	strh	r3, [r7, #28]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	461a      	mov	r2, r3
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	441a      	add	r2, r3
 800614a:	8bbb      	ldrh	r3, [r7, #28]
 800614c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006150:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006154:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006158:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800615c:	b29b      	uxth	r3, r3
 800615e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006160:	8b7b      	ldrh	r3, [r7, #26]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d008      	beq.n	8006178 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6818      	ldr	r0, [r3, #0]
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	6959      	ldr	r1, [r3, #20]
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	895a      	ldrh	r2, [r3, #10]
 8006172:	8b7b      	ldrh	r3, [r7, #26]
 8006174:	f005 f988 	bl	800b488 <USB_ReadPMA>
    }
  }

  return count;
 8006178:	8b7b      	ldrh	r3, [r7, #26]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3720      	adds	r7, #32
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b0a4      	sub	sp, #144	@ 0x90
 8006186:	af00      	add	r7, sp, #0
 8006188:	60f8      	str	r0, [r7, #12]
 800618a:	60b9      	str	r1, [r7, #8]
 800618c:	4613      	mov	r3, r2
 800618e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006190:	88fb      	ldrh	r3, [r7, #6]
 8006192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 81dd 	beq.w	8006556 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	461a      	mov	r2, r3
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	00db      	lsls	r3, r3, #3
 80061ae:	4413      	add	r3, r2
 80061b0:	3302      	adds	r3, #2
 80061b2:	005b      	lsls	r3, r3, #1
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	6812      	ldr	r2, [r2, #0]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061be:	881b      	ldrh	r3, [r3, #0]
 80061c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061c4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	699a      	ldr	r2, [r3, #24]
 80061cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d907      	bls.n	80061e4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	699a      	ldr	r2, [r3, #24]
 80061d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80061dc:	1ad2      	subs	r2, r2, r3
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	619a      	str	r2, [r3, #24]
 80061e2:	e002      	b.n	80061ea <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2200      	movs	r2, #0
 80061e8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f040 80b9 	bne.w	8006366 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	785b      	ldrb	r3, [r3, #1]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d126      	bne.n	800624a <HAL_PCD_EP_DB_Transmit+0xc8>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800620a:	b29b      	uxth	r3, r3
 800620c:	461a      	mov	r2, r3
 800620e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006210:	4413      	add	r3, r2
 8006212:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	011a      	lsls	r2, r3, #4
 800621a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800621c:	4413      	add	r3, r2
 800621e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006222:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	b29b      	uxth	r3, r3
 800622a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800622e:	b29a      	uxth	r2, r3
 8006230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006232:	801a      	strh	r2, [r3, #0]
 8006234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	b29b      	uxth	r3, r3
 800623a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800623e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006242:	b29a      	uxth	r2, r3
 8006244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006246:	801a      	strh	r2, [r3, #0]
 8006248:	e01a      	b.n	8006280 <HAL_PCD_EP_DB_Transmit+0xfe>
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	785b      	ldrb	r3, [r3, #1]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d116      	bne.n	8006280 <HAL_PCD_EP_DB_Transmit+0xfe>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	637b      	str	r3, [r7, #52]	@ 0x34
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006260:	b29b      	uxth	r3, r3
 8006262:	461a      	mov	r2, r3
 8006264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006266:	4413      	add	r3, r2
 8006268:	637b      	str	r3, [r7, #52]	@ 0x34
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	011a      	lsls	r2, r3, #4
 8006270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006272:	4413      	add	r3, r2
 8006274:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006278:	633b      	str	r3, [r7, #48]	@ 0x30
 800627a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627c:	2200      	movs	r2, #0
 800627e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	627b      	str	r3, [r7, #36]	@ 0x24
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	785b      	ldrb	r3, [r3, #1]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d126      	bne.n	80062dc <HAL_PCD_EP_DB_Transmit+0x15a>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	61fb      	str	r3, [r7, #28]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800629c:	b29b      	uxth	r3, r3
 800629e:	461a      	mov	r2, r3
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	4413      	add	r3, r2
 80062a4:	61fb      	str	r3, [r7, #28]
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	011a      	lsls	r2, r3, #4
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	4413      	add	r3, r2
 80062b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80062b4:	61bb      	str	r3, [r7, #24]
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	801a      	strh	r2, [r3, #0]
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	801a      	strh	r2, [r3, #0]
 80062da:	e017      	b.n	800630c <HAL_PCD_EP_DB_Transmit+0x18a>
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	785b      	ldrb	r3, [r3, #1]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d113      	bne.n	800630c <HAL_PCD_EP_DB_Transmit+0x18a>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	461a      	mov	r2, r3
 80062f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f2:	4413      	add	r3, r2
 80062f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	011a      	lsls	r2, r3, #4
 80062fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fe:	4413      	add	r3, r2
 8006300:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006304:	623b      	str	r3, [r7, #32]
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	2200      	movs	r2, #0
 800630a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	4619      	mov	r1, r3
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f006 feb7 	bl	800d086 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006318:	88fb      	ldrh	r3, [r7, #6]
 800631a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800631e:	2b00      	cmp	r3, #0
 8006320:	f000 82fc 	beq.w	800691c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	461a      	mov	r2, r3
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4413      	add	r3, r2
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	b29b      	uxth	r3, r3
 8006336:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800633a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800633e:	82fb      	strh	r3, [r7, #22]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	461a      	mov	r2, r3
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	441a      	add	r2, r3
 800634e:	8afb      	ldrh	r3, [r7, #22]
 8006350:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006354:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006358:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800635c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006360:	b29b      	uxth	r3, r3
 8006362:	8013      	strh	r3, [r2, #0]
 8006364:	e2da      	b.n	800691c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006366:	88fb      	ldrh	r3, [r7, #6]
 8006368:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d021      	beq.n	80063b4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	461a      	mov	r2, r3
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	881b      	ldrh	r3, [r3, #0]
 8006380:	b29b      	uxth	r3, r3
 8006382:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800638a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	461a      	mov	r2, r3
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	441a      	add	r2, r3
 800639c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80063a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80063ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	f040 82ae 	bne.w	800691c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	695a      	ldr	r2, [r3, #20]
 80063c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80063c8:	441a      	add	r2, r3
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	69da      	ldr	r2, [r3, #28]
 80063d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80063d6:	441a      	add	r2, r3
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	6a1a      	ldr	r2, [r3, #32]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d30b      	bcc.n	8006400 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	6a1a      	ldr	r2, [r3, #32]
 80063f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063f8:	1ad2      	subs	r2, r2, r3
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	621a      	str	r2, [r3, #32]
 80063fe:	e017      	b.n	8006430 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	6a1b      	ldr	r3, [r3, #32]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d108      	bne.n	800641a <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8006408:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800640c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006418:	e00a      	b.n	8006430 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	2200      	movs	r2, #0
 800642e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	785b      	ldrb	r3, [r3, #1]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d165      	bne.n	8006504 <HAL_PCD_EP_DB_Transmit+0x382>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006446:	b29b      	uxth	r3, r3
 8006448:	461a      	mov	r2, r3
 800644a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800644c:	4413      	add	r3, r2
 800644e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	011a      	lsls	r2, r3, #4
 8006456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006458:	4413      	add	r3, r2
 800645a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800645e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006462:	881b      	ldrh	r3, [r3, #0]
 8006464:	b29b      	uxth	r3, r3
 8006466:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800646a:	b29a      	uxth	r2, r3
 800646c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646e:	801a      	strh	r2, [r3, #0]
 8006470:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006474:	2b3e      	cmp	r3, #62	@ 0x3e
 8006476:	d91d      	bls.n	80064b4 <HAL_PCD_EP_DB_Transmit+0x332>
 8006478:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800647c:	095b      	lsrs	r3, r3, #5
 800647e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006480:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006484:	f003 031f 	and.w	r3, r3, #31
 8006488:	2b00      	cmp	r3, #0
 800648a:	d102      	bne.n	8006492 <HAL_PCD_EP_DB_Transmit+0x310>
 800648c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800648e:	3b01      	subs	r3, #1
 8006490:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	b29a      	uxth	r2, r3
 8006498:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800649a:	b29b      	uxth	r3, r3
 800649c:	029b      	lsls	r3, r3, #10
 800649e:	b29b      	uxth	r3, r3
 80064a0:	4313      	orrs	r3, r2
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b0:	801a      	strh	r2, [r3, #0]
 80064b2:	e044      	b.n	800653e <HAL_PCD_EP_DB_Transmit+0x3bc>
 80064b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10a      	bne.n	80064d2 <HAL_PCD_EP_DB_Transmit+0x350>
 80064bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ce:	801a      	strh	r2, [r3, #0]
 80064d0:	e035      	b.n	800653e <HAL_PCD_EP_DB_Transmit+0x3bc>
 80064d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064d6:	085b      	lsrs	r3, r3, #1
 80064d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d002      	beq.n	80064ec <HAL_PCD_EP_DB_Transmit+0x36a>
 80064e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064e8:	3301      	adds	r3, #1
 80064ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	029b      	lsls	r3, r3, #10
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	4313      	orrs	r3, r2
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006500:	801a      	strh	r2, [r3, #0]
 8006502:	e01c      	b.n	800653e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	785b      	ldrb	r3, [r3, #1]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d118      	bne.n	800653e <HAL_PCD_EP_DB_Transmit+0x3bc>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	647b      	str	r3, [r7, #68]	@ 0x44
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800651a:	b29b      	uxth	r3, r3
 800651c:	461a      	mov	r2, r3
 800651e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006520:	4413      	add	r3, r2
 8006522:	647b      	str	r3, [r7, #68]	@ 0x44
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	011a      	lsls	r2, r3, #4
 800652a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800652c:	4413      	add	r3, r2
 800652e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006532:	643b      	str	r3, [r7, #64]	@ 0x40
 8006534:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006538:	b29a      	uxth	r2, r3
 800653a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800653c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6818      	ldr	r0, [r3, #0]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	6959      	ldr	r1, [r3, #20]
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	891a      	ldrh	r2, [r3, #8]
 800654a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800654e:	b29b      	uxth	r3, r3
 8006550:	f004 ff55 	bl	800b3fe <USB_WritePMA>
 8006554:	e1e2      	b.n	800691c <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800655e:	b29b      	uxth	r3, r3
 8006560:	461a      	mov	r2, r3
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	00db      	lsls	r3, r3, #3
 8006568:	4413      	add	r3, r2
 800656a:	3306      	adds	r3, #6
 800656c:	005b      	lsls	r3, r3, #1
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	6812      	ldr	r2, [r2, #0]
 8006572:	4413      	add	r3, r2
 8006574:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006578:	881b      	ldrh	r3, [r3, #0]
 800657a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800657e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	699a      	ldr	r2, [r3, #24]
 8006586:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800658a:	429a      	cmp	r2, r3
 800658c:	d307      	bcc.n	800659e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	699a      	ldr	r2, [r3, #24]
 8006592:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006596:	1ad2      	subs	r2, r2, r3
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	619a      	str	r2, [r3, #24]
 800659c:	e002      	b.n	80065a4 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	2200      	movs	r2, #0
 80065a2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f040 80c0 	bne.w	800672e <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	785b      	ldrb	r3, [r3, #1]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d126      	bne.n	8006604 <HAL_PCD_EP_DB_Transmit+0x482>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	461a      	mov	r2, r3
 80065c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80065ca:	4413      	add	r3, r2
 80065cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	011a      	lsls	r2, r3, #4
 80065d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80065d6:	4413      	add	r3, r2
 80065d8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80065dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80065de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065ec:	801a      	strh	r2, [r3, #0]
 80065ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006600:	801a      	strh	r2, [r3, #0]
 8006602:	e01a      	b.n	800663a <HAL_PCD_EP_DB_Transmit+0x4b8>
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	785b      	ldrb	r3, [r3, #1]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d116      	bne.n	800663a <HAL_PCD_EP_DB_Transmit+0x4b8>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	667b      	str	r3, [r7, #100]	@ 0x64
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800661a:	b29b      	uxth	r3, r3
 800661c:	461a      	mov	r2, r3
 800661e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006620:	4413      	add	r3, r2
 8006622:	667b      	str	r3, [r7, #100]	@ 0x64
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	011a      	lsls	r2, r3, #4
 800662a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800662c:	4413      	add	r3, r2
 800662e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006632:	663b      	str	r3, [r7, #96]	@ 0x60
 8006634:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006636:	2200      	movs	r2, #0
 8006638:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	785b      	ldrb	r3, [r3, #1]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d12b      	bne.n	80066a0 <HAL_PCD_EP_DB_Transmit+0x51e>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006656:	b29b      	uxth	r3, r3
 8006658:	461a      	mov	r2, r3
 800665a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800665c:	4413      	add	r3, r2
 800665e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	011a      	lsls	r2, r3, #4
 8006666:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006668:	4413      	add	r3, r2
 800666a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800666e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006672:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006676:	881b      	ldrh	r3, [r3, #0]
 8006678:	b29b      	uxth	r3, r3
 800667a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800667e:	b29a      	uxth	r2, r3
 8006680:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006684:	801a      	strh	r2, [r3, #0]
 8006686:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800668a:	881b      	ldrh	r3, [r3, #0]
 800668c:	b29b      	uxth	r3, r3
 800668e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006696:	b29a      	uxth	r2, r3
 8006698:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800669c:	801a      	strh	r2, [r3, #0]
 800669e:	e017      	b.n	80066d0 <HAL_PCD_EP_DB_Transmit+0x54e>
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	785b      	ldrb	r3, [r3, #1]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d113      	bne.n	80066d0 <HAL_PCD_EP_DB_Transmit+0x54e>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	461a      	mov	r2, r3
 80066b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80066b6:	4413      	add	r3, r2
 80066b8:	677b      	str	r3, [r7, #116]	@ 0x74
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	011a      	lsls	r2, r3, #4
 80066c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80066c2:	4413      	add	r3, r2
 80066c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80066c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80066ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80066cc:	2200      	movs	r2, #0
 80066ce:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	4619      	mov	r1, r3
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f006 fcd5 	bl	800d086 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80066dc:	88fb      	ldrh	r3, [r7, #6]
 80066de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f040 811a 	bne.w	800691c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	461a      	mov	r2, r3
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4413      	add	r3, r2
 80066f6:	881b      	ldrh	r3, [r3, #0]
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006702:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	461a      	mov	r2, r3
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	441a      	add	r2, r3
 8006714:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006718:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800671c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006720:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006724:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006728:	b29b      	uxth	r3, r3
 800672a:	8013      	strh	r3, [r2, #0]
 800672c:	e0f6      	b.n	800691c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800672e:	88fb      	ldrh	r3, [r7, #6]
 8006730:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d121      	bne.n	800677c <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	461a      	mov	r2, r3
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4413      	add	r3, r2
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	b29b      	uxth	r3, r3
 800674a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800674e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006752:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	461a      	mov	r2, r3
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	441a      	add	r2, r3
 8006764:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006768:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800676c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006770:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006778:	b29b      	uxth	r3, r3
 800677a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006782:	2b01      	cmp	r3, #1
 8006784:	f040 80ca 	bne.w	800691c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	695a      	ldr	r2, [r3, #20]
 800678c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006790:	441a      	add	r2, r3
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	69da      	ldr	r2, [r3, #28]
 800679a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800679e:	441a      	add	r2, r3
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	6a1a      	ldr	r2, [r3, #32]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d30b      	bcc.n	80067c8 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	6a1a      	ldr	r2, [r3, #32]
 80067bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067c0:	1ad2      	subs	r2, r2, r3
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	621a      	str	r2, [r3, #32]
 80067c6:	e017      	b.n	80067f8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	6a1b      	ldr	r3, [r3, #32]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d108      	bne.n	80067e2 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80067d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80067d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80067e0:	e00a      	b.n	80067f8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2200      	movs	r2, #0
 80067ee:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	785b      	ldrb	r3, [r3, #1]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d165      	bne.n	80068d2 <HAL_PCD_EP_DB_Transmit+0x750>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006814:	b29b      	uxth	r3, r3
 8006816:	461a      	mov	r2, r3
 8006818:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800681a:	4413      	add	r3, r2
 800681c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	011a      	lsls	r2, r3, #4
 8006824:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006826:	4413      	add	r3, r2
 8006828:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800682c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800682e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	b29b      	uxth	r3, r3
 8006834:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006838:	b29a      	uxth	r2, r3
 800683a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800683c:	801a      	strh	r2, [r3, #0]
 800683e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006842:	2b3e      	cmp	r3, #62	@ 0x3e
 8006844:	d91d      	bls.n	8006882 <HAL_PCD_EP_DB_Transmit+0x700>
 8006846:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800684a:	095b      	lsrs	r3, r3, #5
 800684c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800684e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006852:	f003 031f 	and.w	r3, r3, #31
 8006856:	2b00      	cmp	r3, #0
 8006858:	d102      	bne.n	8006860 <HAL_PCD_EP_DB_Transmit+0x6de>
 800685a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800685c:	3b01      	subs	r3, #1
 800685e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006860:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006862:	881b      	ldrh	r3, [r3, #0]
 8006864:	b29a      	uxth	r2, r3
 8006866:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006868:	b29b      	uxth	r3, r3
 800686a:	029b      	lsls	r3, r3, #10
 800686c:	b29b      	uxth	r3, r3
 800686e:	4313      	orrs	r3, r2
 8006870:	b29b      	uxth	r3, r3
 8006872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800687a:	b29a      	uxth	r2, r3
 800687c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800687e:	801a      	strh	r2, [r3, #0]
 8006880:	e041      	b.n	8006906 <HAL_PCD_EP_DB_Transmit+0x784>
 8006882:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10a      	bne.n	80068a0 <HAL_PCD_EP_DB_Transmit+0x71e>
 800688a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	b29b      	uxth	r3, r3
 8006890:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006894:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006898:	b29a      	uxth	r2, r3
 800689a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800689c:	801a      	strh	r2, [r3, #0]
 800689e:	e032      	b.n	8006906 <HAL_PCD_EP_DB_Transmit+0x784>
 80068a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068a4:	085b      	lsrs	r3, r3, #1
 80068a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d002      	beq.n	80068ba <HAL_PCD_EP_DB_Transmit+0x738>
 80068b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80068b6:	3301      	adds	r3, #1
 80068b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80068bc:	881b      	ldrh	r3, [r3, #0]
 80068be:	b29a      	uxth	r2, r3
 80068c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	029b      	lsls	r3, r3, #10
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	4313      	orrs	r3, r2
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80068ce:	801a      	strh	r2, [r3, #0]
 80068d0:	e019      	b.n	8006906 <HAL_PCD_EP_DB_Transmit+0x784>
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	785b      	ldrb	r3, [r3, #1]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d115      	bne.n	8006906 <HAL_PCD_EP_DB_Transmit+0x784>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	461a      	mov	r2, r3
 80068e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068e8:	4413      	add	r3, r2
 80068ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	011a      	lsls	r2, r3, #4
 80068f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068f4:	4413      	add	r3, r2
 80068f6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80068fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80068fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006900:	b29a      	uxth	r2, r3
 8006902:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006904:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6818      	ldr	r0, [r3, #0]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	6959      	ldr	r1, [r3, #20]
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	895a      	ldrh	r2, [r3, #10]
 8006912:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006916:	b29b      	uxth	r3, r3
 8006918:	f004 fd71 	bl	800b3fe <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	461a      	mov	r2, r3
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	b29b      	uxth	r3, r3
 800692e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006932:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006936:	82bb      	strh	r3, [r7, #20]
 8006938:	8abb      	ldrh	r3, [r7, #20]
 800693a:	f083 0310 	eor.w	r3, r3, #16
 800693e:	82bb      	strh	r3, [r7, #20]
 8006940:	8abb      	ldrh	r3, [r7, #20]
 8006942:	f083 0320 	eor.w	r3, r3, #32
 8006946:	82bb      	strh	r3, [r7, #20]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	461a      	mov	r2, r3
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	441a      	add	r2, r3
 8006956:	8abb      	ldrh	r3, [r7, #20]
 8006958:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800695c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006960:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006968:	b29b      	uxth	r3, r3
 800696a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3790      	adds	r7, #144	@ 0x90
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006976:	b480      	push	{r7}
 8006978:	b087      	sub	sp, #28
 800697a:	af00      	add	r7, sp, #0
 800697c:	60f8      	str	r0, [r7, #12]
 800697e:	607b      	str	r3, [r7, #4]
 8006980:	460b      	mov	r3, r1
 8006982:	817b      	strh	r3, [r7, #10]
 8006984:	4613      	mov	r3, r2
 8006986:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006988:	897b      	ldrh	r3, [r7, #10]
 800698a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800698e:	b29b      	uxth	r3, r3
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00b      	beq.n	80069ac <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006994:	897b      	ldrh	r3, [r7, #10]
 8006996:	f003 0307 	and.w	r3, r3, #7
 800699a:	1c5a      	adds	r2, r3, #1
 800699c:	4613      	mov	r3, r2
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	00db      	lsls	r3, r3, #3
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	4413      	add	r3, r2
 80069a8:	617b      	str	r3, [r7, #20]
 80069aa:	e009      	b.n	80069c0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80069ac:	897a      	ldrh	r2, [r7, #10]
 80069ae:	4613      	mov	r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4413      	add	r3, r2
 80069b4:	00db      	lsls	r3, r3, #3
 80069b6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	4413      	add	r3, r2
 80069be:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80069c0:	893b      	ldrh	r3, [r7, #8]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d107      	bne.n	80069d6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	2200      	movs	r2, #0
 80069ca:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	80da      	strh	r2, [r3, #6]
 80069d4:	e00b      	b.n	80069ee <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2201      	movs	r2, #1
 80069da:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	b29a      	uxth	r2, r3
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	0c1b      	lsrs	r3, r3, #16
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	371c      	adds	r7, #28
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bc80      	pop	{r7}
 80069f8:	4770      	bx	lr
	...

080069fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e272      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f000 8087 	beq.w	8006b2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a1c:	4b92      	ldr	r3, [pc, #584]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f003 030c 	and.w	r3, r3, #12
 8006a24:	2b04      	cmp	r3, #4
 8006a26:	d00c      	beq.n	8006a42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006a28:	4b8f      	ldr	r3, [pc, #572]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f003 030c 	and.w	r3, r3, #12
 8006a30:	2b08      	cmp	r3, #8
 8006a32:	d112      	bne.n	8006a5a <HAL_RCC_OscConfig+0x5e>
 8006a34:	4b8c      	ldr	r3, [pc, #560]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a40:	d10b      	bne.n	8006a5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a42:	4b89      	ldr	r3, [pc, #548]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d06c      	beq.n	8006b28 <HAL_RCC_OscConfig+0x12c>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d168      	bne.n	8006b28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e24c      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a62:	d106      	bne.n	8006a72 <HAL_RCC_OscConfig+0x76>
 8006a64:	4b80      	ldr	r3, [pc, #512]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a7f      	ldr	r2, [pc, #508]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006a6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	e02e      	b.n	8006ad0 <HAL_RCC_OscConfig+0xd4>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10c      	bne.n	8006a94 <HAL_RCC_OscConfig+0x98>
 8006a7a:	4b7b      	ldr	r3, [pc, #492]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a7a      	ldr	r2, [pc, #488]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006a80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a84:	6013      	str	r3, [r2, #0]
 8006a86:	4b78      	ldr	r3, [pc, #480]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a77      	ldr	r2, [pc, #476]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006a8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a90:	6013      	str	r3, [r2, #0]
 8006a92:	e01d      	b.n	8006ad0 <HAL_RCC_OscConfig+0xd4>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a9c:	d10c      	bne.n	8006ab8 <HAL_RCC_OscConfig+0xbc>
 8006a9e:	4b72      	ldr	r3, [pc, #456]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a71      	ldr	r2, [pc, #452]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006aa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006aa8:	6013      	str	r3, [r2, #0]
 8006aaa:	4b6f      	ldr	r3, [pc, #444]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a6e      	ldr	r2, [pc, #440]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ab4:	6013      	str	r3, [r2, #0]
 8006ab6:	e00b      	b.n	8006ad0 <HAL_RCC_OscConfig+0xd4>
 8006ab8:	4b6b      	ldr	r3, [pc, #428]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a6a      	ldr	r2, [pc, #424]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006abe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ac2:	6013      	str	r3, [r2, #0]
 8006ac4:	4b68      	ldr	r3, [pc, #416]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a67      	ldr	r2, [pc, #412]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006aca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ace:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d013      	beq.n	8006b00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ad8:	f7fc f802 	bl	8002ae0 <HAL_GetTick>
 8006adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ade:	e008      	b.n	8006af2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ae0:	f7fb fffe 	bl	8002ae0 <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	2b64      	cmp	r3, #100	@ 0x64
 8006aec:	d901      	bls.n	8006af2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e200      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006af2:	4b5d      	ldr	r3, [pc, #372]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d0f0      	beq.n	8006ae0 <HAL_RCC_OscConfig+0xe4>
 8006afe:	e014      	b.n	8006b2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b00:	f7fb ffee 	bl	8002ae0 <HAL_GetTick>
 8006b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b06:	e008      	b.n	8006b1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b08:	f7fb ffea 	bl	8002ae0 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	2b64      	cmp	r3, #100	@ 0x64
 8006b14:	d901      	bls.n	8006b1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e1ec      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b1a:	4b53      	ldr	r3, [pc, #332]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1f0      	bne.n	8006b08 <HAL_RCC_OscConfig+0x10c>
 8006b26:	e000      	b.n	8006b2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d063      	beq.n	8006bfe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b36:	4b4c      	ldr	r3, [pc, #304]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f003 030c 	and.w	r3, r3, #12
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00b      	beq.n	8006b5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006b42:	4b49      	ldr	r3, [pc, #292]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f003 030c 	and.w	r3, r3, #12
 8006b4a:	2b08      	cmp	r3, #8
 8006b4c:	d11c      	bne.n	8006b88 <HAL_RCC_OscConfig+0x18c>
 8006b4e:	4b46      	ldr	r3, [pc, #280]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d116      	bne.n	8006b88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b5a:	4b43      	ldr	r3, [pc, #268]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d005      	beq.n	8006b72 <HAL_RCC_OscConfig+0x176>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d001      	beq.n	8006b72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e1c0      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b72:	4b3d      	ldr	r3, [pc, #244]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	00db      	lsls	r3, r3, #3
 8006b80:	4939      	ldr	r1, [pc, #228]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006b82:	4313      	orrs	r3, r2
 8006b84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b86:	e03a      	b.n	8006bfe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d020      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b90:	4b36      	ldr	r3, [pc, #216]	@ (8006c6c <HAL_RCC_OscConfig+0x270>)
 8006b92:	2201      	movs	r2, #1
 8006b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b96:	f7fb ffa3 	bl	8002ae0 <HAL_GetTick>
 8006b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b9c:	e008      	b.n	8006bb0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b9e:	f7fb ff9f 	bl	8002ae0 <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d901      	bls.n	8006bb0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e1a1      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bb0:	4b2d      	ldr	r3, [pc, #180]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0302 	and.w	r3, r3, #2
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d0f0      	beq.n	8006b9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bbc:	4b2a      	ldr	r3, [pc, #168]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	695b      	ldr	r3, [r3, #20]
 8006bc8:	00db      	lsls	r3, r3, #3
 8006bca:	4927      	ldr	r1, [pc, #156]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	600b      	str	r3, [r1, #0]
 8006bd0:	e015      	b.n	8006bfe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bd2:	4b26      	ldr	r3, [pc, #152]	@ (8006c6c <HAL_RCC_OscConfig+0x270>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bd8:	f7fb ff82 	bl	8002ae0 <HAL_GetTick>
 8006bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bde:	e008      	b.n	8006bf2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006be0:	f7fb ff7e 	bl	8002ae0 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d901      	bls.n	8006bf2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e180      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0302 	and.w	r3, r3, #2
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1f0      	bne.n	8006be0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0308 	and.w	r3, r3, #8
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d03a      	beq.n	8006c80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d019      	beq.n	8006c46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c12:	4b17      	ldr	r3, [pc, #92]	@ (8006c70 <HAL_RCC_OscConfig+0x274>)
 8006c14:	2201      	movs	r2, #1
 8006c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c18:	f7fb ff62 	bl	8002ae0 <HAL_GetTick>
 8006c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c1e:	e008      	b.n	8006c32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c20:	f7fb ff5e 	bl	8002ae0 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d901      	bls.n	8006c32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e160      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c32:	4b0d      	ldr	r3, [pc, #52]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d0f0      	beq.n	8006c20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006c3e:	2001      	movs	r0, #1
 8006c40:	f000 fad0 	bl	80071e4 <RCC_Delay>
 8006c44:	e01c      	b.n	8006c80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c46:	4b0a      	ldr	r3, [pc, #40]	@ (8006c70 <HAL_RCC_OscConfig+0x274>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c4c:	f7fb ff48 	bl	8002ae0 <HAL_GetTick>
 8006c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c52:	e00f      	b.n	8006c74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c54:	f7fb ff44 	bl	8002ae0 <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d908      	bls.n	8006c74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e146      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
 8006c66:	bf00      	nop
 8006c68:	40021000 	.word	0x40021000
 8006c6c:	42420000 	.word	0x42420000
 8006c70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c74:	4b92      	ldr	r3, [pc, #584]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c78:	f003 0302 	and.w	r3, r3, #2
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1e9      	bne.n	8006c54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0304 	and.w	r3, r3, #4
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 80a6 	beq.w	8006dda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c92:	4b8b      	ldr	r3, [pc, #556]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10d      	bne.n	8006cba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c9e:	4b88      	ldr	r3, [pc, #544]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	4a87      	ldr	r2, [pc, #540]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ca8:	61d3      	str	r3, [r2, #28]
 8006caa:	4b85      	ldr	r3, [pc, #532]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cb2:	60bb      	str	r3, [r7, #8]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cba:	4b82      	ldr	r3, [pc, #520]	@ (8006ec4 <HAL_RCC_OscConfig+0x4c8>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d118      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cc6:	4b7f      	ldr	r3, [pc, #508]	@ (8006ec4 <HAL_RCC_OscConfig+0x4c8>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a7e      	ldr	r2, [pc, #504]	@ (8006ec4 <HAL_RCC_OscConfig+0x4c8>)
 8006ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cd2:	f7fb ff05 	bl	8002ae0 <HAL_GetTick>
 8006cd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cd8:	e008      	b.n	8006cec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cda:	f7fb ff01 	bl	8002ae0 <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	2b64      	cmp	r3, #100	@ 0x64
 8006ce6:	d901      	bls.n	8006cec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e103      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cec:	4b75      	ldr	r3, [pc, #468]	@ (8006ec4 <HAL_RCC_OscConfig+0x4c8>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d0f0      	beq.n	8006cda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d106      	bne.n	8006d0e <HAL_RCC_OscConfig+0x312>
 8006d00:	4b6f      	ldr	r3, [pc, #444]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006d02:	6a1b      	ldr	r3, [r3, #32]
 8006d04:	4a6e      	ldr	r2, [pc, #440]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006d06:	f043 0301 	orr.w	r3, r3, #1
 8006d0a:	6213      	str	r3, [r2, #32]
 8006d0c:	e02d      	b.n	8006d6a <HAL_RCC_OscConfig+0x36e>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10c      	bne.n	8006d30 <HAL_RCC_OscConfig+0x334>
 8006d16:	4b6a      	ldr	r3, [pc, #424]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	4a69      	ldr	r2, [pc, #420]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006d1c:	f023 0301 	bic.w	r3, r3, #1
 8006d20:	6213      	str	r3, [r2, #32]
 8006d22:	4b67      	ldr	r3, [pc, #412]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	4a66      	ldr	r2, [pc, #408]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006d28:	f023 0304 	bic.w	r3, r3, #4
 8006d2c:	6213      	str	r3, [r2, #32]
 8006d2e:	e01c      	b.n	8006d6a <HAL_RCC_OscConfig+0x36e>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	2b05      	cmp	r3, #5
 8006d36:	d10c      	bne.n	8006d52 <HAL_RCC_OscConfig+0x356>
 8006d38:	4b61      	ldr	r3, [pc, #388]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006d3a:	6a1b      	ldr	r3, [r3, #32]
 8006d3c:	4a60      	ldr	r2, [pc, #384]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006d3e:	f043 0304 	orr.w	r3, r3, #4
 8006d42:	6213      	str	r3, [r2, #32]
 8006d44:	4b5e      	ldr	r3, [pc, #376]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	4a5d      	ldr	r2, [pc, #372]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006d4a:	f043 0301 	orr.w	r3, r3, #1
 8006d4e:	6213      	str	r3, [r2, #32]
 8006d50:	e00b      	b.n	8006d6a <HAL_RCC_OscConfig+0x36e>
 8006d52:	4b5b      	ldr	r3, [pc, #364]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	4a5a      	ldr	r2, [pc, #360]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006d58:	f023 0301 	bic.w	r3, r3, #1
 8006d5c:	6213      	str	r3, [r2, #32]
 8006d5e:	4b58      	ldr	r3, [pc, #352]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	4a57      	ldr	r2, [pc, #348]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006d64:	f023 0304 	bic.w	r3, r3, #4
 8006d68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d015      	beq.n	8006d9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d72:	f7fb feb5 	bl	8002ae0 <HAL_GetTick>
 8006d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d78:	e00a      	b.n	8006d90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d7a:	f7fb feb1 	bl	8002ae0 <HAL_GetTick>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d901      	bls.n	8006d90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e0b1      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d90:	4b4b      	ldr	r3, [pc, #300]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006d92:	6a1b      	ldr	r3, [r3, #32]
 8006d94:	f003 0302 	and.w	r3, r3, #2
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d0ee      	beq.n	8006d7a <HAL_RCC_OscConfig+0x37e>
 8006d9c:	e014      	b.n	8006dc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d9e:	f7fb fe9f 	bl	8002ae0 <HAL_GetTick>
 8006da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006da4:	e00a      	b.n	8006dbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006da6:	f7fb fe9b 	bl	8002ae0 <HAL_GetTick>
 8006daa:	4602      	mov	r2, r0
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d901      	bls.n	8006dbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e09b      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dbc:	4b40      	ldr	r3, [pc, #256]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	f003 0302 	and.w	r3, r3, #2
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1ee      	bne.n	8006da6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006dc8:	7dfb      	ldrb	r3, [r7, #23]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d105      	bne.n	8006dda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dce:	4b3c      	ldr	r3, [pc, #240]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	4a3b      	ldr	r2, [pc, #236]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006dd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006dd8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f000 8087 	beq.w	8006ef2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006de4:	4b36      	ldr	r3, [pc, #216]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f003 030c 	and.w	r3, r3, #12
 8006dec:	2b08      	cmp	r3, #8
 8006dee:	d061      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	69db      	ldr	r3, [r3, #28]
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d146      	bne.n	8006e86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006df8:	4b33      	ldr	r3, [pc, #204]	@ (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dfe:	f7fb fe6f 	bl	8002ae0 <HAL_GetTick>
 8006e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e04:	e008      	b.n	8006e18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e06:	f7fb fe6b 	bl	8002ae0 <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d901      	bls.n	8006e18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e06d      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e18:	4b29      	ldr	r3, [pc, #164]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1f0      	bne.n	8006e06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a1b      	ldr	r3, [r3, #32]
 8006e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e2c:	d108      	bne.n	8006e40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006e2e:	4b24      	ldr	r3, [pc, #144]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	4921      	ldr	r1, [pc, #132]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e40:	4b1f      	ldr	r3, [pc, #124]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a19      	ldr	r1, [r3, #32]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e50:	430b      	orrs	r3, r1
 8006e52:	491b      	ldr	r1, [pc, #108]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e58:	4b1b      	ldr	r3, [pc, #108]	@ (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e5e:	f7fb fe3f 	bl	8002ae0 <HAL_GetTick>
 8006e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e64:	e008      	b.n	8006e78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e66:	f7fb fe3b 	bl	8002ae0 <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d901      	bls.n	8006e78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e03d      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e78:	4b11      	ldr	r3, [pc, #68]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d0f0      	beq.n	8006e66 <HAL_RCC_OscConfig+0x46a>
 8006e84:	e035      	b.n	8006ef2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e86:	4b10      	ldr	r3, [pc, #64]	@ (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e8c:	f7fb fe28 	bl	8002ae0 <HAL_GetTick>
 8006e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e92:	e008      	b.n	8006ea6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e94:	f7fb fe24 	bl	8002ae0 <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d901      	bls.n	8006ea6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e026      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ea6:	4b06      	ldr	r3, [pc, #24]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1f0      	bne.n	8006e94 <HAL_RCC_OscConfig+0x498>
 8006eb2:	e01e      	b.n	8006ef2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	69db      	ldr	r3, [r3, #28]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d107      	bne.n	8006ecc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e019      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
 8006ec0:	40021000 	.word	0x40021000
 8006ec4:	40007000 	.word	0x40007000
 8006ec8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8006efc <HAL_RCC_OscConfig+0x500>)
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a1b      	ldr	r3, [r3, #32]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d106      	bne.n	8006eee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d001      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e000      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	40021000 	.word	0x40021000

08006f00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d101      	bne.n	8006f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e0d0      	b.n	80070b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f14:	4b6a      	ldr	r3, [pc, #424]	@ (80070c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0307 	and.w	r3, r3, #7
 8006f1c:	683a      	ldr	r2, [r7, #0]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d910      	bls.n	8006f44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f22:	4b67      	ldr	r3, [pc, #412]	@ (80070c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f023 0207 	bic.w	r2, r3, #7
 8006f2a:	4965      	ldr	r1, [pc, #404]	@ (80070c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f32:	4b63      	ldr	r3, [pc, #396]	@ (80070c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0307 	and.w	r3, r3, #7
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d001      	beq.n	8006f44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e0b8      	b.n	80070b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0302 	and.w	r3, r3, #2
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d020      	beq.n	8006f92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0304 	and.w	r3, r3, #4
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d005      	beq.n	8006f68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f5c:	4b59      	ldr	r3, [pc, #356]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	4a58      	ldr	r2, [pc, #352]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f62:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006f66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0308 	and.w	r3, r3, #8
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d005      	beq.n	8006f80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f74:	4b53      	ldr	r3, [pc, #332]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	4a52      	ldr	r2, [pc, #328]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f7a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006f7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f80:	4b50      	ldr	r3, [pc, #320]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	494d      	ldr	r1, [pc, #308]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d040      	beq.n	8007020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d107      	bne.n	8006fb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fa6:	4b47      	ldr	r3, [pc, #284]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d115      	bne.n	8006fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e07f      	b.n	80070b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d107      	bne.n	8006fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fbe:	4b41      	ldr	r3, [pc, #260]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d109      	bne.n	8006fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e073      	b.n	80070b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fce:	4b3d      	ldr	r3, [pc, #244]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0302 	and.w	r3, r3, #2
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e06b      	b.n	80070b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fde:	4b39      	ldr	r3, [pc, #228]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f023 0203 	bic.w	r2, r3, #3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	4936      	ldr	r1, [pc, #216]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ff0:	f7fb fd76 	bl	8002ae0 <HAL_GetTick>
 8006ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ff6:	e00a      	b.n	800700e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ff8:	f7fb fd72 	bl	8002ae0 <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007006:	4293      	cmp	r3, r2
 8007008:	d901      	bls.n	800700e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e053      	b.n	80070b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800700e:	4b2d      	ldr	r3, [pc, #180]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f003 020c 	and.w	r2, r3, #12
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	429a      	cmp	r2, r3
 800701e:	d1eb      	bne.n	8006ff8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007020:	4b27      	ldr	r3, [pc, #156]	@ (80070c0 <HAL_RCC_ClockConfig+0x1c0>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0307 	and.w	r3, r3, #7
 8007028:	683a      	ldr	r2, [r7, #0]
 800702a:	429a      	cmp	r2, r3
 800702c:	d210      	bcs.n	8007050 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800702e:	4b24      	ldr	r3, [pc, #144]	@ (80070c0 <HAL_RCC_ClockConfig+0x1c0>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f023 0207 	bic.w	r2, r3, #7
 8007036:	4922      	ldr	r1, [pc, #136]	@ (80070c0 <HAL_RCC_ClockConfig+0x1c0>)
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	4313      	orrs	r3, r2
 800703c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800703e:	4b20      	ldr	r3, [pc, #128]	@ (80070c0 <HAL_RCC_ClockConfig+0x1c0>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0307 	and.w	r3, r3, #7
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	429a      	cmp	r2, r3
 800704a:	d001      	beq.n	8007050 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e032      	b.n	80070b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0304 	and.w	r3, r3, #4
 8007058:	2b00      	cmp	r3, #0
 800705a:	d008      	beq.n	800706e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800705c:	4b19      	ldr	r3, [pc, #100]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	4916      	ldr	r1, [pc, #88]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 800706a:	4313      	orrs	r3, r2
 800706c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0308 	and.w	r3, r3, #8
 8007076:	2b00      	cmp	r3, #0
 8007078:	d009      	beq.n	800708e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800707a:	4b12      	ldr	r3, [pc, #72]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	00db      	lsls	r3, r3, #3
 8007088:	490e      	ldr	r1, [pc, #56]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 800708a:	4313      	orrs	r3, r2
 800708c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800708e:	f000 f821 	bl	80070d4 <HAL_RCC_GetSysClockFreq>
 8007092:	4602      	mov	r2, r0
 8007094:	4b0b      	ldr	r3, [pc, #44]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	091b      	lsrs	r3, r3, #4
 800709a:	f003 030f 	and.w	r3, r3, #15
 800709e:	490a      	ldr	r1, [pc, #40]	@ (80070c8 <HAL_RCC_ClockConfig+0x1c8>)
 80070a0:	5ccb      	ldrb	r3, [r1, r3]
 80070a2:	fa22 f303 	lsr.w	r3, r2, r3
 80070a6:	4a09      	ldr	r2, [pc, #36]	@ (80070cc <HAL_RCC_ClockConfig+0x1cc>)
 80070a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80070aa:	4b09      	ldr	r3, [pc, #36]	@ (80070d0 <HAL_RCC_ClockConfig+0x1d0>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7fb fcd4 	bl	8002a5c <HAL_InitTick>

  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	40022000 	.word	0x40022000
 80070c4:	40021000 	.word	0x40021000
 80070c8:	08011d50 	.word	0x08011d50
 80070cc:	20000020 	.word	0x20000020
 80070d0:	20000024 	.word	0x20000024

080070d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b087      	sub	sp, #28
 80070d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80070da:	2300      	movs	r3, #0
 80070dc:	60fb      	str	r3, [r7, #12]
 80070de:	2300      	movs	r3, #0
 80070e0:	60bb      	str	r3, [r7, #8]
 80070e2:	2300      	movs	r3, #0
 80070e4:	617b      	str	r3, [r7, #20]
 80070e6:	2300      	movs	r3, #0
 80070e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80070ee:	4b1e      	ldr	r3, [pc, #120]	@ (8007168 <HAL_RCC_GetSysClockFreq+0x94>)
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f003 030c 	and.w	r3, r3, #12
 80070fa:	2b04      	cmp	r3, #4
 80070fc:	d002      	beq.n	8007104 <HAL_RCC_GetSysClockFreq+0x30>
 80070fe:	2b08      	cmp	r3, #8
 8007100:	d003      	beq.n	800710a <HAL_RCC_GetSysClockFreq+0x36>
 8007102:	e027      	b.n	8007154 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007104:	4b19      	ldr	r3, [pc, #100]	@ (800716c <HAL_RCC_GetSysClockFreq+0x98>)
 8007106:	613b      	str	r3, [r7, #16]
      break;
 8007108:	e027      	b.n	800715a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	0c9b      	lsrs	r3, r3, #18
 800710e:	f003 030f 	and.w	r3, r3, #15
 8007112:	4a17      	ldr	r2, [pc, #92]	@ (8007170 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007114:	5cd3      	ldrb	r3, [r2, r3]
 8007116:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d010      	beq.n	8007144 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007122:	4b11      	ldr	r3, [pc, #68]	@ (8007168 <HAL_RCC_GetSysClockFreq+0x94>)
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	0c5b      	lsrs	r3, r3, #17
 8007128:	f003 0301 	and.w	r3, r3, #1
 800712c:	4a11      	ldr	r2, [pc, #68]	@ (8007174 <HAL_RCC_GetSysClockFreq+0xa0>)
 800712e:	5cd3      	ldrb	r3, [r2, r3]
 8007130:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a0d      	ldr	r2, [pc, #52]	@ (800716c <HAL_RCC_GetSysClockFreq+0x98>)
 8007136:	fb03 f202 	mul.w	r2, r3, r2
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007140:	617b      	str	r3, [r7, #20]
 8007142:	e004      	b.n	800714e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a0c      	ldr	r2, [pc, #48]	@ (8007178 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007148:	fb02 f303 	mul.w	r3, r2, r3
 800714c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	613b      	str	r3, [r7, #16]
      break;
 8007152:	e002      	b.n	800715a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007154:	4b09      	ldr	r3, [pc, #36]	@ (800717c <HAL_RCC_GetSysClockFreq+0xa8>)
 8007156:	613b      	str	r3, [r7, #16]
      break;
 8007158:	bf00      	nop
    }
  }
  return sysclockfreq;
 800715a:	693b      	ldr	r3, [r7, #16]
}
 800715c:	4618      	mov	r0, r3
 800715e:	371c      	adds	r7, #28
 8007160:	46bd      	mov	sp, r7
 8007162:	bc80      	pop	{r7}
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	40021000 	.word	0x40021000
 800716c:	00b71b00 	.word	0x00b71b00
 8007170:	08011d68 	.word	0x08011d68
 8007174:	08011d78 	.word	0x08011d78
 8007178:	003d0900 	.word	0x003d0900
 800717c:	007a1200 	.word	0x007a1200

08007180 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007180:	b480      	push	{r7}
 8007182:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007184:	4b02      	ldr	r3, [pc, #8]	@ (8007190 <HAL_RCC_GetHCLKFreq+0x10>)
 8007186:	681b      	ldr	r3, [r3, #0]
}
 8007188:	4618      	mov	r0, r3
 800718a:	46bd      	mov	sp, r7
 800718c:	bc80      	pop	{r7}
 800718e:	4770      	bx	lr
 8007190:	20000020 	.word	0x20000020

08007194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007198:	f7ff fff2 	bl	8007180 <HAL_RCC_GetHCLKFreq>
 800719c:	4602      	mov	r2, r0
 800719e:	4b05      	ldr	r3, [pc, #20]	@ (80071b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	0a1b      	lsrs	r3, r3, #8
 80071a4:	f003 0307 	and.w	r3, r3, #7
 80071a8:	4903      	ldr	r1, [pc, #12]	@ (80071b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071aa:	5ccb      	ldrb	r3, [r1, r3]
 80071ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	40021000 	.word	0x40021000
 80071b8:	08011d60 	.word	0x08011d60

080071bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80071c0:	f7ff ffde 	bl	8007180 <HAL_RCC_GetHCLKFreq>
 80071c4:	4602      	mov	r2, r0
 80071c6:	4b05      	ldr	r3, [pc, #20]	@ (80071dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	0adb      	lsrs	r3, r3, #11
 80071cc:	f003 0307 	and.w	r3, r3, #7
 80071d0:	4903      	ldr	r1, [pc, #12]	@ (80071e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071d2:	5ccb      	ldrb	r3, [r1, r3]
 80071d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071d8:	4618      	mov	r0, r3
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	40021000 	.word	0x40021000
 80071e0:	08011d60 	.word	0x08011d60

080071e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80071ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007218 <RCC_Delay+0x34>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a0a      	ldr	r2, [pc, #40]	@ (800721c <RCC_Delay+0x38>)
 80071f2:	fba2 2303 	umull	r2, r3, r2, r3
 80071f6:	0a5b      	lsrs	r3, r3, #9
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	fb02 f303 	mul.w	r3, r2, r3
 80071fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007200:	bf00      	nop
  }
  while (Delay --);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	1e5a      	subs	r2, r3, #1
 8007206:	60fa      	str	r2, [r7, #12]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1f9      	bne.n	8007200 <RCC_Delay+0x1c>
}
 800720c:	bf00      	nop
 800720e:	bf00      	nop
 8007210:	3714      	adds	r7, #20
 8007212:	46bd      	mov	sp, r7
 8007214:	bc80      	pop	{r7}
 8007216:	4770      	bx	lr
 8007218:	20000020 	.word	0x20000020
 800721c:	10624dd3 	.word	0x10624dd3

08007220 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007228:	2300      	movs	r3, #0
 800722a:	613b      	str	r3, [r7, #16]
 800722c:	2300      	movs	r3, #0
 800722e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	2b00      	cmp	r3, #0
 800723a:	d07d      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800723c:	2300      	movs	r3, #0
 800723e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007240:	4b4f      	ldr	r3, [pc, #316]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007242:	69db      	ldr	r3, [r3, #28]
 8007244:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10d      	bne.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800724c:	4b4c      	ldr	r3, [pc, #304]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800724e:	69db      	ldr	r3, [r3, #28]
 8007250:	4a4b      	ldr	r2, [pc, #300]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007252:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007256:	61d3      	str	r3, [r2, #28]
 8007258:	4b49      	ldr	r3, [pc, #292]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800725a:	69db      	ldr	r3, [r3, #28]
 800725c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007260:	60bb      	str	r3, [r7, #8]
 8007262:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007264:	2301      	movs	r3, #1
 8007266:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007268:	4b46      	ldr	r3, [pc, #280]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007270:	2b00      	cmp	r3, #0
 8007272:	d118      	bne.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007274:	4b43      	ldr	r3, [pc, #268]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a42      	ldr	r2, [pc, #264]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800727a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800727e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007280:	f7fb fc2e 	bl	8002ae0 <HAL_GetTick>
 8007284:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007286:	e008      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007288:	f7fb fc2a 	bl	8002ae0 <HAL_GetTick>
 800728c:	4602      	mov	r2, r0
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	2b64      	cmp	r3, #100	@ 0x64
 8007294:	d901      	bls.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007296:	2303      	movs	r3, #3
 8007298:	e06d      	b.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800729a:	4b3a      	ldr	r3, [pc, #232]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d0f0      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80072a6:	4b36      	ldr	r3, [pc, #216]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d02e      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d027      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072c4:	4b2e      	ldr	r3, [pc, #184]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072c6:	6a1b      	ldr	r3, [r3, #32]
 80072c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80072ce:	4b2e      	ldr	r3, [pc, #184]	@ (8007388 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80072d0:	2201      	movs	r2, #1
 80072d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80072d4:	4b2c      	ldr	r3, [pc, #176]	@ (8007388 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80072d6:	2200      	movs	r2, #0
 80072d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80072da:	4a29      	ldr	r2, [pc, #164]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d014      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072ea:	f7fb fbf9 	bl	8002ae0 <HAL_GetTick>
 80072ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072f0:	e00a      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072f2:	f7fb fbf5 	bl	8002ae0 <HAL_GetTick>
 80072f6:	4602      	mov	r2, r0
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007300:	4293      	cmp	r3, r2
 8007302:	d901      	bls.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e036      	b.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007308:	4b1d      	ldr	r3, [pc, #116]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800730a:	6a1b      	ldr	r3, [r3, #32]
 800730c:	f003 0302 	and.w	r3, r3, #2
 8007310:	2b00      	cmp	r3, #0
 8007312:	d0ee      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007314:	4b1a      	ldr	r3, [pc, #104]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007316:	6a1b      	ldr	r3, [r3, #32]
 8007318:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	4917      	ldr	r1, [pc, #92]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007322:	4313      	orrs	r3, r2
 8007324:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007326:	7dfb      	ldrb	r3, [r7, #23]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d105      	bne.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800732c:	4b14      	ldr	r3, [pc, #80]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800732e:	69db      	ldr	r3, [r3, #28]
 8007330:	4a13      	ldr	r2, [pc, #76]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007332:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007336:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b00      	cmp	r3, #0
 8007342:	d008      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007344:	4b0e      	ldr	r3, [pc, #56]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	490b      	ldr	r1, [pc, #44]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007352:	4313      	orrs	r3, r2
 8007354:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 0310 	and.w	r3, r3, #16
 800735e:	2b00      	cmp	r3, #0
 8007360:	d008      	beq.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007362:	4b07      	ldr	r3, [pc, #28]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	4904      	ldr	r1, [pc, #16]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007370:	4313      	orrs	r3, r2
 8007372:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3718      	adds	r7, #24
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	40021000 	.word	0x40021000
 8007384:	40007000 	.word	0x40007000
 8007388:	42420440 	.word	0x42420440

0800738c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e076      	b.n	800748c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d108      	bne.n	80073b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073ae:	d009      	beq.n	80073c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	61da      	str	r2, [r3, #28]
 80073b6:	e005      	b.n	80073c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d106      	bne.n	80073e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7fa ff72 	bl	80022c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2202      	movs	r2, #2
 80073e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800740c:	431a      	orrs	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007416:	431a      	orrs	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	f003 0302 	and.w	r3, r3, #2
 8007420:	431a      	orrs	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	431a      	orrs	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007434:	431a      	orrs	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800743e:	431a      	orrs	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a1b      	ldr	r3, [r3, #32]
 8007444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007448:	ea42 0103 	orr.w	r1, r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007450:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	430a      	orrs	r2, r1
 800745a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	0c1a      	lsrs	r2, r3, #16
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f002 0204 	and.w	r2, r2, #4
 800746a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	69da      	ldr	r2, [r3, #28]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800747a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d101      	bne.n	80074a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e041      	b.n	800752a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d106      	bne.n	80074c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f7fb f932 	bl	8002724 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2202      	movs	r2, #2
 80074c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	3304      	adds	r3, #4
 80074d0:	4619      	mov	r1, r3
 80074d2:	4610      	mov	r0, r2
 80074d4:	f000 fabe 	bl	8007a54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
	...

08007534 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b01      	cmp	r3, #1
 8007546:	d001      	beq.n	800754c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e032      	b.n	80075b2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2202      	movs	r2, #2
 8007550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a18      	ldr	r2, [pc, #96]	@ (80075bc <HAL_TIM_Base_Start+0x88>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d00e      	beq.n	800757c <HAL_TIM_Base_Start+0x48>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007566:	d009      	beq.n	800757c <HAL_TIM_Base_Start+0x48>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a14      	ldr	r2, [pc, #80]	@ (80075c0 <HAL_TIM_Base_Start+0x8c>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d004      	beq.n	800757c <HAL_TIM_Base_Start+0x48>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a13      	ldr	r2, [pc, #76]	@ (80075c4 <HAL_TIM_Base_Start+0x90>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d111      	bne.n	80075a0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f003 0307 	and.w	r3, r3, #7
 8007586:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2b06      	cmp	r3, #6
 800758c:	d010      	beq.n	80075b0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f042 0201 	orr.w	r2, r2, #1
 800759c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800759e:	e007      	b.n	80075b0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f042 0201 	orr.w	r2, r2, #1
 80075ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bc80      	pop	{r7}
 80075ba:	4770      	bx	lr
 80075bc:	40012c00 	.word	0x40012c00
 80075c0:	40000400 	.word	0x40000400
 80075c4:	40000800 	.word	0x40000800

080075c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d001      	beq.n	80075e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e03a      	b.n	8007656 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2202      	movs	r2, #2
 80075e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68da      	ldr	r2, [r3, #12]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f042 0201 	orr.w	r2, r2, #1
 80075f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a18      	ldr	r2, [pc, #96]	@ (8007660 <HAL_TIM_Base_Start_IT+0x98>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d00e      	beq.n	8007620 <HAL_TIM_Base_Start_IT+0x58>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800760a:	d009      	beq.n	8007620 <HAL_TIM_Base_Start_IT+0x58>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a14      	ldr	r2, [pc, #80]	@ (8007664 <HAL_TIM_Base_Start_IT+0x9c>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d004      	beq.n	8007620 <HAL_TIM_Base_Start_IT+0x58>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a13      	ldr	r2, [pc, #76]	@ (8007668 <HAL_TIM_Base_Start_IT+0xa0>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d111      	bne.n	8007644 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f003 0307 	and.w	r3, r3, #7
 800762a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2b06      	cmp	r3, #6
 8007630:	d010      	beq.n	8007654 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f042 0201 	orr.w	r2, r2, #1
 8007640:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007642:	e007      	b.n	8007654 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f042 0201 	orr.w	r2, r2, #1
 8007652:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3714      	adds	r7, #20
 800765a:	46bd      	mov	sp, r7
 800765c:	bc80      	pop	{r7}
 800765e:	4770      	bx	lr
 8007660:	40012c00 	.word	0x40012c00
 8007664:	40000400 	.word	0x40000400
 8007668:	40000800 	.word	0x40000800

0800766c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	f003 0302 	and.w	r3, r3, #2
 800767e:	2b02      	cmp	r3, #2
 8007680:	d122      	bne.n	80076c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	f003 0302 	and.w	r3, r3, #2
 800768c:	2b02      	cmp	r3, #2
 800768e:	d11b      	bne.n	80076c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f06f 0202 	mvn.w	r2, #2
 8007698:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	f003 0303 	and.w	r3, r3, #3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d003      	beq.n	80076b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f9b4 	bl	8007a1c <HAL_TIM_IC_CaptureCallback>
 80076b4:	e005      	b.n	80076c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f9a7 	bl	8007a0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f9b6 	bl	8007a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	f003 0304 	and.w	r3, r3, #4
 80076d2:	2b04      	cmp	r3, #4
 80076d4:	d122      	bne.n	800771c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	f003 0304 	and.w	r3, r3, #4
 80076e0:	2b04      	cmp	r3, #4
 80076e2:	d11b      	bne.n	800771c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f06f 0204 	mvn.w	r2, #4
 80076ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2202      	movs	r2, #2
 80076f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d003      	beq.n	800770a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f98a 	bl	8007a1c <HAL_TIM_IC_CaptureCallback>
 8007708:	e005      	b.n	8007716 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f97d 	bl	8007a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f98c 	bl	8007a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	f003 0308 	and.w	r3, r3, #8
 8007726:	2b08      	cmp	r3, #8
 8007728:	d122      	bne.n	8007770 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	f003 0308 	and.w	r3, r3, #8
 8007734:	2b08      	cmp	r3, #8
 8007736:	d11b      	bne.n	8007770 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f06f 0208 	mvn.w	r2, #8
 8007740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2204      	movs	r2, #4
 8007746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	f003 0303 	and.w	r3, r3, #3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d003      	beq.n	800775e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f960 	bl	8007a1c <HAL_TIM_IC_CaptureCallback>
 800775c:	e005      	b.n	800776a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f953 	bl	8007a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 f962 	bl	8007a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	f003 0310 	and.w	r3, r3, #16
 800777a:	2b10      	cmp	r3, #16
 800777c:	d122      	bne.n	80077c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	f003 0310 	and.w	r3, r3, #16
 8007788:	2b10      	cmp	r3, #16
 800778a:	d11b      	bne.n	80077c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f06f 0210 	mvn.w	r2, #16
 8007794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2208      	movs	r2, #8
 800779a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	69db      	ldr	r3, [r3, #28]
 80077a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d003      	beq.n	80077b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f936 	bl	8007a1c <HAL_TIM_IC_CaptureCallback>
 80077b0:	e005      	b.n	80077be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f929 	bl	8007a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 f938 	bl	8007a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d10e      	bne.n	80077f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d107      	bne.n	80077f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f06f 0201 	mvn.w	r2, #1
 80077e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7fa fd16 	bl	800221c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077fa:	2b80      	cmp	r3, #128	@ 0x80
 80077fc:	d10e      	bne.n	800781c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007808:	2b80      	cmp	r3, #128	@ 0x80
 800780a:	d107      	bne.n	800781c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fa7b 	bl	8007d12 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007826:	2b40      	cmp	r3, #64	@ 0x40
 8007828:	d10e      	bne.n	8007848 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007834:	2b40      	cmp	r3, #64	@ 0x40
 8007836:	d107      	bne.n	8007848 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f8fc 	bl	8007a40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	f003 0320 	and.w	r3, r3, #32
 8007852:	2b20      	cmp	r3, #32
 8007854:	d10e      	bne.n	8007874 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	f003 0320 	and.w	r3, r3, #32
 8007860:	2b20      	cmp	r3, #32
 8007862:	d107      	bne.n	8007874 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f06f 0220 	mvn.w	r2, #32
 800786c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fa46 	bl	8007d00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007874:	bf00      	nop
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007886:	2300      	movs	r3, #0
 8007888:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007890:	2b01      	cmp	r3, #1
 8007892:	d101      	bne.n	8007898 <HAL_TIM_ConfigClockSource+0x1c>
 8007894:	2302      	movs	r3, #2
 8007896:	e0b4      	b.n	8007a02 <HAL_TIM_ConfigClockSource+0x186>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2202      	movs	r2, #2
 80078a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80078b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80078be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078d0:	d03e      	beq.n	8007950 <HAL_TIM_ConfigClockSource+0xd4>
 80078d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078d6:	f200 8087 	bhi.w	80079e8 <HAL_TIM_ConfigClockSource+0x16c>
 80078da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078de:	f000 8086 	beq.w	80079ee <HAL_TIM_ConfigClockSource+0x172>
 80078e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078e6:	d87f      	bhi.n	80079e8 <HAL_TIM_ConfigClockSource+0x16c>
 80078e8:	2b70      	cmp	r3, #112	@ 0x70
 80078ea:	d01a      	beq.n	8007922 <HAL_TIM_ConfigClockSource+0xa6>
 80078ec:	2b70      	cmp	r3, #112	@ 0x70
 80078ee:	d87b      	bhi.n	80079e8 <HAL_TIM_ConfigClockSource+0x16c>
 80078f0:	2b60      	cmp	r3, #96	@ 0x60
 80078f2:	d050      	beq.n	8007996 <HAL_TIM_ConfigClockSource+0x11a>
 80078f4:	2b60      	cmp	r3, #96	@ 0x60
 80078f6:	d877      	bhi.n	80079e8 <HAL_TIM_ConfigClockSource+0x16c>
 80078f8:	2b50      	cmp	r3, #80	@ 0x50
 80078fa:	d03c      	beq.n	8007976 <HAL_TIM_ConfigClockSource+0xfa>
 80078fc:	2b50      	cmp	r3, #80	@ 0x50
 80078fe:	d873      	bhi.n	80079e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007900:	2b40      	cmp	r3, #64	@ 0x40
 8007902:	d058      	beq.n	80079b6 <HAL_TIM_ConfigClockSource+0x13a>
 8007904:	2b40      	cmp	r3, #64	@ 0x40
 8007906:	d86f      	bhi.n	80079e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007908:	2b30      	cmp	r3, #48	@ 0x30
 800790a:	d064      	beq.n	80079d6 <HAL_TIM_ConfigClockSource+0x15a>
 800790c:	2b30      	cmp	r3, #48	@ 0x30
 800790e:	d86b      	bhi.n	80079e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007910:	2b20      	cmp	r3, #32
 8007912:	d060      	beq.n	80079d6 <HAL_TIM_ConfigClockSource+0x15a>
 8007914:	2b20      	cmp	r3, #32
 8007916:	d867      	bhi.n	80079e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007918:	2b00      	cmp	r3, #0
 800791a:	d05c      	beq.n	80079d6 <HAL_TIM_ConfigClockSource+0x15a>
 800791c:	2b10      	cmp	r3, #16
 800791e:	d05a      	beq.n	80079d6 <HAL_TIM_ConfigClockSource+0x15a>
 8007920:	e062      	b.n	80079e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007932:	f000 f968 	bl	8007c06 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007944:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68ba      	ldr	r2, [r7, #8]
 800794c:	609a      	str	r2, [r3, #8]
      break;
 800794e:	e04f      	b.n	80079f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007960:	f000 f951 	bl	8007c06 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	689a      	ldr	r2, [r3, #8]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007972:	609a      	str	r2, [r3, #8]
      break;
 8007974:	e03c      	b.n	80079f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007982:	461a      	mov	r2, r3
 8007984:	f000 f8c8 	bl	8007b18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2150      	movs	r1, #80	@ 0x50
 800798e:	4618      	mov	r0, r3
 8007990:	f000 f91f 	bl	8007bd2 <TIM_ITRx_SetConfig>
      break;
 8007994:	e02c      	b.n	80079f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80079a2:	461a      	mov	r2, r3
 80079a4:	f000 f8e6 	bl	8007b74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2160      	movs	r1, #96	@ 0x60
 80079ae:	4618      	mov	r0, r3
 80079b0:	f000 f90f 	bl	8007bd2 <TIM_ITRx_SetConfig>
      break;
 80079b4:	e01c      	b.n	80079f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079c2:	461a      	mov	r2, r3
 80079c4:	f000 f8a8 	bl	8007b18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2140      	movs	r1, #64	@ 0x40
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 f8ff 	bl	8007bd2 <TIM_ITRx_SetConfig>
      break;
 80079d4:	e00c      	b.n	80079f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4619      	mov	r1, r3
 80079e0:	4610      	mov	r0, r2
 80079e2:	f000 f8f6 	bl	8007bd2 <TIM_ITRx_SetConfig>
      break;
 80079e6:	e003      	b.n	80079f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	73fb      	strb	r3, [r7, #15]
      break;
 80079ec:	e000      	b.n	80079f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80079ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b083      	sub	sp, #12
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a12:	bf00      	nop
 8007a14:	370c      	adds	r7, #12
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bc80      	pop	{r7}
 8007a1a:	4770      	bx	lr

08007a1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bc80      	pop	{r7}
 8007a2c:	4770      	bx	lr

08007a2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a2e:	b480      	push	{r7}
 8007a30:	b083      	sub	sp, #12
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a36:	bf00      	nop
 8007a38:	370c      	adds	r7, #12
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bc80      	pop	{r7}
 8007a3e:	4770      	bx	lr

08007a40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a48:	bf00      	nop
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bc80      	pop	{r7}
 8007a50:	4770      	bx	lr
	...

08007a54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a29      	ldr	r2, [pc, #164]	@ (8007b0c <TIM_Base_SetConfig+0xb8>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d00b      	beq.n	8007a84 <TIM_Base_SetConfig+0x30>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a72:	d007      	beq.n	8007a84 <TIM_Base_SetConfig+0x30>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a26      	ldr	r2, [pc, #152]	@ (8007b10 <TIM_Base_SetConfig+0xbc>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d003      	beq.n	8007a84 <TIM_Base_SetConfig+0x30>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a25      	ldr	r2, [pc, #148]	@ (8007b14 <TIM_Base_SetConfig+0xc0>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d108      	bne.n	8007a96 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a1c      	ldr	r2, [pc, #112]	@ (8007b0c <TIM_Base_SetConfig+0xb8>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d00b      	beq.n	8007ab6 <TIM_Base_SetConfig+0x62>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aa4:	d007      	beq.n	8007ab6 <TIM_Base_SetConfig+0x62>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a19      	ldr	r2, [pc, #100]	@ (8007b10 <TIM_Base_SetConfig+0xbc>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d003      	beq.n	8007ab6 <TIM_Base_SetConfig+0x62>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a18      	ldr	r2, [pc, #96]	@ (8007b14 <TIM_Base_SetConfig+0xc0>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d108      	bne.n	8007ac8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007abc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	689a      	ldr	r2, [r3, #8]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a07      	ldr	r2, [pc, #28]	@ (8007b0c <TIM_Base_SetConfig+0xb8>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d103      	bne.n	8007afc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	691a      	ldr	r2, [r3, #16]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	615a      	str	r2, [r3, #20]
}
 8007b02:	bf00      	nop
 8007b04:	3714      	adds	r7, #20
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bc80      	pop	{r7}
 8007b0a:	4770      	bx	lr
 8007b0c:	40012c00 	.word	0x40012c00
 8007b10:	40000400 	.word	0x40000400
 8007b14:	40000800 	.word	0x40000800

08007b18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b087      	sub	sp, #28
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6a1b      	ldr	r3, [r3, #32]
 8007b28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6a1b      	ldr	r3, [r3, #32]
 8007b2e:	f023 0201 	bic.w	r2, r3, #1
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	011b      	lsls	r3, r3, #4
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	f023 030a 	bic.w	r3, r3, #10
 8007b54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	621a      	str	r2, [r3, #32]
}
 8007b6a:	bf00      	nop
 8007b6c:	371c      	adds	r7, #28
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bc80      	pop	{r7}
 8007b72:	4770      	bx	lr

08007b74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b087      	sub	sp, #28
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6a1b      	ldr	r3, [r3, #32]
 8007b84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	f023 0210 	bic.w	r2, r3, #16
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007b9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	031b      	lsls	r3, r3, #12
 8007ba4:	693a      	ldr	r2, [r7, #16]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007bb0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	011b      	lsls	r3, r3, #4
 8007bb6:	697a      	ldr	r2, [r7, #20]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	693a      	ldr	r2, [r7, #16]
 8007bc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	697a      	ldr	r2, [r7, #20]
 8007bc6:	621a      	str	r2, [r3, #32]
}
 8007bc8:	bf00      	nop
 8007bca:	371c      	adds	r7, #28
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bc80      	pop	{r7}
 8007bd0:	4770      	bx	lr

08007bd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b085      	sub	sp, #20
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007be8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bea:	683a      	ldr	r2, [r7, #0]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	f043 0307 	orr.w	r3, r3, #7
 8007bf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	609a      	str	r2, [r3, #8]
}
 8007bfc:	bf00      	nop
 8007bfe:	3714      	adds	r7, #20
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bc80      	pop	{r7}
 8007c04:	4770      	bx	lr

08007c06 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c06:	b480      	push	{r7}
 8007c08:	b087      	sub	sp, #28
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	60f8      	str	r0, [r7, #12]
 8007c0e:	60b9      	str	r1, [r7, #8]
 8007c10:	607a      	str	r2, [r7, #4]
 8007c12:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	021a      	lsls	r2, r3, #8
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	431a      	orrs	r2, r3
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	609a      	str	r2, [r3, #8]
}
 8007c3a:	bf00      	nop
 8007c3c:	371c      	adds	r7, #28
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bc80      	pop	{r7}
 8007c42:	4770      	bx	lr

08007c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d101      	bne.n	8007c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c58:	2302      	movs	r3, #2
 8007c5a:	e046      	b.n	8007cea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2202      	movs	r2, #2
 8007c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a16      	ldr	r2, [pc, #88]	@ (8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d00e      	beq.n	8007cbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ca8:	d009      	beq.n	8007cbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a12      	ldr	r2, [pc, #72]	@ (8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d004      	beq.n	8007cbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a10      	ldr	r2, [pc, #64]	@ (8007cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d10c      	bne.n	8007cd8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68ba      	ldr	r2, [r7, #8]
 8007cd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3714      	adds	r7, #20
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bc80      	pop	{r7}
 8007cf2:	4770      	bx	lr
 8007cf4:	40012c00 	.word	0x40012c00
 8007cf8:	40000400 	.word	0x40000400
 8007cfc:	40000800 	.word	0x40000800

08007d00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bc80      	pop	{r7}
 8007d10:	4770      	bx	lr

08007d12 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b083      	sub	sp, #12
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d1a:	bf00      	nop
 8007d1c:	370c      	adds	r7, #12
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bc80      	pop	{r7}
 8007d22:	4770      	bx	lr

08007d24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d101      	bne.n	8007d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e042      	b.n	8007dbc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d106      	bne.n	8007d50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7fa fd6e 	bl	800282c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2224      	movs	r2, #36	@ 0x24
 8007d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68da      	ldr	r2, [r3, #12]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 ffb3 	bl	8008cd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	691a      	ldr	r2, [r3, #16]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	695a      	ldr	r2, [r3, #20]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68da      	ldr	r2, [r3, #12]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2220      	movs	r2, #32
 8007da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2220      	movs	r2, #32
 8007db0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b08a      	sub	sp, #40	@ 0x28
 8007dc8:	af02      	add	r7, sp, #8
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	603b      	str	r3, [r7, #0]
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	2b20      	cmp	r3, #32
 8007de2:	d16d      	bne.n	8007ec0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d002      	beq.n	8007df0 <HAL_UART_Transmit+0x2c>
 8007dea:	88fb      	ldrh	r3, [r7, #6]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d101      	bne.n	8007df4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e066      	b.n	8007ec2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2221      	movs	r2, #33	@ 0x21
 8007dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e02:	f7fa fe6d 	bl	8002ae0 <HAL_GetTick>
 8007e06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	88fa      	ldrh	r2, [r7, #6]
 8007e0c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	88fa      	ldrh	r2, [r7, #6]
 8007e12:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e1c:	d108      	bne.n	8007e30 <HAL_UART_Transmit+0x6c>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d104      	bne.n	8007e30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007e26:	2300      	movs	r3, #0
 8007e28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	61bb      	str	r3, [r7, #24]
 8007e2e:	e003      	b.n	8007e38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e34:	2300      	movs	r3, #0
 8007e36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e38:	e02a      	b.n	8007e90 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	2200      	movs	r2, #0
 8007e42:	2180      	movs	r1, #128	@ 0x80
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f000 fc41 	bl	80086cc <UART_WaitOnFlagUntilTimeout>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d001      	beq.n	8007e54 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8007e50:	2303      	movs	r3, #3
 8007e52:	e036      	b.n	8007ec2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d10b      	bne.n	8007e72 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	881b      	ldrh	r3, [r3, #0]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	3302      	adds	r3, #2
 8007e6e:	61bb      	str	r3, [r7, #24]
 8007e70:	e007      	b.n	8007e82 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	781a      	ldrb	r2, [r3, #0]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1cf      	bne.n	8007e3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	2140      	movs	r1, #64	@ 0x40
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f000 fc11 	bl	80086cc <UART_WaitOnFlagUntilTimeout>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d001      	beq.n	8007eb4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	e006      	b.n	8007ec2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2220      	movs	r2, #32
 8007eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	e000      	b.n	8007ec2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007ec0:	2302      	movs	r3, #2
  }
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3720      	adds	r7, #32
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b084      	sub	sp, #16
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	60f8      	str	r0, [r7, #12]
 8007ed2:	60b9      	str	r1, [r7, #8]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	2b20      	cmp	r3, #32
 8007ee2:	d112      	bne.n	8007f0a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d002      	beq.n	8007ef0 <HAL_UART_Receive_IT+0x26>
 8007eea:	88fb      	ldrh	r3, [r7, #6]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d101      	bne.n	8007ef4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e00b      	b.n	8007f0c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007efa:	88fb      	ldrh	r3, [r7, #6]
 8007efc:	461a      	mov	r2, r3
 8007efe:	68b9      	ldr	r1, [r7, #8]
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f000 fc51 	bl	80087a8 <UART_Start_Receive_IT>
 8007f06:	4603      	mov	r3, r0
 8007f08:	e000      	b.n	8007f0c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007f0a:	2302      	movs	r3, #2
  }
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	4613      	mov	r3, r2
 8007f20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b20      	cmp	r3, #32
 8007f2c:	d112      	bne.n	8007f54 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d002      	beq.n	8007f3a <HAL_UART_Receive_DMA+0x26>
 8007f34:	88fb      	ldrh	r3, [r7, #6]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e00b      	b.n	8007f56 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007f44:	88fb      	ldrh	r3, [r7, #6]
 8007f46:	461a      	mov	r2, r3
 8007f48:	68b9      	ldr	r1, [r7, #8]
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f000 fc66 	bl	800881c <UART_Start_Receive_DMA>
 8007f50:	4603      	mov	r3, r0
 8007f52:	e000      	b.n	8007f56 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007f54:	2302      	movs	r3, #2
  }
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
	...

08007f60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b0ba      	sub	sp, #232	@ 0xe8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007f86:	2300      	movs	r3, #0
 8007f88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f96:	f003 030f 	and.w	r3, r3, #15
 8007f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007f9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d10f      	bne.n	8007fc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007faa:	f003 0320 	and.w	r3, r3, #32
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d009      	beq.n	8007fc6 <HAL_UART_IRQHandler+0x66>
 8007fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fb6:	f003 0320 	and.w	r3, r3, #32
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d003      	beq.n	8007fc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fdca 	bl	8008b58 <UART_Receive_IT>
      return;
 8007fc4:	e25b      	b.n	800847e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007fc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	f000 80de 	beq.w	800818c <HAL_UART_IRQHandler+0x22c>
 8007fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fd4:	f003 0301 	and.w	r3, r3, #1
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d106      	bne.n	8007fea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fe0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 80d1 	beq.w	800818c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fee:	f003 0301 	and.w	r3, r3, #1
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00b      	beq.n	800800e <HAL_UART_IRQHandler+0xae>
 8007ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d005      	beq.n	800800e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008006:	f043 0201 	orr.w	r2, r3, #1
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800800e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008012:	f003 0304 	and.w	r3, r3, #4
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00b      	beq.n	8008032 <HAL_UART_IRQHandler+0xd2>
 800801a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800801e:	f003 0301 	and.w	r3, r3, #1
 8008022:	2b00      	cmp	r3, #0
 8008024:	d005      	beq.n	8008032 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800802a:	f043 0202 	orr.w	r2, r3, #2
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008036:	f003 0302 	and.w	r3, r3, #2
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00b      	beq.n	8008056 <HAL_UART_IRQHandler+0xf6>
 800803e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008042:	f003 0301 	and.w	r3, r3, #1
 8008046:	2b00      	cmp	r3, #0
 8008048:	d005      	beq.n	8008056 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800804e:	f043 0204 	orr.w	r2, r3, #4
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800805a:	f003 0308 	and.w	r3, r3, #8
 800805e:	2b00      	cmp	r3, #0
 8008060:	d011      	beq.n	8008086 <HAL_UART_IRQHandler+0x126>
 8008062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008066:	f003 0320 	and.w	r3, r3, #32
 800806a:	2b00      	cmp	r3, #0
 800806c:	d105      	bne.n	800807a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800806e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008072:	f003 0301 	and.w	r3, r3, #1
 8008076:	2b00      	cmp	r3, #0
 8008078:	d005      	beq.n	8008086 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800807e:	f043 0208 	orr.w	r2, r3, #8
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800808a:	2b00      	cmp	r3, #0
 800808c:	f000 81f2 	beq.w	8008474 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008094:	f003 0320 	and.w	r3, r3, #32
 8008098:	2b00      	cmp	r3, #0
 800809a:	d008      	beq.n	80080ae <HAL_UART_IRQHandler+0x14e>
 800809c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080a0:	f003 0320 	and.w	r3, r3, #32
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d002      	beq.n	80080ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 fd55 	bl	8008b58 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	695b      	ldr	r3, [r3, #20]
 80080b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	bf14      	ite	ne
 80080bc:	2301      	movne	r3, #1
 80080be:	2300      	moveq	r3, #0
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ca:	f003 0308 	and.w	r3, r3, #8
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d103      	bne.n	80080da <HAL_UART_IRQHandler+0x17a>
 80080d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d04f      	beq.n	800817a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 fc5f 	bl	800899e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	695b      	ldr	r3, [r3, #20]
 80080e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d041      	beq.n	8008172 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	3314      	adds	r3, #20
 80080f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80080fc:	e853 3f00 	ldrex	r3, [r3]
 8008100:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008104:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008108:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800810c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	3314      	adds	r3, #20
 8008116:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800811a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800811e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008122:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008126:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800812a:	e841 2300 	strex	r3, r2, [r1]
 800812e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1d9      	bne.n	80080ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800813e:	2b00      	cmp	r3, #0
 8008140:	d013      	beq.n	800816a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008146:	4a7e      	ldr	r2, [pc, #504]	@ (8008340 <HAL_UART_IRQHandler+0x3e0>)
 8008148:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800814e:	4618      	mov	r0, r3
 8008150:	f7fb fac4 	bl	80036dc <HAL_DMA_Abort_IT>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d016      	beq.n	8008188 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800815e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008164:	4610      	mov	r0, r2
 8008166:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008168:	e00e      	b.n	8008188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f99c 	bl	80084a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008170:	e00a      	b.n	8008188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f998 	bl	80084a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008178:	e006      	b.n	8008188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f994 	bl	80084a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008186:	e175      	b.n	8008474 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008188:	bf00      	nop
    return;
 800818a:	e173      	b.n	8008474 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008190:	2b01      	cmp	r3, #1
 8008192:	f040 814f 	bne.w	8008434 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800819a:	f003 0310 	and.w	r3, r3, #16
 800819e:	2b00      	cmp	r3, #0
 80081a0:	f000 8148 	beq.w	8008434 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80081a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081a8:	f003 0310 	and.w	r3, r3, #16
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f000 8141 	beq.w	8008434 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081b2:	2300      	movs	r3, #0
 80081b4:	60bb      	str	r3, [r7, #8]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	60bb      	str	r3, [r7, #8]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	60bb      	str	r3, [r7, #8]
 80081c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f000 80b6 	beq.w	8008344 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80081e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f000 8145 	beq.w	8008478 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80081f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80081f6:	429a      	cmp	r2, r3
 80081f8:	f080 813e 	bcs.w	8008478 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008202:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	2b20      	cmp	r3, #32
 800820c:	f000 8088 	beq.w	8008320 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	330c      	adds	r3, #12
 8008216:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800821e:	e853 3f00 	ldrex	r3, [r3]
 8008222:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008226:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800822a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800822e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	330c      	adds	r3, #12
 8008238:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800823c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008240:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008244:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008248:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800824c:	e841 2300 	strex	r3, r2, [r1]
 8008250:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008254:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008258:	2b00      	cmp	r3, #0
 800825a:	d1d9      	bne.n	8008210 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	3314      	adds	r3, #20
 8008262:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008264:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008266:	e853 3f00 	ldrex	r3, [r3]
 800826a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800826c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800826e:	f023 0301 	bic.w	r3, r3, #1
 8008272:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	3314      	adds	r3, #20
 800827c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008280:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008284:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008286:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008288:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800828c:	e841 2300 	strex	r3, r2, [r1]
 8008290:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008292:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008294:	2b00      	cmp	r3, #0
 8008296:	d1e1      	bne.n	800825c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	3314      	adds	r3, #20
 800829e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80082a2:	e853 3f00 	ldrex	r3, [r3]
 80082a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80082a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80082aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	3314      	adds	r3, #20
 80082b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80082bc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80082be:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80082c2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80082c4:	e841 2300 	strex	r3, r2, [r1]
 80082c8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80082ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1e3      	bne.n	8008298 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2220      	movs	r2, #32
 80082d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	330c      	adds	r3, #12
 80082e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082e8:	e853 3f00 	ldrex	r3, [r3]
 80082ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80082ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082f0:	f023 0310 	bic.w	r3, r3, #16
 80082f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	330c      	adds	r3, #12
 80082fe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008302:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008304:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008306:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008308:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800830a:	e841 2300 	strex	r3, r2, [r1]
 800830e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008310:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1e3      	bne.n	80082de <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800831a:	4618      	mov	r0, r3
 800831c:	f7fb f9a2 	bl	8003664 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2202      	movs	r2, #2
 8008324:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800832e:	b29b      	uxth	r3, r3
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	b29b      	uxth	r3, r3
 8008334:	4619      	mov	r1, r3
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 f8bf 	bl	80084ba <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800833c:	e09c      	b.n	8008478 <HAL_UART_IRQHandler+0x518>
 800833e:	bf00      	nop
 8008340:	08008a63 	.word	0x08008a63
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800834c:	b29b      	uxth	r3, r3
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008358:	b29b      	uxth	r3, r3
 800835a:	2b00      	cmp	r3, #0
 800835c:	f000 808e 	beq.w	800847c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008360:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008364:	2b00      	cmp	r3, #0
 8008366:	f000 8089 	beq.w	800847c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	330c      	adds	r3, #12
 8008370:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008374:	e853 3f00 	ldrex	r3, [r3]
 8008378:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800837a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800837c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008380:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	330c      	adds	r3, #12
 800838a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800838e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008390:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008392:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008394:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008396:	e841 2300 	strex	r3, r2, [r1]
 800839a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800839c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1e3      	bne.n	800836a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	3314      	adds	r3, #20
 80083a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ac:	e853 3f00 	ldrex	r3, [r3]
 80083b0:	623b      	str	r3, [r7, #32]
   return(result);
 80083b2:	6a3b      	ldr	r3, [r7, #32]
 80083b4:	f023 0301 	bic.w	r3, r3, #1
 80083b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	3314      	adds	r3, #20
 80083c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80083c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80083c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083ce:	e841 2300 	strex	r3, r2, [r1]
 80083d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80083d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1e3      	bne.n	80083a2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2220      	movs	r2, #32
 80083de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	330c      	adds	r3, #12
 80083ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	e853 3f00 	ldrex	r3, [r3]
 80083f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f023 0310 	bic.w	r3, r3, #16
 80083fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	330c      	adds	r3, #12
 8008408:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800840c:	61fa      	str	r2, [r7, #28]
 800840e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008410:	69b9      	ldr	r1, [r7, #24]
 8008412:	69fa      	ldr	r2, [r7, #28]
 8008414:	e841 2300 	strex	r3, r2, [r1]
 8008418:	617b      	str	r3, [r7, #20]
   return(result);
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1e3      	bne.n	80083e8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2202      	movs	r2, #2
 8008424:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008426:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800842a:	4619      	mov	r1, r3
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 f844 	bl	80084ba <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008432:	e023      	b.n	800847c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800843c:	2b00      	cmp	r3, #0
 800843e:	d009      	beq.n	8008454 <HAL_UART_IRQHandler+0x4f4>
 8008440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008448:	2b00      	cmp	r3, #0
 800844a:	d003      	beq.n	8008454 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fb1c 	bl	8008a8a <UART_Transmit_IT>
    return;
 8008452:	e014      	b.n	800847e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00e      	beq.n	800847e <HAL_UART_IRQHandler+0x51e>
 8008460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008468:	2b00      	cmp	r3, #0
 800846a:	d008      	beq.n	800847e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 fb5b 	bl	8008b28 <UART_EndTransmit_IT>
    return;
 8008472:	e004      	b.n	800847e <HAL_UART_IRQHandler+0x51e>
    return;
 8008474:	bf00      	nop
 8008476:	e002      	b.n	800847e <HAL_UART_IRQHandler+0x51e>
      return;
 8008478:	bf00      	nop
 800847a:	e000      	b.n	800847e <HAL_UART_IRQHandler+0x51e>
      return;
 800847c:	bf00      	nop
  }
}
 800847e:	37e8      	adds	r7, #232	@ 0xe8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800848c:	bf00      	nop
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	bc80      	pop	{r7}
 8008494:	4770      	bx	lr

08008496 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008496:	b480      	push	{r7}
 8008498:	b083      	sub	sp, #12
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800849e:	bf00      	nop
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bc80      	pop	{r7}
 80084a6:	4770      	bx	lr

080084a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80084b0:	bf00      	nop
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bc80      	pop	{r7}
 80084b8:	4770      	bx	lr

080084ba <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b083      	sub	sp, #12
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
 80084c2:	460b      	mov	r3, r1
 80084c4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084c6:	bf00      	nop
 80084c8:	370c      	adds	r7, #12
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bc80      	pop	{r7}
 80084ce:	4770      	bx	lr

080084d0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b09c      	sub	sp, #112	@ 0x70
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084dc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 0320 	and.w	r3, r3, #32
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d172      	bne.n	80085d2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80084ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084ee:	2200      	movs	r2, #0
 80084f0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	330c      	adds	r3, #12
 80084f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084fc:	e853 3f00 	ldrex	r3, [r3]
 8008500:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008502:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008504:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008508:	66bb      	str	r3, [r7, #104]	@ 0x68
 800850a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	330c      	adds	r3, #12
 8008510:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008512:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008514:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008516:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008518:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800851a:	e841 2300 	strex	r3, r2, [r1]
 800851e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008520:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1e5      	bne.n	80084f2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008526:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	3314      	adds	r3, #20
 800852c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008530:	e853 3f00 	ldrex	r3, [r3]
 8008534:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008538:	f023 0301 	bic.w	r3, r3, #1
 800853c:	667b      	str	r3, [r7, #100]	@ 0x64
 800853e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	3314      	adds	r3, #20
 8008544:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008546:	647a      	str	r2, [r7, #68]	@ 0x44
 8008548:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800854c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800854e:	e841 2300 	strex	r3, r2, [r1]
 8008552:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1e5      	bne.n	8008526 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800855a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	3314      	adds	r3, #20
 8008560:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008564:	e853 3f00 	ldrex	r3, [r3]
 8008568:	623b      	str	r3, [r7, #32]
   return(result);
 800856a:	6a3b      	ldr	r3, [r7, #32]
 800856c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008570:	663b      	str	r3, [r7, #96]	@ 0x60
 8008572:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	3314      	adds	r3, #20
 8008578:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800857a:	633a      	str	r2, [r7, #48]	@ 0x30
 800857c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008580:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008582:	e841 2300 	strex	r3, r2, [r1]
 8008586:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1e5      	bne.n	800855a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800858e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008590:	2220      	movs	r2, #32
 8008592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008596:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800859a:	2b01      	cmp	r3, #1
 800859c:	d119      	bne.n	80085d2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800859e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	330c      	adds	r3, #12
 80085a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	e853 3f00 	ldrex	r3, [r3]
 80085ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f023 0310 	bic.w	r3, r3, #16
 80085b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80085b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	330c      	adds	r3, #12
 80085bc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80085be:	61fa      	str	r2, [r7, #28]
 80085c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c2:	69b9      	ldr	r1, [r7, #24]
 80085c4:	69fa      	ldr	r2, [r7, #28]
 80085c6:	e841 2300 	strex	r3, r2, [r1]
 80085ca:	617b      	str	r3, [r7, #20]
   return(result);
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1e5      	bne.n	800859e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085d4:	2200      	movs	r2, #0
 80085d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d106      	bne.n	80085ee <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085e2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80085e4:	4619      	mov	r1, r3
 80085e6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80085e8:	f7ff ff67 	bl	80084ba <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80085ec:	e002      	b.n	80085f4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80085ee:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80085f0:	f7f9 fda6 	bl	8002140 <HAL_UART_RxCpltCallback>
}
 80085f4:	bf00      	nop
 80085f6:	3770      	adds	r7, #112	@ 0x70
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008608:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2201      	movs	r2, #1
 800860e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008614:	2b01      	cmp	r3, #1
 8008616:	d108      	bne.n	800862a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800861c:	085b      	lsrs	r3, r3, #1
 800861e:	b29b      	uxth	r3, r3
 8008620:	4619      	mov	r1, r3
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f7ff ff49 	bl	80084ba <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008628:	e002      	b.n	8008630 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f7ff ff33 	bl	8008496 <HAL_UART_RxHalfCpltCallback>
}
 8008630:	bf00      	nop
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008640:	2300      	movs	r3, #0
 8008642:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008648:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	695b      	ldr	r3, [r3, #20]
 8008650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008654:	2b00      	cmp	r3, #0
 8008656:	bf14      	ite	ne
 8008658:	2301      	movne	r3, #1
 800865a:	2300      	moveq	r3, #0
 800865c:	b2db      	uxtb	r3, r3
 800865e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b21      	cmp	r3, #33	@ 0x21
 800866a:	d108      	bne.n	800867e <UART_DMAError+0x46>
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d005      	beq.n	800867e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	2200      	movs	r2, #0
 8008676:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008678:	68b8      	ldr	r0, [r7, #8]
 800867a:	f000 f969 	bl	8008950 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	695b      	ldr	r3, [r3, #20]
 8008684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008688:	2b00      	cmp	r3, #0
 800868a:	bf14      	ite	ne
 800868c:	2301      	movne	r3, #1
 800868e:	2300      	moveq	r3, #0
 8008690:	b2db      	uxtb	r3, r3
 8008692:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800869a:	b2db      	uxtb	r3, r3
 800869c:	2b22      	cmp	r3, #34	@ 0x22
 800869e:	d108      	bne.n	80086b2 <UART_DMAError+0x7a>
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d005      	beq.n	80086b2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	2200      	movs	r2, #0
 80086aa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80086ac:	68b8      	ldr	r0, [r7, #8]
 80086ae:	f000 f976 	bl	800899e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086b6:	f043 0210 	orr.w	r2, r3, #16
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80086be:	68b8      	ldr	r0, [r7, #8]
 80086c0:	f7ff fef2 	bl	80084a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086c4:	bf00      	nop
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b090      	sub	sp, #64	@ 0x40
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	603b      	str	r3, [r7, #0]
 80086d8:	4613      	mov	r3, r2
 80086da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086dc:	e050      	b.n	8008780 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e4:	d04c      	beq.n	8008780 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80086e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d007      	beq.n	80086fc <UART_WaitOnFlagUntilTimeout+0x30>
 80086ec:	f7fa f9f8 	bl	8002ae0 <HAL_GetTick>
 80086f0:	4602      	mov	r2, r0
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d241      	bcs.n	8008780 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	330c      	adds	r3, #12
 8008702:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008706:	e853 3f00 	ldrex	r3, [r3]
 800870a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800870c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008712:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	330c      	adds	r3, #12
 800871a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800871c:	637a      	str	r2, [r7, #52]	@ 0x34
 800871e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008720:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008722:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008724:	e841 2300 	strex	r3, r2, [r1]
 8008728:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800872a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1e5      	bne.n	80086fc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3314      	adds	r3, #20
 8008736:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	e853 3f00 	ldrex	r3, [r3]
 800873e:	613b      	str	r3, [r7, #16]
   return(result);
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	f023 0301 	bic.w	r3, r3, #1
 8008746:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	3314      	adds	r3, #20
 800874e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008750:	623a      	str	r2, [r7, #32]
 8008752:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008754:	69f9      	ldr	r1, [r7, #28]
 8008756:	6a3a      	ldr	r2, [r7, #32]
 8008758:	e841 2300 	strex	r3, r2, [r1]
 800875c:	61bb      	str	r3, [r7, #24]
   return(result);
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1e5      	bne.n	8008730 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2220      	movs	r2, #32
 8008768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2220      	movs	r2, #32
 8008770:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800877c:	2303      	movs	r3, #3
 800877e:	e00f      	b.n	80087a0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	4013      	ands	r3, r2
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	429a      	cmp	r2, r3
 800878e:	bf0c      	ite	eq
 8008790:	2301      	moveq	r3, #1
 8008792:	2300      	movne	r3, #0
 8008794:	b2db      	uxtb	r3, r3
 8008796:	461a      	mov	r2, r3
 8008798:	79fb      	ldrb	r3, [r7, #7]
 800879a:	429a      	cmp	r2, r3
 800879c:	d09f      	beq.n	80086de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3740      	adds	r7, #64	@ 0x40
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	4613      	mov	r3, r2
 80087b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	68ba      	ldr	r2, [r7, #8]
 80087ba:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	88fa      	ldrh	r2, [r7, #6]
 80087c0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	88fa      	ldrh	r2, [r7, #6]
 80087c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2200      	movs	r2, #0
 80087cc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2222      	movs	r2, #34	@ 0x22
 80087d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d007      	beq.n	80087ee <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	68da      	ldr	r2, [r3, #12]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80087ec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	695a      	ldr	r2, [r3, #20]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f042 0201 	orr.w	r2, r2, #1
 80087fc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	68da      	ldr	r2, [r3, #12]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f042 0220 	orr.w	r2, r2, #32
 800880c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3714      	adds	r7, #20
 8008814:	46bd      	mov	sp, r7
 8008816:	bc80      	pop	{r7}
 8008818:	4770      	bx	lr
	...

0800881c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b098      	sub	sp, #96	@ 0x60
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	4613      	mov	r3, r2
 8008828:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	88fa      	ldrh	r2, [r7, #6]
 8008834:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2222      	movs	r2, #34	@ 0x22
 8008840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008848:	4a3e      	ldr	r2, [pc, #248]	@ (8008944 <UART_Start_Receive_DMA+0x128>)
 800884a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008850:	4a3d      	ldr	r2, [pc, #244]	@ (8008948 <UART_Start_Receive_DMA+0x12c>)
 8008852:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008858:	4a3c      	ldr	r2, [pc, #240]	@ (800894c <UART_Start_Receive_DMA+0x130>)
 800885a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008860:	2200      	movs	r2, #0
 8008862:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008864:	f107 0308 	add.w	r3, r7, #8
 8008868:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	3304      	adds	r3, #4
 8008874:	4619      	mov	r1, r3
 8008876:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	88fb      	ldrh	r3, [r7, #6]
 800887c:	f7fa fe92 	bl	80035a4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008880:	2300      	movs	r3, #0
 8008882:	613b      	str	r3, [r7, #16]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	613b      	str	r3, [r7, #16]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	613b      	str	r3, [r7, #16]
 8008894:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d019      	beq.n	80088d2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	330c      	adds	r3, #12
 80088a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088a8:	e853 3f00 	ldrex	r3, [r3]
 80088ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80088ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	330c      	adds	r3, #12
 80088bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80088be:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80088c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80088c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80088c6:	e841 2300 	strex	r3, r2, [r1]
 80088ca:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80088cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1e5      	bne.n	800889e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	3314      	adds	r3, #20
 80088d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088dc:	e853 3f00 	ldrex	r3, [r3]
 80088e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80088e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e4:	f043 0301 	orr.w	r3, r3, #1
 80088e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	3314      	adds	r3, #20
 80088f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80088f2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80088f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80088f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80088fa:	e841 2300 	strex	r3, r2, [r1]
 80088fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1e5      	bne.n	80088d2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	3314      	adds	r3, #20
 800890c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	e853 3f00 	ldrex	r3, [r3]
 8008914:	617b      	str	r3, [r7, #20]
   return(result);
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800891c:	653b      	str	r3, [r7, #80]	@ 0x50
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	3314      	adds	r3, #20
 8008924:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008926:	627a      	str	r2, [r7, #36]	@ 0x24
 8008928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892a:	6a39      	ldr	r1, [r7, #32]
 800892c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800892e:	e841 2300 	strex	r3, r2, [r1]
 8008932:	61fb      	str	r3, [r7, #28]
   return(result);
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1e5      	bne.n	8008906 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3760      	adds	r7, #96	@ 0x60
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	080084d1 	.word	0x080084d1
 8008948:	080085fd 	.word	0x080085fd
 800894c:	08008639 	.word	0x08008639

08008950 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008950:	b480      	push	{r7}
 8008952:	b089      	sub	sp, #36	@ 0x24
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	330c      	adds	r3, #12
 800895e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	e853 3f00 	ldrex	r3, [r3]
 8008966:	60bb      	str	r3, [r7, #8]
   return(result);
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800896e:	61fb      	str	r3, [r7, #28]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	330c      	adds	r3, #12
 8008976:	69fa      	ldr	r2, [r7, #28]
 8008978:	61ba      	str	r2, [r7, #24]
 800897a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897c:	6979      	ldr	r1, [r7, #20]
 800897e:	69ba      	ldr	r2, [r7, #24]
 8008980:	e841 2300 	strex	r3, r2, [r1]
 8008984:	613b      	str	r3, [r7, #16]
   return(result);
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d1e5      	bne.n	8008958 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2220      	movs	r2, #32
 8008990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8008994:	bf00      	nop
 8008996:	3724      	adds	r7, #36	@ 0x24
 8008998:	46bd      	mov	sp, r7
 800899a:	bc80      	pop	{r7}
 800899c:	4770      	bx	lr

0800899e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800899e:	b480      	push	{r7}
 80089a0:	b095      	sub	sp, #84	@ 0x54
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	330c      	adds	r3, #12
 80089ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089b0:	e853 3f00 	ldrex	r3, [r3]
 80089b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80089b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	330c      	adds	r3, #12
 80089c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80089c6:	643a      	str	r2, [r7, #64]	@ 0x40
 80089c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80089cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80089ce:	e841 2300 	strex	r3, r2, [r1]
 80089d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80089d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1e5      	bne.n	80089a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	3314      	adds	r3, #20
 80089e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e2:	6a3b      	ldr	r3, [r7, #32]
 80089e4:	e853 3f00 	ldrex	r3, [r3]
 80089e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	f023 0301 	bic.w	r3, r3, #1
 80089f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	3314      	adds	r3, #20
 80089f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80089fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a02:	e841 2300 	strex	r3, r2, [r1]
 8008a06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1e5      	bne.n	80089da <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d119      	bne.n	8008a4a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	330c      	adds	r3, #12
 8008a1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	e853 3f00 	ldrex	r3, [r3]
 8008a24:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	f023 0310 	bic.w	r3, r3, #16
 8008a2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	330c      	adds	r3, #12
 8008a34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a36:	61ba      	str	r2, [r7, #24]
 8008a38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3a:	6979      	ldr	r1, [r7, #20]
 8008a3c:	69ba      	ldr	r2, [r7, #24]
 8008a3e:	e841 2300 	strex	r3, r2, [r1]
 8008a42:	613b      	str	r3, [r7, #16]
   return(result);
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d1e5      	bne.n	8008a16 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2220      	movs	r2, #32
 8008a4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008a58:	bf00      	nop
 8008a5a:	3754      	adds	r7, #84	@ 0x54
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bc80      	pop	{r7}
 8008a60:	4770      	bx	lr

08008a62 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b084      	sub	sp, #16
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2200      	movs	r2, #0
 8008a74:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	f7ff fd13 	bl	80084a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a82:	bf00      	nop
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008a8a:	b480      	push	{r7}
 8008a8c:	b085      	sub	sp, #20
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	2b21      	cmp	r3, #33	@ 0x21
 8008a9c:	d13e      	bne.n	8008b1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008aa6:	d114      	bne.n	8008ad2 <UART_Transmit_IT+0x48>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d110      	bne.n	8008ad2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a1b      	ldr	r3, [r3, #32]
 8008ab4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	881b      	ldrh	r3, [r3, #0]
 8008aba:	461a      	mov	r2, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ac4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	1c9a      	adds	r2, r3, #2
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	621a      	str	r2, [r3, #32]
 8008ad0:	e008      	b.n	8008ae4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6a1b      	ldr	r3, [r3, #32]
 8008ad6:	1c59      	adds	r1, r3, #1
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	6211      	str	r1, [r2, #32]
 8008adc:	781a      	ldrb	r2, [r3, #0]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	3b01      	subs	r3, #1
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	4619      	mov	r1, r3
 8008af2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d10f      	bne.n	8008b18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68da      	ldr	r2, [r3, #12]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008b06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	68da      	ldr	r2, [r3, #12]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	e000      	b.n	8008b1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008b1c:	2302      	movs	r3, #2
  }
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3714      	adds	r7, #20
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bc80      	pop	{r7}
 8008b26:	4770      	bx	lr

08008b28 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68da      	ldr	r2, [r3, #12]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b3e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2220      	movs	r2, #32
 8008b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7ff fc9b 	bl	8008484 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b08c      	sub	sp, #48	@ 0x30
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	2b22      	cmp	r3, #34	@ 0x22
 8008b6a:	f040 80ae 	bne.w	8008cca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b76:	d117      	bne.n	8008ba8 <UART_Receive_IT+0x50>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d113      	bne.n	8008ba8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008b80:	2300      	movs	r3, #0
 8008b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b88:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b96:	b29a      	uxth	r2, r3
 8008b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b9a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ba0:	1c9a      	adds	r2, r3, #2
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	629a      	str	r2, [r3, #40]	@ 0x28
 8008ba6:	e026      	b.n	8008bf6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bba:	d007      	beq.n	8008bcc <UART_Receive_IT+0x74>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d10a      	bne.n	8008bda <UART_Receive_IT+0x82>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	691b      	ldr	r3, [r3, #16]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d106      	bne.n	8008bda <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	b2da      	uxtb	r2, r3
 8008bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bd6:	701a      	strb	r2, [r3, #0]
 8008bd8:	e008      	b.n	8008bec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008be6:	b2da      	uxtb	r2, r3
 8008be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bf0:	1c5a      	adds	r2, r3, #1
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	4619      	mov	r1, r3
 8008c04:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d15d      	bne.n	8008cc6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	68da      	ldr	r2, [r3, #12]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f022 0220 	bic.w	r2, r2, #32
 8008c18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68da      	ldr	r2, [r3, #12]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008c28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	695a      	ldr	r2, [r3, #20]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f022 0201 	bic.w	r2, r2, #1
 8008c38:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2220      	movs	r2, #32
 8008c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d135      	bne.n	8008cbc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	330c      	adds	r3, #12
 8008c5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	e853 3f00 	ldrex	r3, [r3]
 8008c64:	613b      	str	r3, [r7, #16]
   return(result);
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	f023 0310 	bic.w	r3, r3, #16
 8008c6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	330c      	adds	r3, #12
 8008c74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c76:	623a      	str	r2, [r7, #32]
 8008c78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7a:	69f9      	ldr	r1, [r7, #28]
 8008c7c:	6a3a      	ldr	r2, [r7, #32]
 8008c7e:	e841 2300 	strex	r3, r2, [r1]
 8008c82:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1e5      	bne.n	8008c56 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0310 	and.w	r3, r3, #16
 8008c94:	2b10      	cmp	r3, #16
 8008c96:	d10a      	bne.n	8008cae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c98:	2300      	movs	r3, #0
 8008c9a:	60fb      	str	r3, [r7, #12]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	60fb      	str	r3, [r7, #12]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	60fb      	str	r3, [r7, #12]
 8008cac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f7ff fc00 	bl	80084ba <HAL_UARTEx_RxEventCallback>
 8008cba:	e002      	b.n	8008cc2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f7f9 fa3f 	bl	8002140 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	e002      	b.n	8008ccc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	e000      	b.n	8008ccc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008cca:	2302      	movs	r3, #2
  }
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3730      	adds	r7, #48	@ 0x30
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	68da      	ldr	r2, [r3, #12]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	689a      	ldr	r2, [r3, #8]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	431a      	orrs	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	695b      	ldr	r3, [r3, #20]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8008d0e:	f023 030c 	bic.w	r3, r3, #12
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	6812      	ldr	r2, [r2, #0]
 8008d16:	68b9      	ldr	r1, [r7, #8]
 8008d18:	430b      	orrs	r3, r1
 8008d1a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	695b      	ldr	r3, [r3, #20]
 8008d22:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	699a      	ldr	r2, [r3, #24]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	430a      	orrs	r2, r1
 8008d30:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a2c      	ldr	r2, [pc, #176]	@ (8008de8 <UART_SetConfig+0x114>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d103      	bne.n	8008d44 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008d3c:	f7fe fa3e 	bl	80071bc <HAL_RCC_GetPCLK2Freq>
 8008d40:	60f8      	str	r0, [r7, #12]
 8008d42:	e002      	b.n	8008d4a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008d44:	f7fe fa26 	bl	8007194 <HAL_RCC_GetPCLK1Freq>
 8008d48:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d4a:	68fa      	ldr	r2, [r7, #12]
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	4413      	add	r3, r2
 8008d52:	009a      	lsls	r2, r3, #2
 8008d54:	441a      	add	r2, r3
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d60:	4a22      	ldr	r2, [pc, #136]	@ (8008dec <UART_SetConfig+0x118>)
 8008d62:	fba2 2303 	umull	r2, r3, r2, r3
 8008d66:	095b      	lsrs	r3, r3, #5
 8008d68:	0119      	lsls	r1, r3, #4
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	4613      	mov	r3, r2
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	4413      	add	r3, r2
 8008d72:	009a      	lsls	r2, r3, #2
 8008d74:	441a      	add	r2, r3
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d80:	4b1a      	ldr	r3, [pc, #104]	@ (8008dec <UART_SetConfig+0x118>)
 8008d82:	fba3 0302 	umull	r0, r3, r3, r2
 8008d86:	095b      	lsrs	r3, r3, #5
 8008d88:	2064      	movs	r0, #100	@ 0x64
 8008d8a:	fb00 f303 	mul.w	r3, r0, r3
 8008d8e:	1ad3      	subs	r3, r2, r3
 8008d90:	011b      	lsls	r3, r3, #4
 8008d92:	3332      	adds	r3, #50	@ 0x32
 8008d94:	4a15      	ldr	r2, [pc, #84]	@ (8008dec <UART_SetConfig+0x118>)
 8008d96:	fba2 2303 	umull	r2, r3, r2, r3
 8008d9a:	095b      	lsrs	r3, r3, #5
 8008d9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008da0:	4419      	add	r1, r3
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	4613      	mov	r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	4413      	add	r3, r2
 8008daa:	009a      	lsls	r2, r3, #2
 8008dac:	441a      	add	r2, r3
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	fbb2 f2f3 	udiv	r2, r2, r3
 8008db8:	4b0c      	ldr	r3, [pc, #48]	@ (8008dec <UART_SetConfig+0x118>)
 8008dba:	fba3 0302 	umull	r0, r3, r3, r2
 8008dbe:	095b      	lsrs	r3, r3, #5
 8008dc0:	2064      	movs	r0, #100	@ 0x64
 8008dc2:	fb00 f303 	mul.w	r3, r0, r3
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	011b      	lsls	r3, r3, #4
 8008dca:	3332      	adds	r3, #50	@ 0x32
 8008dcc:	4a07      	ldr	r2, [pc, #28]	@ (8008dec <UART_SetConfig+0x118>)
 8008dce:	fba2 2303 	umull	r2, r3, r2, r3
 8008dd2:	095b      	lsrs	r3, r3, #5
 8008dd4:	f003 020f 	and.w	r2, r3, #15
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	440a      	add	r2, r1
 8008dde:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008de0:	bf00      	nop
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	40013800 	.word	0x40013800
 8008dec:	51eb851f 	.word	0x51eb851f

08008df0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008df0:	b084      	sub	sp, #16
 8008df2:	b480      	push	{r7}
 8008df4:	b083      	sub	sp, #12
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
 8008dfa:	f107 0014 	add.w	r0, r7, #20
 8008dfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bc80      	pop	{r7}
 8008e0c:	b004      	add	sp, #16
 8008e0e:	4770      	bx	lr

08008e10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b085      	sub	sp, #20
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008e20:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8008e24:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	b29a      	uxth	r2, r3
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3714      	adds	r7, #20
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bc80      	pop	{r7}
 8008e3a:	4770      	bx	lr

08008e3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008e44:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8008e48:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	43db      	mvns	r3, r3
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3714      	adds	r7, #20
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bc80      	pop	{r7}
 8008e6e:	4770      	bx	lr

08008e70 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	460b      	mov	r3, r1
 8008e7a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	370c      	adds	r7, #12
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bc80      	pop	{r7}
 8008e86:	4770      	bx	lr

08008e88 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008e88:	b084      	sub	sp, #16
 8008e8a:	b480      	push	{r7}
 8008e8c:	b083      	sub	sp, #12
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	f107 0014 	add.w	r0, r7, #20
 8008e96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bc80      	pop	{r7}
 8008ec4:	b004      	add	sp, #16
 8008ec6:	4770      	bx	lr

08008ec8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b09d      	sub	sp, #116	@ 0x74
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	4413      	add	r3, r2
 8008ee2:	881b      	ldrh	r3, [r3, #0]
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8008eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008eee:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	78db      	ldrb	r3, [r3, #3]
 8008ef6:	2b03      	cmp	r3, #3
 8008ef8:	d81f      	bhi.n	8008f3a <USB_ActivateEndpoint+0x72>
 8008efa:	a201      	add	r2, pc, #4	@ (adr r2, 8008f00 <USB_ActivateEndpoint+0x38>)
 8008efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f00:	08008f11 	.word	0x08008f11
 8008f04:	08008f2d 	.word	0x08008f2d
 8008f08:	08008f43 	.word	0x08008f43
 8008f0c:	08008f1f 	.word	0x08008f1f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008f10:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008f14:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008f18:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008f1c:	e012      	b.n	8008f44 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008f1e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008f22:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008f26:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008f2a:	e00b      	b.n	8008f44 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008f2c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008f30:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008f34:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008f38:	e004      	b.n	8008f44 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8008f40:	e000      	b.n	8008f44 <USB_ActivateEndpoint+0x7c>
      break;
 8008f42:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	441a      	add	r2, r3
 8008f4e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008f52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	4413      	add	r3, r2
 8008f70:	881b      	ldrh	r3, [r3, #0]
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	683a      	ldr	r2, [r7, #0]
 8008f80:	7812      	ldrb	r2, [r2, #0]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	441a      	add	r2, r3
 8008f92:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008f96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	7b1b      	ldrb	r3, [r3, #12]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	f040 8178 	bne.w	80092a4 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	785b      	ldrb	r3, [r3, #1]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f000 8084 	beq.w	80090c6 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	61bb      	str	r3, [r7, #24]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	461a      	mov	r2, r3
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	4413      	add	r3, r2
 8008fd0:	61bb      	str	r3, [r7, #24]
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	011a      	lsls	r2, r3, #4
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	4413      	add	r3, r2
 8008fdc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008fe0:	617b      	str	r3, [r7, #20]
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	88db      	ldrh	r3, [r3, #6]
 8008fe6:	085b      	lsrs	r3, r3, #1
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	005b      	lsls	r3, r3, #1
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	4413      	add	r3, r2
 8008ffc:	881b      	ldrh	r3, [r3, #0]
 8008ffe:	827b      	strh	r3, [r7, #18]
 8009000:	8a7b      	ldrh	r3, [r7, #18]
 8009002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009006:	2b00      	cmp	r3, #0
 8009008:	d01b      	beq.n	8009042 <USB_ActivateEndpoint+0x17a>
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	4413      	add	r3, r2
 8009014:	881b      	ldrh	r3, [r3, #0]
 8009016:	b29b      	uxth	r3, r3
 8009018:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800901c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009020:	823b      	strh	r3, [r7, #16]
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	441a      	add	r2, r3
 800902c:	8a3b      	ldrh	r3, [r7, #16]
 800902e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009032:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009036:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800903a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800903e:	b29b      	uxth	r3, r3
 8009040:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	78db      	ldrb	r3, [r3, #3]
 8009046:	2b01      	cmp	r3, #1
 8009048:	d020      	beq.n	800908c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	4413      	add	r3, r2
 8009054:	881b      	ldrh	r3, [r3, #0]
 8009056:	b29b      	uxth	r3, r3
 8009058:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800905c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009060:	81bb      	strh	r3, [r7, #12]
 8009062:	89bb      	ldrh	r3, [r7, #12]
 8009064:	f083 0320 	eor.w	r3, r3, #32
 8009068:	81bb      	strh	r3, [r7, #12]
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	441a      	add	r2, r3
 8009074:	89bb      	ldrh	r3, [r7, #12]
 8009076:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800907a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800907e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009086:	b29b      	uxth	r3, r3
 8009088:	8013      	strh	r3, [r2, #0]
 800908a:	e2d5      	b.n	8009638 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	4413      	add	r3, r2
 8009096:	881b      	ldrh	r3, [r3, #0]
 8009098:	b29b      	uxth	r3, r3
 800909a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800909e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090a2:	81fb      	strh	r3, [r7, #14]
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	441a      	add	r2, r3
 80090ae:	89fb      	ldrh	r3, [r7, #14]
 80090b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	8013      	strh	r3, [r2, #0]
 80090c4:	e2b8      	b.n	8009638 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	461a      	mov	r2, r3
 80090d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d6:	4413      	add	r3, r2
 80090d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	011a      	lsls	r2, r3, #4
 80090e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e2:	4413      	add	r3, r2
 80090e4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80090e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	88db      	ldrh	r3, [r3, #6]
 80090ee:	085b      	lsrs	r3, r3, #1
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	005b      	lsls	r3, r3, #1
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090f8:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009104:	b29b      	uxth	r3, r3
 8009106:	461a      	mov	r2, r3
 8009108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800910a:	4413      	add	r3, r2
 800910c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	011a      	lsls	r2, r3, #4
 8009114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009116:	4413      	add	r3, r2
 8009118:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800911c:	627b      	str	r3, [r7, #36]	@ 0x24
 800911e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009120:	881b      	ldrh	r3, [r3, #0]
 8009122:	b29b      	uxth	r3, r3
 8009124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009128:	b29a      	uxth	r2, r3
 800912a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800912c:	801a      	strh	r2, [r3, #0]
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	2b3e      	cmp	r3, #62	@ 0x3e
 8009134:	d91d      	bls.n	8009172 <USB_ActivateEndpoint+0x2aa>
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	691b      	ldr	r3, [r3, #16]
 800913a:	095b      	lsrs	r3, r3, #5
 800913c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	f003 031f 	and.w	r3, r3, #31
 8009146:	2b00      	cmp	r3, #0
 8009148:	d102      	bne.n	8009150 <USB_ActivateEndpoint+0x288>
 800914a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800914c:	3b01      	subs	r3, #1
 800914e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009152:	881b      	ldrh	r3, [r3, #0]
 8009154:	b29a      	uxth	r2, r3
 8009156:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009158:	b29b      	uxth	r3, r3
 800915a:	029b      	lsls	r3, r3, #10
 800915c:	b29b      	uxth	r3, r3
 800915e:	4313      	orrs	r3, r2
 8009160:	b29b      	uxth	r3, r3
 8009162:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009166:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800916a:	b29a      	uxth	r2, r3
 800916c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800916e:	801a      	strh	r2, [r3, #0]
 8009170:	e026      	b.n	80091c0 <USB_ActivateEndpoint+0x2f8>
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d10a      	bne.n	8009190 <USB_ActivateEndpoint+0x2c8>
 800917a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800917c:	881b      	ldrh	r3, [r3, #0]
 800917e:	b29b      	uxth	r3, r3
 8009180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009188:	b29a      	uxth	r2, r3
 800918a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800918c:	801a      	strh	r2, [r3, #0]
 800918e:	e017      	b.n	80091c0 <USB_ActivateEndpoint+0x2f8>
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	085b      	lsrs	r3, r3, #1
 8009196:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	691b      	ldr	r3, [r3, #16]
 800919c:	f003 0301 	and.w	r3, r3, #1
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d002      	beq.n	80091aa <USB_ActivateEndpoint+0x2e2>
 80091a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80091a6:	3301      	adds	r3, #1
 80091a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80091aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ac:	881b      	ldrh	r3, [r3, #0]
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	029b      	lsls	r3, r3, #10
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	4313      	orrs	r3, r2
 80091ba:	b29a      	uxth	r2, r3
 80091bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091be:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	4413      	add	r3, r2
 80091ca:	881b      	ldrh	r3, [r3, #0]
 80091cc:	847b      	strh	r3, [r7, #34]	@ 0x22
 80091ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80091d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d01b      	beq.n	8009210 <USB_ActivateEndpoint+0x348>
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4413      	add	r3, r2
 80091e2:	881b      	ldrh	r3, [r3, #0]
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091ee:	843b      	strh	r3, [r7, #32]
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	441a      	add	r2, r3
 80091fa:	8c3b      	ldrh	r3, [r7, #32]
 80091fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009200:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009204:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009208:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800920c:	b29b      	uxth	r3, r3
 800920e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d124      	bne.n	8009262 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	4413      	add	r3, r2
 8009222:	881b      	ldrh	r3, [r3, #0]
 8009224:	b29b      	uxth	r3, r3
 8009226:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800922a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800922e:	83bb      	strh	r3, [r7, #28]
 8009230:	8bbb      	ldrh	r3, [r7, #28]
 8009232:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009236:	83bb      	strh	r3, [r7, #28]
 8009238:	8bbb      	ldrh	r3, [r7, #28]
 800923a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800923e:	83bb      	strh	r3, [r7, #28]
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	441a      	add	r2, r3
 800924a:	8bbb      	ldrh	r3, [r7, #28]
 800924c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009250:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009254:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800925c:	b29b      	uxth	r3, r3
 800925e:	8013      	strh	r3, [r2, #0]
 8009260:	e1ea      	b.n	8009638 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	4413      	add	r3, r2
 800926c:	881b      	ldrh	r3, [r3, #0]
 800926e:	b29b      	uxth	r3, r3
 8009270:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009274:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009278:	83fb      	strh	r3, [r7, #30]
 800927a:	8bfb      	ldrh	r3, [r7, #30]
 800927c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009280:	83fb      	strh	r3, [r7, #30]
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	441a      	add	r2, r3
 800928c:	8bfb      	ldrh	r3, [r7, #30]
 800928e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009292:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009296:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800929a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800929e:	b29b      	uxth	r3, r3
 80092a0:	8013      	strh	r3, [r2, #0]
 80092a2:	e1c9      	b.n	8009638 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	78db      	ldrb	r3, [r3, #3]
 80092a8:	2b02      	cmp	r3, #2
 80092aa:	d11e      	bne.n	80092ea <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	4413      	add	r3, r2
 80092b6:	881b      	ldrh	r3, [r3, #0]
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092c2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	441a      	add	r2, r3
 80092d0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80092d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092dc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80092e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	8013      	strh	r3, [r2, #0]
 80092e8:	e01d      	b.n	8009326 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	4413      	add	r3, r2
 80092f4:	881b      	ldrh	r3, [r3, #0]
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80092fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009300:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	441a      	add	r2, r3
 800930e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009312:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009316:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800931a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800931e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009322:	b29b      	uxth	r3, r3
 8009324:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009330:	b29b      	uxth	r3, r3
 8009332:	461a      	mov	r2, r3
 8009334:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009336:	4413      	add	r3, r2
 8009338:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	011a      	lsls	r2, r3, #4
 8009340:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009342:	4413      	add	r3, r2
 8009344:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009348:	65bb      	str	r3, [r7, #88]	@ 0x58
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	891b      	ldrh	r3, [r3, #8]
 800934e:	085b      	lsrs	r3, r3, #1
 8009350:	b29b      	uxth	r3, r3
 8009352:	005b      	lsls	r3, r3, #1
 8009354:	b29a      	uxth	r2, r3
 8009356:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009358:	801a      	strh	r2, [r3, #0]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	657b      	str	r3, [r7, #84]	@ 0x54
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009364:	b29b      	uxth	r3, r3
 8009366:	461a      	mov	r2, r3
 8009368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800936a:	4413      	add	r3, r2
 800936c:	657b      	str	r3, [r7, #84]	@ 0x54
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	011a      	lsls	r2, r3, #4
 8009374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009376:	4413      	add	r3, r2
 8009378:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800937c:	653b      	str	r3, [r7, #80]	@ 0x50
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	895b      	ldrh	r3, [r3, #10]
 8009382:	085b      	lsrs	r3, r3, #1
 8009384:	b29b      	uxth	r3, r3
 8009386:	005b      	lsls	r3, r3, #1
 8009388:	b29a      	uxth	r2, r3
 800938a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800938c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	785b      	ldrb	r3, [r3, #1]
 8009392:	2b00      	cmp	r3, #0
 8009394:	f040 8093 	bne.w	80094be <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	4413      	add	r3, r2
 80093a2:	881b      	ldrh	r3, [r3, #0]
 80093a4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80093a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80093ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d01b      	beq.n	80093ec <USB_ActivateEndpoint+0x524>
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	4413      	add	r3, r2
 80093be:	881b      	ldrh	r3, [r3, #0]
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093ca:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	441a      	add	r2, r3
 80093d6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80093d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80093e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	4413      	add	r3, r2
 80093f6:	881b      	ldrh	r3, [r3, #0]
 80093f8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80093fa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80093fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009400:	2b00      	cmp	r3, #0
 8009402:	d01b      	beq.n	800943c <USB_ActivateEndpoint+0x574>
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	4413      	add	r3, r2
 800940e:	881b      	ldrh	r3, [r3, #0]
 8009410:	b29b      	uxth	r3, r3
 8009412:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800941a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	441a      	add	r2, r3
 8009426:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009428:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800942c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009430:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009434:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009438:	b29b      	uxth	r3, r3
 800943a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	4413      	add	r3, r2
 8009446:	881b      	ldrh	r3, [r3, #0]
 8009448:	b29b      	uxth	r3, r3
 800944a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800944e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009452:	873b      	strh	r3, [r7, #56]	@ 0x38
 8009454:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009456:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800945a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800945c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800945e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009462:	873b      	strh	r3, [r7, #56]	@ 0x38
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	441a      	add	r2, r3
 800946e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009470:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009474:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009478:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800947c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009480:	b29b      	uxth	r3, r3
 8009482:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	4413      	add	r3, r2
 800948e:	881b      	ldrh	r3, [r3, #0]
 8009490:	b29b      	uxth	r3, r3
 8009492:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009496:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800949a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	441a      	add	r2, r3
 80094a6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80094a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	8013      	strh	r3, [r2, #0]
 80094bc:	e0bc      	b.n	8009638 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	4413      	add	r3, r2
 80094c8:	881b      	ldrh	r3, [r3, #0]
 80094ca:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80094ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80094d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d01d      	beq.n	8009516 <USB_ActivateEndpoint+0x64e>
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	4413      	add	r3, r2
 80094e4:	881b      	ldrh	r3, [r3, #0]
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094f0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	441a      	add	r2, r3
 80094fe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8009502:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009506:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800950a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800950e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009512:	b29b      	uxth	r3, r3
 8009514:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	4413      	add	r3, r2
 8009520:	881b      	ldrh	r3, [r3, #0]
 8009522:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8009526:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800952a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800952e:	2b00      	cmp	r3, #0
 8009530:	d01d      	beq.n	800956e <USB_ActivateEndpoint+0x6a6>
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	4413      	add	r3, r2
 800953c:	881b      	ldrh	r3, [r3, #0]
 800953e:	b29b      	uxth	r3, r3
 8009540:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009544:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009548:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	441a      	add	r2, r3
 8009556:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800955a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800955e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009562:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009566:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800956a:	b29b      	uxth	r3, r3
 800956c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	78db      	ldrb	r3, [r3, #3]
 8009572:	2b01      	cmp	r3, #1
 8009574:	d024      	beq.n	80095c0 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	781b      	ldrb	r3, [r3, #0]
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	4413      	add	r3, r2
 8009580:	881b      	ldrh	r3, [r3, #0]
 8009582:	b29b      	uxth	r3, r3
 8009584:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009588:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800958c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8009590:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009594:	f083 0320 	eor.w	r3, r3, #32
 8009598:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	441a      	add	r2, r3
 80095a6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80095aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	8013      	strh	r3, [r2, #0]
 80095be:	e01d      	b.n	80095fc <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	4413      	add	r3, r2
 80095ca:	881b      	ldrh	r3, [r3, #0]
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095d6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	441a      	add	r2, r3
 80095e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80095e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	4413      	add	r3, r2
 8009606:	881b      	ldrh	r3, [r3, #0]
 8009608:	b29b      	uxth	r3, r3
 800960a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800960e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009612:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	441a      	add	r2, r3
 8009620:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009624:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009628:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800962c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009630:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009634:	b29b      	uxth	r3, r3
 8009636:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009638:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800963c:	4618      	mov	r0, r3
 800963e:	3774      	adds	r7, #116	@ 0x74
 8009640:	46bd      	mov	sp, r7
 8009642:	bc80      	pop	{r7}
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop

08009648 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009648:	b480      	push	{r7}
 800964a:	b08d      	sub	sp, #52	@ 0x34
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	7b1b      	ldrb	r3, [r3, #12]
 8009656:	2b00      	cmp	r3, #0
 8009658:	f040 808e 	bne.w	8009778 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	785b      	ldrb	r3, [r3, #1]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d044      	beq.n	80096ee <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	4413      	add	r3, r2
 800966e:	881b      	ldrh	r3, [r3, #0]
 8009670:	81bb      	strh	r3, [r7, #12]
 8009672:	89bb      	ldrh	r3, [r7, #12]
 8009674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009678:	2b00      	cmp	r3, #0
 800967a:	d01b      	beq.n	80096b4 <USB_DeactivateEndpoint+0x6c>
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	4413      	add	r3, r2
 8009686:	881b      	ldrh	r3, [r3, #0]
 8009688:	b29b      	uxth	r3, r3
 800968a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800968e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009692:	817b      	strh	r3, [r7, #10]
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	441a      	add	r2, r3
 800969e:	897b      	ldrh	r3, [r7, #10]
 80096a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	4413      	add	r3, r2
 80096be:	881b      	ldrh	r3, [r3, #0]
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096ca:	813b      	strh	r3, [r7, #8]
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	441a      	add	r2, r3
 80096d6:	893b      	ldrh	r3, [r7, #8]
 80096d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	8013      	strh	r3, [r2, #0]
 80096ec:	e192      	b.n	8009a14 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4413      	add	r3, r2
 80096f8:	881b      	ldrh	r3, [r3, #0]
 80096fa:	827b      	strh	r3, [r7, #18]
 80096fc:	8a7b      	ldrh	r3, [r7, #18]
 80096fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009702:	2b00      	cmp	r3, #0
 8009704:	d01b      	beq.n	800973e <USB_DeactivateEndpoint+0xf6>
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	4413      	add	r3, r2
 8009710:	881b      	ldrh	r3, [r3, #0]
 8009712:	b29b      	uxth	r3, r3
 8009714:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009718:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800971c:	823b      	strh	r3, [r7, #16]
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	441a      	add	r2, r3
 8009728:	8a3b      	ldrh	r3, [r7, #16]
 800972a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800972e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009732:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800973a:	b29b      	uxth	r3, r3
 800973c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	4413      	add	r3, r2
 8009748:	881b      	ldrh	r3, [r3, #0]
 800974a:	b29b      	uxth	r3, r3
 800974c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009750:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009754:	81fb      	strh	r3, [r7, #14]
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	441a      	add	r2, r3
 8009760:	89fb      	ldrh	r3, [r7, #14]
 8009762:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009766:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800976a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800976e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009772:	b29b      	uxth	r3, r3
 8009774:	8013      	strh	r3, [r2, #0]
 8009776:	e14d      	b.n	8009a14 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	785b      	ldrb	r3, [r3, #1]
 800977c:	2b00      	cmp	r3, #0
 800977e:	f040 80a5 	bne.w	80098cc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	4413      	add	r3, r2
 800978c:	881b      	ldrh	r3, [r3, #0]
 800978e:	843b      	strh	r3, [r7, #32]
 8009790:	8c3b      	ldrh	r3, [r7, #32]
 8009792:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009796:	2b00      	cmp	r3, #0
 8009798:	d01b      	beq.n	80097d2 <USB_DeactivateEndpoint+0x18a>
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	4413      	add	r3, r2
 80097a4:	881b      	ldrh	r3, [r3, #0]
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097b0:	83fb      	strh	r3, [r7, #30]
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	441a      	add	r2, r3
 80097bc:	8bfb      	ldrh	r3, [r7, #30]
 80097be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80097ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	4413      	add	r3, r2
 80097dc:	881b      	ldrh	r3, [r3, #0]
 80097de:	83bb      	strh	r3, [r7, #28]
 80097e0:	8bbb      	ldrh	r3, [r7, #28]
 80097e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d01b      	beq.n	8009822 <USB_DeactivateEndpoint+0x1da>
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	4413      	add	r3, r2
 80097f4:	881b      	ldrh	r3, [r3, #0]
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009800:	837b      	strh	r3, [r7, #26]
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	441a      	add	r2, r3
 800980c:	8b7b      	ldrh	r3, [r7, #26]
 800980e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009812:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009816:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800981a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800981e:	b29b      	uxth	r3, r3
 8009820:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	4413      	add	r3, r2
 800982c:	881b      	ldrh	r3, [r3, #0]
 800982e:	b29b      	uxth	r3, r3
 8009830:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009834:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009838:	833b      	strh	r3, [r7, #24]
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	441a      	add	r2, r3
 8009844:	8b3b      	ldrh	r3, [r7, #24]
 8009846:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800984a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800984e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009852:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009856:	b29b      	uxth	r3, r3
 8009858:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	4413      	add	r3, r2
 8009864:	881b      	ldrh	r3, [r3, #0]
 8009866:	b29b      	uxth	r3, r3
 8009868:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800986c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009870:	82fb      	strh	r3, [r7, #22]
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	441a      	add	r2, r3
 800987c:	8afb      	ldrh	r3, [r7, #22]
 800987e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009882:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009886:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800988a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800988e:	b29b      	uxth	r3, r3
 8009890:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	4413      	add	r3, r2
 800989c:	881b      	ldrh	r3, [r3, #0]
 800989e:	b29b      	uxth	r3, r3
 80098a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098a8:	82bb      	strh	r3, [r7, #20]
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	441a      	add	r2, r3
 80098b4:	8abb      	ldrh	r3, [r7, #20]
 80098b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	8013      	strh	r3, [r2, #0]
 80098ca:	e0a3      	b.n	8009a14 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	4413      	add	r3, r2
 80098d6:	881b      	ldrh	r3, [r3, #0]
 80098d8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80098da:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80098dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d01b      	beq.n	800991c <USB_DeactivateEndpoint+0x2d4>
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	4413      	add	r3, r2
 80098ee:	881b      	ldrh	r3, [r3, #0]
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098fa:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	441a      	add	r2, r3
 8009906:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009908:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800990c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009910:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009914:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009918:	b29b      	uxth	r3, r3
 800991a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	4413      	add	r3, r2
 8009926:	881b      	ldrh	r3, [r3, #0]
 8009928:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800992a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800992c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009930:	2b00      	cmp	r3, #0
 8009932:	d01b      	beq.n	800996c <USB_DeactivateEndpoint+0x324>
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	009b      	lsls	r3, r3, #2
 800993c:	4413      	add	r3, r2
 800993e:	881b      	ldrh	r3, [r3, #0]
 8009940:	b29b      	uxth	r3, r3
 8009942:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009946:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800994a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	441a      	add	r2, r3
 8009956:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009958:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800995c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009960:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009964:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009968:	b29b      	uxth	r3, r3
 800996a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	4413      	add	r3, r2
 8009976:	881b      	ldrh	r3, [r3, #0]
 8009978:	b29b      	uxth	r3, r3
 800997a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800997e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009982:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	441a      	add	r2, r3
 800998e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009990:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009994:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009998:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800999c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	4413      	add	r3, r2
 80099ae:	881b      	ldrh	r3, [r3, #0]
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80099b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099ba:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	441a      	add	r2, r3
 80099c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80099c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099d8:	b29b      	uxth	r3, r3
 80099da:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	4413      	add	r3, r2
 80099e6:	881b      	ldrh	r3, [r3, #0]
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80099ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099f2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	441a      	add	r2, r3
 80099fe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009a00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3734      	adds	r7, #52	@ 0x34
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bc80      	pop	{r7}
 8009a1e:	4770      	bx	lr

08009a20 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b0c2      	sub	sp, #264	@ 0x108
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a2e:	6018      	str	r0, [r3, #0]
 8009a30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a38:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009a3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	785b      	ldrb	r3, [r3, #1]
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	f040 86b7 	bne.w	800a7ba <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009a4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	699a      	ldr	r2, [r3, #24]
 8009a58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d908      	bls.n	8009a7a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8009a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009a78:	e007      	b.n	8009a8a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009a7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	699b      	ldr	r3, [r3, #24]
 8009a86:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009a8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	7b1b      	ldrb	r3, [r3, #12]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d13a      	bne.n	8009b10 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009a9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	6959      	ldr	r1, [r3, #20]
 8009aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	88da      	ldrh	r2, [r3, #6]
 8009ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009abc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009ac0:	6800      	ldr	r0, [r0, #0]
 8009ac2:	f001 fc9c 	bl	800b3fe <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	613b      	str	r3, [r7, #16]
 8009ad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ad6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	4413      	add	r3, r2
 8009ae8:	613b      	str	r3, [r7, #16]
 8009aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	011a      	lsls	r2, r3, #4
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	4413      	add	r3, r2
 8009afc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009b00:	60fb      	str	r3, [r7, #12]
 8009b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b06:	b29a      	uxth	r2, r3
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	801a      	strh	r2, [r3, #0]
 8009b0c:	f000 be1f 	b.w	800a74e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009b10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	78db      	ldrb	r3, [r3, #3]
 8009b1c:	2b02      	cmp	r3, #2
 8009b1e:	f040 8462 	bne.w	800a3e6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009b22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	6a1a      	ldr	r2, [r3, #32]
 8009b2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	691b      	ldr	r3, [r3, #16]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	f240 83df 	bls.w	800a2fe <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	4413      	add	r3, r2
 8009b5a:	881b      	ldrh	r3, [r3, #0]
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b66:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8009b6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	441a      	add	r2, r3
 8009b84:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009b88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b90:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009b94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009b9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ba0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	6a1a      	ldr	r2, [r3, #32]
 8009ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bac:	1ad2      	subs	r2, r2, r3
 8009bae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009bba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	4413      	add	r3, r2
 8009bd4:	881b      	ldrh	r3, [r3, #0]
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f000 81c7 	beq.w	8009f70 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009be2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009be6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	633b      	str	r3, [r7, #48]	@ 0x30
 8009bee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	785b      	ldrb	r3, [r3, #1]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d177      	bne.n	8009cee <USB_EPStartXfer+0x2ce>
 8009bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009c0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c1e:	4413      	add	r3, r2
 8009c20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009c22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	011a      	lsls	r2, r3, #4
 8009c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c32:	4413      	add	r3, r2
 8009c34:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009c38:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3c:	881b      	ldrh	r3, [r3, #0]
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c44:	b29a      	uxth	r2, r3
 8009c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c48:	801a      	strh	r2, [r3, #0]
 8009c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c4e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009c50:	d921      	bls.n	8009c96 <USB_EPStartXfer+0x276>
 8009c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c56:	095b      	lsrs	r3, r3, #5
 8009c58:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c60:	f003 031f 	and.w	r3, r3, #31
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d104      	bne.n	8009c72 <USB_EPStartXfer+0x252>
 8009c68:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009c6c:	3b01      	subs	r3, #1
 8009c6e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c74:	881b      	ldrh	r3, [r3, #0]
 8009c76:	b29a      	uxth	r2, r3
 8009c78:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	029b      	lsls	r3, r3, #10
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	4313      	orrs	r3, r2
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c8e:	b29a      	uxth	r2, r3
 8009c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c92:	801a      	strh	r2, [r3, #0]
 8009c94:	e050      	b.n	8009d38 <USB_EPStartXfer+0x318>
 8009c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d10a      	bne.n	8009cb4 <USB_EPStartXfer+0x294>
 8009c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca0:	881b      	ldrh	r3, [r3, #0]
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cac:	b29a      	uxth	r2, r3
 8009cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb0:	801a      	strh	r2, [r3, #0]
 8009cb2:	e041      	b.n	8009d38 <USB_EPStartXfer+0x318>
 8009cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cb8:	085b      	lsrs	r3, r3, #1
 8009cba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cc2:	f003 0301 	and.w	r3, r3, #1
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d004      	beq.n	8009cd4 <USB_EPStartXfer+0x2b4>
 8009cca:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009cce:	3301      	adds	r3, #1
 8009cd0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd6:	881b      	ldrh	r3, [r3, #0]
 8009cd8:	b29a      	uxth	r2, r3
 8009cda:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	029b      	lsls	r3, r3, #10
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	b29a      	uxth	r2, r3
 8009ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cea:	801a      	strh	r2, [r3, #0]
 8009cec:	e024      	b.n	8009d38 <USB_EPStartXfer+0x318>
 8009cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	785b      	ldrb	r3, [r3, #1]
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d11c      	bne.n	8009d38 <USB_EPStartXfer+0x318>
 8009cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	461a      	mov	r2, r3
 8009d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d12:	4413      	add	r3, r2
 8009d14:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	011a      	lsls	r2, r3, #4
 8009d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d26:	4413      	add	r3, r2
 8009d28:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d32:	b29a      	uxth	r2, r3
 8009d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d36:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009d38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	895b      	ldrh	r3, [r3, #10]
 8009d44:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	6959      	ldr	r1, [r3, #20]
 8009d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009d5e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009d62:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009d66:	6800      	ldr	r0, [r0, #0]
 8009d68:	f001 fb49 	bl	800b3fe <USB_WritePMA>
            ep->xfer_buff += len;
 8009d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	695a      	ldr	r2, [r3, #20]
 8009d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d7c:	441a      	add	r2, r3
 8009d7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009d8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	6a1a      	ldr	r2, [r3, #32]
 8009d96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	691b      	ldr	r3, [r3, #16]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d90f      	bls.n	8009dc6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8009da6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009daa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	6a1a      	ldr	r2, [r3, #32]
 8009db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009db6:	1ad2      	subs	r2, r2, r3
 8009db8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	621a      	str	r2, [r3, #32]
 8009dc4:	e00e      	b.n	8009de4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	6a1b      	ldr	r3, [r3, #32]
 8009dd2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009dd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2200      	movs	r2, #0
 8009de2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009de8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	785b      	ldrb	r3, [r3, #1]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d177      	bne.n	8009ee4 <USB_EPStartXfer+0x4c4>
 8009df4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009df8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	61bb      	str	r3, [r7, #24]
 8009e00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	461a      	mov	r2, r3
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	4413      	add	r3, r2
 8009e16:	61bb      	str	r3, [r7, #24]
 8009e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	011a      	lsls	r2, r3, #4
 8009e26:	69bb      	ldr	r3, [r7, #24]
 8009e28:	4413      	add	r3, r2
 8009e2a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009e2e:	617b      	str	r3, [r7, #20]
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	881b      	ldrh	r3, [r3, #0]
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e3a:	b29a      	uxth	r2, r3
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	801a      	strh	r2, [r3, #0]
 8009e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e44:	2b3e      	cmp	r3, #62	@ 0x3e
 8009e46:	d921      	bls.n	8009e8c <USB_EPStartXfer+0x46c>
 8009e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e4c:	095b      	lsrs	r3, r3, #5
 8009e4e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e56:	f003 031f 	and.w	r3, r3, #31
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d104      	bne.n	8009e68 <USB_EPStartXfer+0x448>
 8009e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e62:	3b01      	subs	r3, #1
 8009e64:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	881b      	ldrh	r3, [r3, #0]
 8009e6c:	b29a      	uxth	r2, r3
 8009e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	029b      	lsls	r3, r3, #10
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e84:	b29a      	uxth	r2, r3
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	801a      	strh	r2, [r3, #0]
 8009e8a:	e056      	b.n	8009f3a <USB_EPStartXfer+0x51a>
 8009e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d10a      	bne.n	8009eaa <USB_EPStartXfer+0x48a>
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	881b      	ldrh	r3, [r3, #0]
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ea2:	b29a      	uxth	r2, r3
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	801a      	strh	r2, [r3, #0]
 8009ea8:	e047      	b.n	8009f3a <USB_EPStartXfer+0x51a>
 8009eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eae:	085b      	lsrs	r3, r3, #1
 8009eb0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eb8:	f003 0301 	and.w	r3, r3, #1
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d004      	beq.n	8009eca <USB_EPStartXfer+0x4aa>
 8009ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	881b      	ldrh	r3, [r3, #0]
 8009ece:	b29a      	uxth	r2, r3
 8009ed0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	029b      	lsls	r3, r3, #10
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	4313      	orrs	r3, r2
 8009edc:	b29a      	uxth	r2, r3
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	801a      	strh	r2, [r3, #0]
 8009ee2:	e02a      	b.n	8009f3a <USB_EPStartXfer+0x51a>
 8009ee4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ee8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	785b      	ldrb	r3, [r3, #1]
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d122      	bne.n	8009f3a <USB_EPStartXfer+0x51a>
 8009ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ef8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	623b      	str	r3, [r7, #32]
 8009f00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	461a      	mov	r2, r3
 8009f12:	6a3b      	ldr	r3, [r7, #32]
 8009f14:	4413      	add	r3, r2
 8009f16:	623b      	str	r3, [r7, #32]
 8009f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	011a      	lsls	r2, r3, #4
 8009f26:	6a3b      	ldr	r3, [r7, #32]
 8009f28:	4413      	add	r3, r2
 8009f2a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009f2e:	61fb      	str	r3, [r7, #28]
 8009f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f34:	b29a      	uxth	r2, r3
 8009f36:	69fb      	ldr	r3, [r7, #28]
 8009f38:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	891b      	ldrh	r3, [r3, #8]
 8009f46:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	6959      	ldr	r1, [r3, #20]
 8009f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009f60:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009f64:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009f68:	6800      	ldr	r0, [r0, #0]
 8009f6a:	f001 fa48 	bl	800b3fe <USB_WritePMA>
 8009f6e:	e3ee      	b.n	800a74e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009f70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	785b      	ldrb	r3, [r3, #1]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d177      	bne.n	800a070 <USB_EPStartXfer+0x650>
 8009f80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fa0:	4413      	add	r3, r2
 8009fa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009fa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	011a      	lsls	r2, r3, #4
 8009fb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fb4:	4413      	add	r3, r2
 8009fb6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009fba:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fbe:	881b      	ldrh	r3, [r3, #0]
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fc6:	b29a      	uxth	r2, r3
 8009fc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fca:	801a      	strh	r2, [r3, #0]
 8009fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fd0:	2b3e      	cmp	r3, #62	@ 0x3e
 8009fd2:	d921      	bls.n	800a018 <USB_EPStartXfer+0x5f8>
 8009fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fd8:	095b      	lsrs	r3, r3, #5
 8009fda:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fe2:	f003 031f 	and.w	r3, r3, #31
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d104      	bne.n	8009ff4 <USB_EPStartXfer+0x5d4>
 8009fea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009fee:	3b01      	subs	r3, #1
 8009ff0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009ff4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ff6:	881b      	ldrh	r3, [r3, #0]
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	029b      	lsls	r3, r3, #10
 800a002:	b29b      	uxth	r3, r3
 800a004:	4313      	orrs	r3, r2
 800a006:	b29b      	uxth	r3, r3
 800a008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a00c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a010:	b29a      	uxth	r2, r3
 800a012:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a014:	801a      	strh	r2, [r3, #0]
 800a016:	e056      	b.n	800a0c6 <USB_EPStartXfer+0x6a6>
 800a018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10a      	bne.n	800a036 <USB_EPStartXfer+0x616>
 800a020:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a022:	881b      	ldrh	r3, [r3, #0]
 800a024:	b29b      	uxth	r3, r3
 800a026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a02a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a02e:	b29a      	uxth	r2, r3
 800a030:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a032:	801a      	strh	r2, [r3, #0]
 800a034:	e047      	b.n	800a0c6 <USB_EPStartXfer+0x6a6>
 800a036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a03a:	085b      	lsrs	r3, r3, #1
 800a03c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a044:	f003 0301 	and.w	r3, r3, #1
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d004      	beq.n	800a056 <USB_EPStartXfer+0x636>
 800a04c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a050:	3301      	adds	r3, #1
 800a052:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a056:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a058:	881b      	ldrh	r3, [r3, #0]
 800a05a:	b29a      	uxth	r2, r3
 800a05c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a060:	b29b      	uxth	r3, r3
 800a062:	029b      	lsls	r3, r3, #10
 800a064:	b29b      	uxth	r3, r3
 800a066:	4313      	orrs	r3, r2
 800a068:	b29a      	uxth	r2, r3
 800a06a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a06c:	801a      	strh	r2, [r3, #0]
 800a06e:	e02a      	b.n	800a0c6 <USB_EPStartXfer+0x6a6>
 800a070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	785b      	ldrb	r3, [r3, #1]
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d122      	bne.n	800a0c6 <USB_EPStartXfer+0x6a6>
 800a080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a084:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a08c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a090:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	461a      	mov	r2, r3
 800a09e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0a0:	4413      	add	r3, r2
 800a0a2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a0a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	011a      	lsls	r2, r3, #4
 800a0b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0b4:	4413      	add	r3, r2
 800a0b6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a0ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0c0:	b29a      	uxth	r2, r3
 800a0c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a0c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	891b      	ldrh	r3, [r3, #8]
 800a0d2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a0d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	6959      	ldr	r1, [r3, #20]
 800a0e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a0ec:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a0f0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a0f4:	6800      	ldr	r0, [r0, #0]
 800a0f6:	f001 f982 	bl	800b3fe <USB_WritePMA>
            ep->xfer_buff += len;
 800a0fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	695a      	ldr	r2, [r3, #20]
 800a106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a10a:	441a      	add	r2, r3
 800a10c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a110:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a11c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	6a1a      	ldr	r2, [r3, #32]
 800a124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a128:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	691b      	ldr	r3, [r3, #16]
 800a130:	429a      	cmp	r2, r3
 800a132:	d90f      	bls.n	800a154 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800a134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a138:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	6a1a      	ldr	r2, [r3, #32]
 800a140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a144:	1ad2      	subs	r2, r2, r3
 800a146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a14a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	621a      	str	r2, [r3, #32]
 800a152:	e00e      	b.n	800a172 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800a154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	6a1b      	ldr	r3, [r3, #32]
 800a160:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800a164:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a168:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	2200      	movs	r2, #0
 800a170:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a176:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a17e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a182:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	785b      	ldrb	r3, [r3, #1]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d177      	bne.n	800a27e <USB_EPStartXfer+0x85e>
 800a18e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a192:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a19a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a19e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ae:	4413      	add	r3, r2
 800a1b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a1b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	011a      	lsls	r2, r3, #4
 800a1c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c2:	4413      	add	r3, r2
 800a1c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a1c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1cc:	881b      	ldrh	r3, [r3, #0]
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a1d4:	b29a      	uxth	r2, r3
 800a1d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1d8:	801a      	strh	r2, [r3, #0]
 800a1da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1de:	2b3e      	cmp	r3, #62	@ 0x3e
 800a1e0:	d921      	bls.n	800a226 <USB_EPStartXfer+0x806>
 800a1e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1e6:	095b      	lsrs	r3, r3, #5
 800a1e8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a1ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1f0:	f003 031f 	and.w	r3, r3, #31
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d104      	bne.n	800a202 <USB_EPStartXfer+0x7e2>
 800a1f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1fc:	3b01      	subs	r3, #1
 800a1fe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a204:	881b      	ldrh	r3, [r3, #0]
 800a206:	b29a      	uxth	r2, r3
 800a208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	029b      	lsls	r3, r3, #10
 800a210:	b29b      	uxth	r3, r3
 800a212:	4313      	orrs	r3, r2
 800a214:	b29b      	uxth	r3, r3
 800a216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a21a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a21e:	b29a      	uxth	r2, r3
 800a220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a222:	801a      	strh	r2, [r3, #0]
 800a224:	e050      	b.n	800a2c8 <USB_EPStartXfer+0x8a8>
 800a226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d10a      	bne.n	800a244 <USB_EPStartXfer+0x824>
 800a22e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a230:	881b      	ldrh	r3, [r3, #0]
 800a232:	b29b      	uxth	r3, r3
 800a234:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a238:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a23c:	b29a      	uxth	r2, r3
 800a23e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a240:	801a      	strh	r2, [r3, #0]
 800a242:	e041      	b.n	800a2c8 <USB_EPStartXfer+0x8a8>
 800a244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a248:	085b      	lsrs	r3, r3, #1
 800a24a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a24e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a252:	f003 0301 	and.w	r3, r3, #1
 800a256:	2b00      	cmp	r3, #0
 800a258:	d004      	beq.n	800a264 <USB_EPStartXfer+0x844>
 800a25a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a25e:	3301      	adds	r3, #1
 800a260:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a266:	881b      	ldrh	r3, [r3, #0]
 800a268:	b29a      	uxth	r2, r3
 800a26a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a26e:	b29b      	uxth	r3, r3
 800a270:	029b      	lsls	r3, r3, #10
 800a272:	b29b      	uxth	r3, r3
 800a274:	4313      	orrs	r3, r2
 800a276:	b29a      	uxth	r2, r3
 800a278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a27a:	801a      	strh	r2, [r3, #0]
 800a27c:	e024      	b.n	800a2c8 <USB_EPStartXfer+0x8a8>
 800a27e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a282:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	785b      	ldrb	r3, [r3, #1]
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	d11c      	bne.n	800a2c8 <USB_EPStartXfer+0x8a8>
 800a28e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a292:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	461a      	mov	r2, r3
 800a2a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2a2:	4413      	add	r3, r2
 800a2a4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	011a      	lsls	r2, r3, #4
 800a2b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2b6:	4413      	add	r3, r2
 800a2b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a2bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2c2:	b29a      	uxth	r2, r3
 800a2c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2c6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a2c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	895b      	ldrh	r3, [r3, #10]
 800a2d4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a2d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	6959      	ldr	r1, [r3, #20]
 800a2e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a2ee:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a2f2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a2f6:	6800      	ldr	r0, [r0, #0]
 800a2f8:	f001 f881 	bl	800b3fe <USB_WritePMA>
 800a2fc:	e227      	b.n	800a74e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a2fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a302:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	6a1b      	ldr	r3, [r3, #32]
 800a30a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a30e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a312:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a31c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	4413      	add	r3, r2
 800a328:	881b      	ldrh	r3, [r3, #0]
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a330:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a334:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800a338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a33c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a346:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	441a      	add	r2, r3
 800a352:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a356:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a35a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a35e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a366:	b29b      	uxth	r3, r3
 800a368:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a36a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a36e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a37a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a384:	b29b      	uxth	r3, r3
 800a386:	461a      	mov	r2, r3
 800a388:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a38a:	4413      	add	r3, r2
 800a38c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a38e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a392:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	011a      	lsls	r2, r3, #4
 800a39c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a39e:	4413      	add	r3, r2
 800a3a0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a3a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a3a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3aa:	b29a      	uxth	r2, r3
 800a3ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a3ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a3b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	891b      	ldrh	r3, [r3, #8]
 800a3bc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a3c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	6959      	ldr	r1, [r3, #20]
 800a3cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a3d6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a3da:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a3de:	6800      	ldr	r0, [r0, #0]
 800a3e0:	f001 f80d 	bl	800b3fe <USB_WritePMA>
 800a3e4:	e1b3      	b.n	800a74e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a3e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	6a1a      	ldr	r2, [r3, #32]
 800a3f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3f6:	1ad2      	subs	r2, r2, r3
 800a3f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a408:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a40c:	681a      	ldr	r2, [r3, #0]
 800a40e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a412:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	4413      	add	r3, r2
 800a41e:	881b      	ldrh	r3, [r3, #0]
 800a420:	b29b      	uxth	r3, r3
 800a422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a426:	2b00      	cmp	r3, #0
 800a428:	f000 80c6 	beq.w	800a5b8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a42c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a430:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	673b      	str	r3, [r7, #112]	@ 0x70
 800a438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a43c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	785b      	ldrb	r3, [r3, #1]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d177      	bne.n	800a538 <USB_EPStartXfer+0xb18>
 800a448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a44c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a458:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a462:	b29b      	uxth	r3, r3
 800a464:	461a      	mov	r2, r3
 800a466:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a468:	4413      	add	r3, r2
 800a46a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a46c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	011a      	lsls	r2, r3, #4
 800a47a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a47c:	4413      	add	r3, r2
 800a47e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a482:	667b      	str	r3, [r7, #100]	@ 0x64
 800a484:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a486:	881b      	ldrh	r3, [r3, #0]
 800a488:	b29b      	uxth	r3, r3
 800a48a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a48e:	b29a      	uxth	r2, r3
 800a490:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a492:	801a      	strh	r2, [r3, #0]
 800a494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a498:	2b3e      	cmp	r3, #62	@ 0x3e
 800a49a:	d921      	bls.n	800a4e0 <USB_EPStartXfer+0xac0>
 800a49c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4a0:	095b      	lsrs	r3, r3, #5
 800a4a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a4a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4aa:	f003 031f 	and.w	r3, r3, #31
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d104      	bne.n	800a4bc <USB_EPStartXfer+0xa9c>
 800a4b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a4b6:	3b01      	subs	r3, #1
 800a4b8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a4bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a4be:	881b      	ldrh	r3, [r3, #0]
 800a4c0:	b29a      	uxth	r2, r3
 800a4c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	029b      	lsls	r3, r3, #10
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a4dc:	801a      	strh	r2, [r3, #0]
 800a4de:	e050      	b.n	800a582 <USB_EPStartXfer+0xb62>
 800a4e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d10a      	bne.n	800a4fe <USB_EPStartXfer+0xade>
 800a4e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a4ea:	881b      	ldrh	r3, [r3, #0]
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4f6:	b29a      	uxth	r2, r3
 800a4f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a4fa:	801a      	strh	r2, [r3, #0]
 800a4fc:	e041      	b.n	800a582 <USB_EPStartXfer+0xb62>
 800a4fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a502:	085b      	lsrs	r3, r3, #1
 800a504:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a50c:	f003 0301 	and.w	r3, r3, #1
 800a510:	2b00      	cmp	r3, #0
 800a512:	d004      	beq.n	800a51e <USB_EPStartXfer+0xafe>
 800a514:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a518:	3301      	adds	r3, #1
 800a51a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a51e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a520:	881b      	ldrh	r3, [r3, #0]
 800a522:	b29a      	uxth	r2, r3
 800a524:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a528:	b29b      	uxth	r3, r3
 800a52a:	029b      	lsls	r3, r3, #10
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	4313      	orrs	r3, r2
 800a530:	b29a      	uxth	r2, r3
 800a532:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a534:	801a      	strh	r2, [r3, #0]
 800a536:	e024      	b.n	800a582 <USB_EPStartXfer+0xb62>
 800a538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a53c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	785b      	ldrb	r3, [r3, #1]
 800a544:	2b01      	cmp	r3, #1
 800a546:	d11c      	bne.n	800a582 <USB_EPStartXfer+0xb62>
 800a548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a54c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a556:	b29b      	uxth	r3, r3
 800a558:	461a      	mov	r2, r3
 800a55a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a55c:	4413      	add	r3, r2
 800a55e:	673b      	str	r3, [r7, #112]	@ 0x70
 800a560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a564:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	011a      	lsls	r2, r3, #4
 800a56e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a570:	4413      	add	r3, r2
 800a572:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a576:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a57c:	b29a      	uxth	r2, r3
 800a57e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a580:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a582:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a586:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	895b      	ldrh	r3, [r3, #10]
 800a58e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a592:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a596:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	6959      	ldr	r1, [r3, #20]
 800a59e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a5a8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a5ac:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a5b0:	6800      	ldr	r0, [r0, #0]
 800a5b2:	f000 ff24 	bl	800b3fe <USB_WritePMA>
 800a5b6:	e0ca      	b.n	800a74e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a5b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	785b      	ldrb	r3, [r3, #1]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d177      	bne.n	800a6b8 <USB_EPStartXfer+0xc98>
 800a5c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a5d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	461a      	mov	r2, r3
 800a5e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a5e8:	4413      	add	r3, r2
 800a5ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a5ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	011a      	lsls	r2, r3, #4
 800a5fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a5fc:	4413      	add	r3, r2
 800a5fe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a602:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a604:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a606:	881b      	ldrh	r3, [r3, #0]
 800a608:	b29b      	uxth	r3, r3
 800a60a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a60e:	b29a      	uxth	r2, r3
 800a610:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a612:	801a      	strh	r2, [r3, #0]
 800a614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a618:	2b3e      	cmp	r3, #62	@ 0x3e
 800a61a:	d921      	bls.n	800a660 <USB_EPStartXfer+0xc40>
 800a61c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a620:	095b      	lsrs	r3, r3, #5
 800a622:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a62a:	f003 031f 	and.w	r3, r3, #31
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d104      	bne.n	800a63c <USB_EPStartXfer+0xc1c>
 800a632:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a636:	3b01      	subs	r3, #1
 800a638:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a63c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a63e:	881b      	ldrh	r3, [r3, #0]
 800a640:	b29a      	uxth	r2, r3
 800a642:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a646:	b29b      	uxth	r3, r3
 800a648:	029b      	lsls	r3, r3, #10
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	4313      	orrs	r3, r2
 800a64e:	b29b      	uxth	r3, r3
 800a650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a658:	b29a      	uxth	r2, r3
 800a65a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a65c:	801a      	strh	r2, [r3, #0]
 800a65e:	e05c      	b.n	800a71a <USB_EPStartXfer+0xcfa>
 800a660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a664:	2b00      	cmp	r3, #0
 800a666:	d10a      	bne.n	800a67e <USB_EPStartXfer+0xc5e>
 800a668:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a66a:	881b      	ldrh	r3, [r3, #0]
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a676:	b29a      	uxth	r2, r3
 800a678:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a67a:	801a      	strh	r2, [r3, #0]
 800a67c:	e04d      	b.n	800a71a <USB_EPStartXfer+0xcfa>
 800a67e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a682:	085b      	lsrs	r3, r3, #1
 800a684:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a68c:	f003 0301 	and.w	r3, r3, #1
 800a690:	2b00      	cmp	r3, #0
 800a692:	d004      	beq.n	800a69e <USB_EPStartXfer+0xc7e>
 800a694:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a698:	3301      	adds	r3, #1
 800a69a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a69e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a6a0:	881b      	ldrh	r3, [r3, #0]
 800a6a2:	b29a      	uxth	r2, r3
 800a6a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a6a8:	b29b      	uxth	r3, r3
 800a6aa:	029b      	lsls	r3, r3, #10
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	b29a      	uxth	r2, r3
 800a6b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a6b4:	801a      	strh	r2, [r3, #0]
 800a6b6:	e030      	b.n	800a71a <USB_EPStartXfer+0xcfa>
 800a6b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	785b      	ldrb	r3, [r3, #1]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d128      	bne.n	800a71a <USB_EPStartXfer+0xcfa>
 800a6c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a6d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a6ec:	4413      	add	r3, r2
 800a6ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a6f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	011a      	lsls	r2, r3, #4
 800a700:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a704:	4413      	add	r3, r2
 800a706:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a70a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a70e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a712:	b29a      	uxth	r2, r3
 800a714:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a718:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a71a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a71e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	891b      	ldrh	r3, [r3, #8]
 800a726:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a72a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a72e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	6959      	ldr	r1, [r3, #20]
 800a736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a740:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a744:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a748:	6800      	ldr	r0, [r0, #0]
 800a74a:	f000 fe58 	bl	800b3fe <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a74e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a752:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a75c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	4413      	add	r3, r2
 800a768:	881b      	ldrh	r3, [r3, #0]
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a770:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a774:	817b      	strh	r3, [r7, #10]
 800a776:	897b      	ldrh	r3, [r7, #10]
 800a778:	f083 0310 	eor.w	r3, r3, #16
 800a77c:	817b      	strh	r3, [r7, #10]
 800a77e:	897b      	ldrh	r3, [r7, #10]
 800a780:	f083 0320 	eor.w	r3, r3, #32
 800a784:	817b      	strh	r3, [r7, #10]
 800a786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a78a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a794:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	009b      	lsls	r3, r3, #2
 800a79e:	441a      	add	r2, r3
 800a7a0:	897b      	ldrh	r3, [r7, #10]
 800a7a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a7a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a7aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a7ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	8013      	strh	r3, [r2, #0]
 800a7b6:	f000 bcde 	b.w	800b176 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a7ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	7b1b      	ldrb	r3, [r3, #12]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	f040 80bb 	bne.w	800a942 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a7cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	699a      	ldr	r2, [r3, #24]
 800a7d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	691b      	ldr	r3, [r3, #16]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d917      	bls.n	800a818 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a7e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	691b      	ldr	r3, [r3, #16]
 800a7f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800a7f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	699a      	ldr	r2, [r3, #24]
 800a804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a808:	1ad2      	subs	r2, r2, r3
 800a80a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a80e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	619a      	str	r2, [r3, #24]
 800a816:	e00e      	b.n	800a836 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a81c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	699b      	ldr	r3, [r3, #24]
 800a824:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800a828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a82c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	2200      	movs	r2, #0
 800a834:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a83a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a848:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a852:	b29b      	uxth	r3, r3
 800a854:	461a      	mov	r2, r3
 800a856:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a85a:	4413      	add	r3, r2
 800a85c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a864:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	011a      	lsls	r2, r3, #4
 800a86e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a872:	4413      	add	r3, r2
 800a874:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a878:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a87c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a880:	881b      	ldrh	r3, [r3, #0]
 800a882:	b29b      	uxth	r3, r3
 800a884:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a888:	b29a      	uxth	r2, r3
 800a88a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a88e:	801a      	strh	r2, [r3, #0]
 800a890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a894:	2b3e      	cmp	r3, #62	@ 0x3e
 800a896:	d924      	bls.n	800a8e2 <USB_EPStartXfer+0xec2>
 800a898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a89c:	095b      	lsrs	r3, r3, #5
 800a89e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a8a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8a6:	f003 031f 	and.w	r3, r3, #31
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d104      	bne.n	800a8b8 <USB_EPStartXfer+0xe98>
 800a8ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a8b2:	3b01      	subs	r3, #1
 800a8b4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a8b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a8bc:	881b      	ldrh	r3, [r3, #0]
 800a8be:	b29a      	uxth	r2, r3
 800a8c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a8c4:	b29b      	uxth	r3, r3
 800a8c6:	029b      	lsls	r3, r3, #10
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8d6:	b29a      	uxth	r2, r3
 800a8d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a8dc:	801a      	strh	r2, [r3, #0]
 800a8de:	f000 bc10 	b.w	800b102 <USB_EPStartXfer+0x16e2>
 800a8e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d10c      	bne.n	800a904 <USB_EPStartXfer+0xee4>
 800a8ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a8ee:	881b      	ldrh	r3, [r3, #0]
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8fa:	b29a      	uxth	r2, r3
 800a8fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a900:	801a      	strh	r2, [r3, #0]
 800a902:	e3fe      	b.n	800b102 <USB_EPStartXfer+0x16e2>
 800a904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a908:	085b      	lsrs	r3, r3, #1
 800a90a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a90e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a912:	f003 0301 	and.w	r3, r3, #1
 800a916:	2b00      	cmp	r3, #0
 800a918:	d004      	beq.n	800a924 <USB_EPStartXfer+0xf04>
 800a91a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a91e:	3301      	adds	r3, #1
 800a920:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a924:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a928:	881b      	ldrh	r3, [r3, #0]
 800a92a:	b29a      	uxth	r2, r3
 800a92c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a930:	b29b      	uxth	r3, r3
 800a932:	029b      	lsls	r3, r3, #10
 800a934:	b29b      	uxth	r3, r3
 800a936:	4313      	orrs	r3, r2
 800a938:	b29a      	uxth	r2, r3
 800a93a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a93e:	801a      	strh	r2, [r3, #0]
 800a940:	e3df      	b.n	800b102 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a946:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	78db      	ldrb	r3, [r3, #3]
 800a94e:	2b02      	cmp	r3, #2
 800a950:	f040 8218 	bne.w	800ad84 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	785b      	ldrb	r3, [r3, #1]
 800a960:	2b00      	cmp	r3, #0
 800a962:	f040 809d 	bne.w	800aaa0 <USB_EPStartXfer+0x1080>
 800a966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a96a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a978:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a982:	b29b      	uxth	r3, r3
 800a984:	461a      	mov	r2, r3
 800a986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a98a:	4413      	add	r3, r2
 800a98c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a994:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	011a      	lsls	r2, r3, #4
 800a99e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a9a2:	4413      	add	r3, r2
 800a9a4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a9a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a9ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a9b0:	881b      	ldrh	r3, [r3, #0]
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a9b8:	b29a      	uxth	r2, r3
 800a9ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a9be:	801a      	strh	r2, [r3, #0]
 800a9c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	691b      	ldr	r3, [r3, #16]
 800a9cc:	2b3e      	cmp	r3, #62	@ 0x3e
 800a9ce:	d92b      	bls.n	800aa28 <USB_EPStartXfer+0x1008>
 800a9d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	691b      	ldr	r3, [r3, #16]
 800a9dc:	095b      	lsrs	r3, r3, #5
 800a9de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a9e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	691b      	ldr	r3, [r3, #16]
 800a9ee:	f003 031f 	and.w	r3, r3, #31
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d104      	bne.n	800aa00 <USB_EPStartXfer+0xfe0>
 800a9f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800aa00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800aa04:	881b      	ldrh	r3, [r3, #0]
 800aa06:	b29a      	uxth	r2, r3
 800aa08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	029b      	lsls	r3, r3, #10
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	4313      	orrs	r3, r2
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa1e:	b29a      	uxth	r2, r3
 800aa20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800aa24:	801a      	strh	r2, [r3, #0]
 800aa26:	e070      	b.n	800ab0a <USB_EPStartXfer+0x10ea>
 800aa28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	691b      	ldr	r3, [r3, #16]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d10c      	bne.n	800aa52 <USB_EPStartXfer+0x1032>
 800aa38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800aa3c:	881b      	ldrh	r3, [r3, #0]
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa48:	b29a      	uxth	r2, r3
 800aa4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800aa4e:	801a      	strh	r2, [r3, #0]
 800aa50:	e05b      	b.n	800ab0a <USB_EPStartXfer+0x10ea>
 800aa52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	691b      	ldr	r3, [r3, #16]
 800aa5e:	085b      	lsrs	r3, r3, #1
 800aa60:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800aa64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	691b      	ldr	r3, [r3, #16]
 800aa70:	f003 0301 	and.w	r3, r3, #1
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d004      	beq.n	800aa82 <USB_EPStartXfer+0x1062>
 800aa78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800aa82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800aa86:	881b      	ldrh	r3, [r3, #0]
 800aa88:	b29a      	uxth	r2, r3
 800aa8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	029b      	lsls	r3, r3, #10
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	4313      	orrs	r3, r2
 800aa96:	b29a      	uxth	r2, r3
 800aa98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800aa9c:	801a      	strh	r2, [r3, #0]
 800aa9e:	e034      	b.n	800ab0a <USB_EPStartXfer+0x10ea>
 800aaa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	785b      	ldrb	r3, [r3, #1]
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d12c      	bne.n	800ab0a <USB_EPStartXfer+0x10ea>
 800aab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aab4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aabe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aac2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aacc:	b29b      	uxth	r3, r3
 800aace:	461a      	mov	r2, r3
 800aad0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aad4:	4413      	add	r3, r2
 800aad6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aade:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	011a      	lsls	r2, r3, #4
 800aae8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aaec:	4413      	add	r3, r2
 800aaee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800aaf2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aaf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aafa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	691b      	ldr	r3, [r3, #16]
 800ab02:	b29a      	uxth	r2, r3
 800ab04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ab08:	801a      	strh	r2, [r3, #0]
 800ab0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ab18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	785b      	ldrb	r3, [r3, #1]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f040 809d 	bne.w	800ac64 <USB_EPStartXfer+0x1244>
 800ab2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ab38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	461a      	mov	r2, r3
 800ab4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ab4e:	4413      	add	r3, r2
 800ab50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ab54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	011a      	lsls	r2, r3, #4
 800ab62:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ab66:	4413      	add	r3, r2
 800ab68:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800ab6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ab70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ab74:	881b      	ldrh	r3, [r3, #0]
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab7c:	b29a      	uxth	r2, r3
 800ab7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ab82:	801a      	strh	r2, [r3, #0]
 800ab84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	691b      	ldr	r3, [r3, #16]
 800ab90:	2b3e      	cmp	r3, #62	@ 0x3e
 800ab92:	d92b      	bls.n	800abec <USB_EPStartXfer+0x11cc>
 800ab94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	691b      	ldr	r3, [r3, #16]
 800aba0:	095b      	lsrs	r3, r3, #5
 800aba2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800aba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	691b      	ldr	r3, [r3, #16]
 800abb2:	f003 031f 	and.w	r3, r3, #31
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d104      	bne.n	800abc4 <USB_EPStartXfer+0x11a4>
 800abba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abbe:	3b01      	subs	r3, #1
 800abc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800abc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800abc8:	881b      	ldrh	r3, [r3, #0]
 800abca:	b29a      	uxth	r2, r3
 800abcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	029b      	lsls	r3, r3, #10
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	4313      	orrs	r3, r2
 800abd8:	b29b      	uxth	r3, r3
 800abda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abe2:	b29a      	uxth	r2, r3
 800abe4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800abe8:	801a      	strh	r2, [r3, #0]
 800abea:	e069      	b.n	800acc0 <USB_EPStartXfer+0x12a0>
 800abec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	691b      	ldr	r3, [r3, #16]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d10c      	bne.n	800ac16 <USB_EPStartXfer+0x11f6>
 800abfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ac00:	881b      	ldrh	r3, [r3, #0]
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac0c:	b29a      	uxth	r2, r3
 800ac0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ac12:	801a      	strh	r2, [r3, #0]
 800ac14:	e054      	b.n	800acc0 <USB_EPStartXfer+0x12a0>
 800ac16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	691b      	ldr	r3, [r3, #16]
 800ac22:	085b      	lsrs	r3, r3, #1
 800ac24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ac28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	691b      	ldr	r3, [r3, #16]
 800ac34:	f003 0301 	and.w	r3, r3, #1
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d004      	beq.n	800ac46 <USB_EPStartXfer+0x1226>
 800ac3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac40:	3301      	adds	r3, #1
 800ac42:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ac46:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ac4a:	881b      	ldrh	r3, [r3, #0]
 800ac4c:	b29a      	uxth	r2, r3
 800ac4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	029b      	lsls	r3, r3, #10
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	b29a      	uxth	r2, r3
 800ac5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ac60:	801a      	strh	r2, [r3, #0]
 800ac62:	e02d      	b.n	800acc0 <USB_EPStartXfer+0x12a0>
 800ac64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	785b      	ldrb	r3, [r3, #1]
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d125      	bne.n	800acc0 <USB_EPStartXfer+0x12a0>
 800ac74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	461a      	mov	r2, r3
 800ac86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ac8a:	4413      	add	r3, r2
 800ac8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ac90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	011a      	lsls	r2, r3, #4
 800ac9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800aca2:	4413      	add	r3, r2
 800aca4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800aca8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800acac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	691b      	ldr	r3, [r3, #16]
 800acb8:	b29a      	uxth	r2, r3
 800acba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800acbe:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800acc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	69db      	ldr	r3, [r3, #28]
 800accc:	2b00      	cmp	r3, #0
 800acce:	f000 8218 	beq.w	800b102 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800acd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ace0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	4413      	add	r3, r2
 800acec:	881b      	ldrh	r3, [r3, #0]
 800acee:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800acf2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800acf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d005      	beq.n	800ad0a <USB_EPStartXfer+0x12ea>
 800acfe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ad02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d10d      	bne.n	800ad26 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ad0a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ad0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	f040 81f5 	bne.w	800b102 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ad18:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ad1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	f040 81ee 	bne.w	800b102 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800ad26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	4413      	add	r3, r2
 800ad40:	881b      	ldrh	r3, [r3, #0]
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad4c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800ad50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad58:	681a      	ldr	r2, [r3, #0]
 800ad5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	441a      	add	r2, r3
 800ad6a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800ad6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad7a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	8013      	strh	r3, [r2, #0]
 800ad82:	e1be      	b.n	800b102 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800ad84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	78db      	ldrb	r3, [r3, #3]
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	f040 81b4 	bne.w	800b0fe <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800ad96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	699a      	ldr	r2, [r3, #24]
 800ada2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ada6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	691b      	ldr	r3, [r3, #16]
 800adae:	429a      	cmp	r2, r3
 800adb0:	d917      	bls.n	800ade2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800adb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	691b      	ldr	r3, [r3, #16]
 800adbe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800adc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	699a      	ldr	r2, [r3, #24]
 800adce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800add2:	1ad2      	subs	r2, r2, r3
 800add4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800add8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	619a      	str	r2, [r3, #24]
 800ade0:	e00e      	b.n	800ae00 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800ade2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ade6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	699b      	ldr	r3, [r3, #24]
 800adee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800adf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	2200      	movs	r2, #0
 800adfe:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ae00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	785b      	ldrb	r3, [r3, #1]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	f040 8085 	bne.w	800af1c <USB_EPStartXfer+0x14fc>
 800ae12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ae20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	461a      	mov	r2, r3
 800ae32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ae36:	4413      	add	r3, r2
 800ae38:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ae3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	011a      	lsls	r2, r3, #4
 800ae4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ae4e:	4413      	add	r3, r2
 800ae50:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ae54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ae58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ae5c:	881b      	ldrh	r3, [r3, #0]
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae64:	b29a      	uxth	r2, r3
 800ae66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ae6a:	801a      	strh	r2, [r3, #0]
 800ae6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae70:	2b3e      	cmp	r3, #62	@ 0x3e
 800ae72:	d923      	bls.n	800aebc <USB_EPStartXfer+0x149c>
 800ae74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae78:	095b      	lsrs	r3, r3, #5
 800ae7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ae7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae82:	f003 031f 	and.w	r3, r3, #31
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d104      	bne.n	800ae94 <USB_EPStartXfer+0x1474>
 800ae8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae8e:	3b01      	subs	r3, #1
 800ae90:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ae94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ae98:	881b      	ldrh	r3, [r3, #0]
 800ae9a:	b29a      	uxth	r2, r3
 800ae9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	029b      	lsls	r3, r3, #10
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	4313      	orrs	r3, r2
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aeae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aeb2:	b29a      	uxth	r2, r3
 800aeb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aeb8:	801a      	strh	r2, [r3, #0]
 800aeba:	e060      	b.n	800af7e <USB_EPStartXfer+0x155e>
 800aebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d10c      	bne.n	800aede <USB_EPStartXfer+0x14be>
 800aec4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aec8:	881b      	ldrh	r3, [r3, #0]
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aed0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aed4:	b29a      	uxth	r2, r3
 800aed6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aeda:	801a      	strh	r2, [r3, #0]
 800aedc:	e04f      	b.n	800af7e <USB_EPStartXfer+0x155e>
 800aede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aee2:	085b      	lsrs	r3, r3, #1
 800aee4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800aee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeec:	f003 0301 	and.w	r3, r3, #1
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d004      	beq.n	800aefe <USB_EPStartXfer+0x14de>
 800aef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aef8:	3301      	adds	r3, #1
 800aefa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800aefe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800af02:	881b      	ldrh	r3, [r3, #0]
 800af04:	b29a      	uxth	r2, r3
 800af06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af0a:	b29b      	uxth	r3, r3
 800af0c:	029b      	lsls	r3, r3, #10
 800af0e:	b29b      	uxth	r3, r3
 800af10:	4313      	orrs	r3, r2
 800af12:	b29a      	uxth	r2, r3
 800af14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800af18:	801a      	strh	r2, [r3, #0]
 800af1a:	e030      	b.n	800af7e <USB_EPStartXfer+0x155e>
 800af1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	785b      	ldrb	r3, [r3, #1]
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d128      	bne.n	800af7e <USB_EPStartXfer+0x155e>
 800af2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800af3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af48:	b29b      	uxth	r3, r3
 800af4a:	461a      	mov	r2, r3
 800af4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800af50:	4413      	add	r3, r2
 800af52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800af56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	011a      	lsls	r2, r3, #4
 800af64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800af68:	4413      	add	r3, r2
 800af6a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800af6e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800af72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af76:	b29a      	uxth	r2, r3
 800af78:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800af7c:	801a      	strh	r2, [r3, #0]
 800af7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800af8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	785b      	ldrb	r3, [r3, #1]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	f040 8085 	bne.w	800b0a8 <USB_EPStartXfer+0x1688>
 800af9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afa2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800afac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800afba:	b29b      	uxth	r3, r3
 800afbc:	461a      	mov	r2, r3
 800afbe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800afc2:	4413      	add	r3, r2
 800afc4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800afc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	011a      	lsls	r2, r3, #4
 800afd6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800afda:	4413      	add	r3, r2
 800afdc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800afe0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800afe4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800afe8:	881b      	ldrh	r3, [r3, #0]
 800afea:	b29b      	uxth	r3, r3
 800afec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aff0:	b29a      	uxth	r2, r3
 800aff2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aff6:	801a      	strh	r2, [r3, #0]
 800aff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800affc:	2b3e      	cmp	r3, #62	@ 0x3e
 800affe:	d923      	bls.n	800b048 <USB_EPStartXfer+0x1628>
 800b000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b004:	095b      	lsrs	r3, r3, #5
 800b006:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b00a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b00e:	f003 031f 	and.w	r3, r3, #31
 800b012:	2b00      	cmp	r3, #0
 800b014:	d104      	bne.n	800b020 <USB_EPStartXfer+0x1600>
 800b016:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b01a:	3b01      	subs	r3, #1
 800b01c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b020:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b024:	881b      	ldrh	r3, [r3, #0]
 800b026:	b29a      	uxth	r2, r3
 800b028:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	029b      	lsls	r3, r3, #10
 800b030:	b29b      	uxth	r3, r3
 800b032:	4313      	orrs	r3, r2
 800b034:	b29b      	uxth	r3, r3
 800b036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b03a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b03e:	b29a      	uxth	r2, r3
 800b040:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b044:	801a      	strh	r2, [r3, #0]
 800b046:	e05c      	b.n	800b102 <USB_EPStartXfer+0x16e2>
 800b048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d10c      	bne.n	800b06a <USB_EPStartXfer+0x164a>
 800b050:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b054:	881b      	ldrh	r3, [r3, #0]
 800b056:	b29b      	uxth	r3, r3
 800b058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b05c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b060:	b29a      	uxth	r2, r3
 800b062:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b066:	801a      	strh	r2, [r3, #0]
 800b068:	e04b      	b.n	800b102 <USB_EPStartXfer+0x16e2>
 800b06a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b06e:	085b      	lsrs	r3, r3, #1
 800b070:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b078:	f003 0301 	and.w	r3, r3, #1
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d004      	beq.n	800b08a <USB_EPStartXfer+0x166a>
 800b080:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b084:	3301      	adds	r3, #1
 800b086:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b08a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b08e:	881b      	ldrh	r3, [r3, #0]
 800b090:	b29a      	uxth	r2, r3
 800b092:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b096:	b29b      	uxth	r3, r3
 800b098:	029b      	lsls	r3, r3, #10
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	4313      	orrs	r3, r2
 800b09e:	b29a      	uxth	r2, r3
 800b0a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b0a4:	801a      	strh	r2, [r3, #0]
 800b0a6:	e02c      	b.n	800b102 <USB_EPStartXfer+0x16e2>
 800b0a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	785b      	ldrb	r3, [r3, #1]
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d124      	bne.n	800b102 <USB_EPStartXfer+0x16e2>
 800b0b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b0c6:	b29b      	uxth	r3, r3
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b0ce:	4413      	add	r3, r2
 800b0d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b0d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	011a      	lsls	r2, r3, #4
 800b0e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b0e6:	4413      	add	r3, r2
 800b0e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b0ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b0f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0f4:	b29a      	uxth	r2, r3
 800b0f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b0fa:	801a      	strh	r2, [r3, #0]
 800b0fc:	e001      	b.n	800b102 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800b0fe:	2301      	movs	r3, #1
 800b100:	e03a      	b.n	800b178 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b106:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b10a:	681a      	ldr	r2, [r3, #0]
 800b10c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b110:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	4413      	add	r3, r2
 800b11c:	881b      	ldrh	r3, [r3, #0]
 800b11e:	b29b      	uxth	r3, r3
 800b120:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b124:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b128:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b12c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b130:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b134:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b138:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b13c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b140:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b148:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b14c:	681a      	ldr	r2, [r3, #0]
 800b14e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b152:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	441a      	add	r2, r3
 800b15e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b162:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b166:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b16a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b16e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b172:	b29b      	uxth	r3, r3
 800b174:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b176:	2300      	movs	r3, #0
}
 800b178:	4618      	mov	r0, r3
 800b17a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}

0800b182 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b182:	b480      	push	{r7}
 800b184:	b085      	sub	sp, #20
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
 800b18a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	785b      	ldrb	r3, [r3, #1]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d020      	beq.n	800b1d6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	4413      	add	r3, r2
 800b19e:	881b      	ldrh	r3, [r3, #0]
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b1a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1aa:	81bb      	strh	r3, [r7, #12]
 800b1ac:	89bb      	ldrh	r3, [r7, #12]
 800b1ae:	f083 0310 	eor.w	r3, r3, #16
 800b1b2:	81bb      	strh	r3, [r7, #12]
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	441a      	add	r2, r3
 800b1be:	89bb      	ldrh	r3, [r7, #12]
 800b1c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b1c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b1c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b1cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	8013      	strh	r3, [r2, #0]
 800b1d4:	e01f      	b.n	800b216 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	4413      	add	r3, r2
 800b1e0:	881b      	ldrh	r3, [r3, #0]
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b1e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1ec:	81fb      	strh	r3, [r7, #14]
 800b1ee:	89fb      	ldrh	r3, [r7, #14]
 800b1f0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b1f4:	81fb      	strh	r3, [r7, #14]
 800b1f6:	687a      	ldr	r2, [r7, #4]
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	441a      	add	r2, r3
 800b200:	89fb      	ldrh	r3, [r7, #14]
 800b202:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b206:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b20a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b20e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b212:	b29b      	uxth	r3, r3
 800b214:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b216:	2300      	movs	r3, #0
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3714      	adds	r7, #20
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bc80      	pop	{r7}
 800b220:	4770      	bx	lr

0800b222 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b222:	b480      	push	{r7}
 800b224:	b087      	sub	sp, #28
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
 800b22a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	7b1b      	ldrb	r3, [r3, #12]
 800b230:	2b00      	cmp	r3, #0
 800b232:	f040 809d 	bne.w	800b370 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	785b      	ldrb	r3, [r3, #1]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d04c      	beq.n	800b2d8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b23e:	687a      	ldr	r2, [r7, #4]
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	009b      	lsls	r3, r3, #2
 800b246:	4413      	add	r3, r2
 800b248:	881b      	ldrh	r3, [r3, #0]
 800b24a:	823b      	strh	r3, [r7, #16]
 800b24c:	8a3b      	ldrh	r3, [r7, #16]
 800b24e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b252:	2b00      	cmp	r3, #0
 800b254:	d01b      	beq.n	800b28e <USB_EPClearStall+0x6c>
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	4413      	add	r3, r2
 800b260:	881b      	ldrh	r3, [r3, #0]
 800b262:	b29b      	uxth	r3, r3
 800b264:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b268:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b26c:	81fb      	strh	r3, [r7, #14]
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	781b      	ldrb	r3, [r3, #0]
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	441a      	add	r2, r3
 800b278:	89fb      	ldrh	r3, [r7, #14]
 800b27a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b27e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b282:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b286:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	78db      	ldrb	r3, [r3, #3]
 800b292:	2b01      	cmp	r3, #1
 800b294:	d06c      	beq.n	800b370 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	4413      	add	r3, r2
 800b2a0:	881b      	ldrh	r3, [r3, #0]
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b2a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b2ac:	81bb      	strh	r3, [r7, #12]
 800b2ae:	89bb      	ldrh	r3, [r7, #12]
 800b2b0:	f083 0320 	eor.w	r3, r3, #32
 800b2b4:	81bb      	strh	r3, [r7, #12]
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	441a      	add	r2, r3
 800b2c0:	89bb      	ldrh	r3, [r7, #12]
 800b2c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b2c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b2ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b2ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	8013      	strh	r3, [r2, #0]
 800b2d6:	e04b      	b.n	800b370 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	009b      	lsls	r3, r3, #2
 800b2e0:	4413      	add	r3, r2
 800b2e2:	881b      	ldrh	r3, [r3, #0]
 800b2e4:	82fb      	strh	r3, [r7, #22]
 800b2e6:	8afb      	ldrh	r3, [r7, #22]
 800b2e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d01b      	beq.n	800b328 <USB_EPClearStall+0x106>
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	4413      	add	r3, r2
 800b2fa:	881b      	ldrh	r3, [r3, #0]
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b306:	82bb      	strh	r3, [r7, #20]
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	009b      	lsls	r3, r3, #2
 800b310:	441a      	add	r2, r3
 800b312:	8abb      	ldrh	r3, [r7, #20]
 800b314:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b318:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b31c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b320:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b324:	b29b      	uxth	r3, r3
 800b326:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b328:	687a      	ldr	r2, [r7, #4]
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	781b      	ldrb	r3, [r3, #0]
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	4413      	add	r3, r2
 800b332:	881b      	ldrh	r3, [r3, #0]
 800b334:	b29b      	uxth	r3, r3
 800b336:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b33a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b33e:	827b      	strh	r3, [r7, #18]
 800b340:	8a7b      	ldrh	r3, [r7, #18]
 800b342:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b346:	827b      	strh	r3, [r7, #18]
 800b348:	8a7b      	ldrh	r3, [r7, #18]
 800b34a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b34e:	827b      	strh	r3, [r7, #18]
 800b350:	687a      	ldr	r2, [r7, #4]
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	441a      	add	r2, r3
 800b35a:	8a7b      	ldrh	r3, [r7, #18]
 800b35c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b360:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b364:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b368:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b36c:	b29b      	uxth	r3, r3
 800b36e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b370:	2300      	movs	r3, #0
}
 800b372:	4618      	mov	r0, r3
 800b374:	371c      	adds	r7, #28
 800b376:	46bd      	mov	sp, r7
 800b378:	bc80      	pop	{r7}
 800b37a:	4770      	bx	lr

0800b37c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	460b      	mov	r3, r1
 800b386:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b388:	78fb      	ldrb	r3, [r7, #3]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d103      	bne.n	800b396 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2280      	movs	r2, #128	@ 0x80
 800b392:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800b396:	2300      	movs	r3, #0
}
 800b398:	4618      	mov	r0, r3
 800b39a:	370c      	adds	r7, #12
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bc80      	pop	{r7}
 800b3a0:	4770      	bx	lr

0800b3a2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b3a2:	b480      	push	{r7}
 800b3a4:	b083      	sub	sp, #12
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b3aa:	2300      	movs	r3, #0
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	370c      	adds	r7, #12
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bc80      	pop	{r7}
 800b3b4:	4770      	bx	lr

0800b3b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800b3b6:	b480      	push	{r7}
 800b3b8:	b083      	sub	sp, #12
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b3be:	2300      	movs	r3, #0
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	370c      	adds	r7, #12
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bc80      	pop	{r7}
 800b3c8:	4770      	bx	lr

0800b3ca <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800b3ca:	b480      	push	{r7}
 800b3cc:	b085      	sub	sp, #20
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3714      	adds	r7, #20
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bc80      	pop	{r7}
 800b3e6:	4770      	bx	lr

0800b3e8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b083      	sub	sp, #12
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800b3f2:	2300      	movs	r3, #0
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bc80      	pop	{r7}
 800b3fc:	4770      	bx	lr

0800b3fe <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b3fe:	b480      	push	{r7}
 800b400:	b08b      	sub	sp, #44	@ 0x2c
 800b402:	af00      	add	r7, sp, #0
 800b404:	60f8      	str	r0, [r7, #12]
 800b406:	60b9      	str	r1, [r7, #8]
 800b408:	4611      	mov	r1, r2
 800b40a:	461a      	mov	r2, r3
 800b40c:	460b      	mov	r3, r1
 800b40e:	80fb      	strh	r3, [r7, #6]
 800b410:	4613      	mov	r3, r2
 800b412:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b414:	88bb      	ldrh	r3, [r7, #4]
 800b416:	3301      	adds	r3, #1
 800b418:	085b      	lsrs	r3, r3, #1
 800b41a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b424:	88fb      	ldrh	r3, [r7, #6]
 800b426:	005a      	lsls	r2, r3, #1
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	4413      	add	r3, r2
 800b42c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b430:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b432:	69bb      	ldr	r3, [r7, #24]
 800b434:	627b      	str	r3, [r7, #36]	@ 0x24
 800b436:	e01e      	b.n	800b476 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800b438:	69fb      	ldr	r3, [r7, #28]
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b43e:	69fb      	ldr	r3, [r7, #28]
 800b440:	3301      	adds	r3, #1
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	021b      	lsls	r3, r3, #8
 800b446:	b21a      	sxth	r2, r3
 800b448:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b44c:	4313      	orrs	r3, r2
 800b44e:	b21b      	sxth	r3, r3
 800b450:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b452:	6a3b      	ldr	r3, [r7, #32]
 800b454:	8a7a      	ldrh	r2, [r7, #18]
 800b456:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b458:	6a3b      	ldr	r3, [r7, #32]
 800b45a:	3302      	adds	r3, #2
 800b45c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800b45e:	6a3b      	ldr	r3, [r7, #32]
 800b460:	3302      	adds	r3, #2
 800b462:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800b464:	69fb      	ldr	r3, [r7, #28]
 800b466:	3301      	adds	r3, #1
 800b468:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b46a:	69fb      	ldr	r3, [r7, #28]
 800b46c:	3301      	adds	r3, #1
 800b46e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b472:	3b01      	subs	r3, #1
 800b474:	627b      	str	r3, [r7, #36]	@ 0x24
 800b476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d1dd      	bne.n	800b438 <USB_WritePMA+0x3a>
  }
}
 800b47c:	bf00      	nop
 800b47e:	bf00      	nop
 800b480:	372c      	adds	r7, #44	@ 0x2c
 800b482:	46bd      	mov	sp, r7
 800b484:	bc80      	pop	{r7}
 800b486:	4770      	bx	lr

0800b488 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b488:	b480      	push	{r7}
 800b48a:	b08b      	sub	sp, #44	@ 0x2c
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	4611      	mov	r1, r2
 800b494:	461a      	mov	r2, r3
 800b496:	460b      	mov	r3, r1
 800b498:	80fb      	strh	r3, [r7, #6]
 800b49a:	4613      	mov	r3, r2
 800b49c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b49e:	88bb      	ldrh	r3, [r7, #4]
 800b4a0:	085b      	lsrs	r3, r3, #1
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b4ae:	88fb      	ldrh	r3, [r7, #6]
 800b4b0:	005a      	lsls	r2, r3, #1
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b4ba:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b4bc:	69bb      	ldr	r3, [r7, #24]
 800b4be:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4c0:	e01b      	b.n	800b4fa <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b4c2:	6a3b      	ldr	r3, [r7, #32]
 800b4c4:	881b      	ldrh	r3, [r3, #0]
 800b4c6:	b29b      	uxth	r3, r3
 800b4c8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b4ca:	6a3b      	ldr	r3, [r7, #32]
 800b4cc:	3302      	adds	r3, #2
 800b4ce:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	b2da      	uxtb	r2, r3
 800b4d4:	69fb      	ldr	r3, [r7, #28]
 800b4d6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b4d8:	69fb      	ldr	r3, [r7, #28]
 800b4da:	3301      	adds	r3, #1
 800b4dc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	0a1b      	lsrs	r3, r3, #8
 800b4e2:	b2da      	uxtb	r2, r3
 800b4e4:	69fb      	ldr	r3, [r7, #28]
 800b4e6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b4e8:	69fb      	ldr	r3, [r7, #28]
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800b4ee:	6a3b      	ldr	r3, [r7, #32]
 800b4f0:	3302      	adds	r3, #2
 800b4f2:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800b4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f6:	3b01      	subs	r3, #1
 800b4f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d1e0      	bne.n	800b4c2 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b500:	88bb      	ldrh	r3, [r7, #4]
 800b502:	f003 0301 	and.w	r3, r3, #1
 800b506:	b29b      	uxth	r3, r3
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d007      	beq.n	800b51c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800b50c:	6a3b      	ldr	r3, [r7, #32]
 800b50e:	881b      	ldrh	r3, [r3, #0]
 800b510:	b29b      	uxth	r3, r3
 800b512:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	b2da      	uxtb	r2, r3
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	701a      	strb	r2, [r3, #0]
  }
}
 800b51c:	bf00      	nop
 800b51e:	372c      	adds	r7, #44	@ 0x2c
 800b520:	46bd      	mov	sp, r7
 800b522:	bc80      	pop	{r7}
 800b524:	4770      	bx	lr

0800b526 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b526:	b580      	push	{r7, lr}
 800b528:	b084      	sub	sp, #16
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
 800b52e:	460b      	mov	r3, r1
 800b530:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b532:	2300      	movs	r3, #0
 800b534:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	7c1b      	ldrb	r3, [r3, #16]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d115      	bne.n	800b56a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b53e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b542:	2202      	movs	r2, #2
 800b544:	2181      	movs	r1, #129	@ 0x81
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f001 fe81 	bl	800d24e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2201      	movs	r2, #1
 800b550:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b552:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b556:	2202      	movs	r2, #2
 800b558:	2101      	movs	r1, #1
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f001 fe77 	bl	800d24e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2201      	movs	r2, #1
 800b564:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800b568:	e012      	b.n	800b590 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b56a:	2340      	movs	r3, #64	@ 0x40
 800b56c:	2202      	movs	r2, #2
 800b56e:	2181      	movs	r1, #129	@ 0x81
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f001 fe6c 	bl	800d24e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2201      	movs	r2, #1
 800b57a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b57c:	2340      	movs	r3, #64	@ 0x40
 800b57e:	2202      	movs	r2, #2
 800b580:	2101      	movs	r1, #1
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f001 fe63 	bl	800d24e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2201      	movs	r2, #1
 800b58c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b590:	2308      	movs	r3, #8
 800b592:	2203      	movs	r2, #3
 800b594:	2182      	movs	r1, #130	@ 0x82
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f001 fe59 	bl	800d24e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b5a2:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b5a6:	f001 ff79 	bl	800d49c <USBD_static_malloc>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d102      	bne.n	800b5c2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	73fb      	strb	r3, [r7, #15]
 800b5c0:	e026      	b.n	800b610 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5c8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	7c1b      	ldrb	r3, [r3, #16]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d109      	bne.n	800b600 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b5f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b5f6:	2101      	movs	r1, #1
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f001 ff19 	bl	800d430 <USBD_LL_PrepareReceive>
 800b5fe:	e007      	b.n	800b610 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b606:	2340      	movs	r3, #64	@ 0x40
 800b608:	2101      	movs	r1, #1
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f001 ff10 	bl	800d430 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b610:	7bfb      	ldrb	r3, [r7, #15]
}
 800b612:	4618      	mov	r0, r3
 800b614:	3710      	adds	r7, #16
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}

0800b61a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b61a:	b580      	push	{r7, lr}
 800b61c:	b084      	sub	sp, #16
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
 800b622:	460b      	mov	r3, r1
 800b624:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b626:	2300      	movs	r3, #0
 800b628:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b62a:	2181      	movs	r1, #129	@ 0x81
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f001 fe34 	bl	800d29a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2200      	movs	r2, #0
 800b636:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b638:	2101      	movs	r1, #1
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f001 fe2d 	bl	800d29a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2200      	movs	r2, #0
 800b644:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b648:	2182      	movs	r1, #130	@ 0x82
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f001 fe25 	bl	800d29a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2200      	movs	r2, #0
 800b654:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d00e      	beq.n	800b67e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b670:	4618      	mov	r0, r3
 800b672:	f001 ff1f 	bl	800d4b4 <USBD_static_free>
    pdev->pClassData = NULL;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2200      	movs	r2, #0
 800b67a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800b67e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b680:	4618      	mov	r0, r3
 800b682:	3710      	adds	r7, #16
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}

0800b688 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b086      	sub	sp, #24
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b698:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b69a:	2300      	movs	r3, #0
 800b69c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d039      	beq.n	800b726 <USBD_CDC_Setup+0x9e>
 800b6b2:	2b20      	cmp	r3, #32
 800b6b4:	d17f      	bne.n	800b7b6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	88db      	ldrh	r3, [r3, #6]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d029      	beq.n	800b712 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	b25b      	sxtb	r3, r3
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	da11      	bge.n	800b6ec <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b6ce:	689b      	ldr	r3, [r3, #8]
 800b6d0:	683a      	ldr	r2, [r7, #0]
 800b6d2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b6d4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b6d6:	683a      	ldr	r2, [r7, #0]
 800b6d8:	88d2      	ldrh	r2, [r2, #6]
 800b6da:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b6dc:	6939      	ldr	r1, [r7, #16]
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	88db      	ldrh	r3, [r3, #6]
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f001 fa05 	bl	800caf4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b6ea:	e06b      	b.n	800b7c4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	785a      	ldrb	r2, [r3, #1]
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	88db      	ldrh	r3, [r3, #6]
 800b6fa:	b2da      	uxtb	r2, r3
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b702:	6939      	ldr	r1, [r7, #16]
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	88db      	ldrh	r3, [r3, #6]
 800b708:	461a      	mov	r2, r3
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f001 fa20 	bl	800cb50 <USBD_CtlPrepareRx>
      break;
 800b710:	e058      	b.n	800b7c4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b718:	689b      	ldr	r3, [r3, #8]
 800b71a:	683a      	ldr	r2, [r7, #0]
 800b71c:	7850      	ldrb	r0, [r2, #1]
 800b71e:	2200      	movs	r2, #0
 800b720:	6839      	ldr	r1, [r7, #0]
 800b722:	4798      	blx	r3
      break;
 800b724:	e04e      	b.n	800b7c4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	785b      	ldrb	r3, [r3, #1]
 800b72a:	2b0b      	cmp	r3, #11
 800b72c:	d02e      	beq.n	800b78c <USBD_CDC_Setup+0x104>
 800b72e:	2b0b      	cmp	r3, #11
 800b730:	dc38      	bgt.n	800b7a4 <USBD_CDC_Setup+0x11c>
 800b732:	2b00      	cmp	r3, #0
 800b734:	d002      	beq.n	800b73c <USBD_CDC_Setup+0xb4>
 800b736:	2b0a      	cmp	r3, #10
 800b738:	d014      	beq.n	800b764 <USBD_CDC_Setup+0xdc>
 800b73a:	e033      	b.n	800b7a4 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b742:	2b03      	cmp	r3, #3
 800b744:	d107      	bne.n	800b756 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b746:	f107 030c 	add.w	r3, r7, #12
 800b74a:	2202      	movs	r2, #2
 800b74c:	4619      	mov	r1, r3
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f001 f9d0 	bl	800caf4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b754:	e02e      	b.n	800b7b4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b756:	6839      	ldr	r1, [r7, #0]
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f001 f961 	bl	800ca20 <USBD_CtlError>
            ret = USBD_FAIL;
 800b75e:	2302      	movs	r3, #2
 800b760:	75fb      	strb	r3, [r7, #23]
          break;
 800b762:	e027      	b.n	800b7b4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b76a:	2b03      	cmp	r3, #3
 800b76c:	d107      	bne.n	800b77e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b76e:	f107 030f 	add.w	r3, r7, #15
 800b772:	2201      	movs	r2, #1
 800b774:	4619      	mov	r1, r3
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f001 f9bc 	bl	800caf4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b77c:	e01a      	b.n	800b7b4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b77e:	6839      	ldr	r1, [r7, #0]
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f001 f94d 	bl	800ca20 <USBD_CtlError>
            ret = USBD_FAIL;
 800b786:	2302      	movs	r3, #2
 800b788:	75fb      	strb	r3, [r7, #23]
          break;
 800b78a:	e013      	b.n	800b7b4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b792:	2b03      	cmp	r3, #3
 800b794:	d00d      	beq.n	800b7b2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b796:	6839      	ldr	r1, [r7, #0]
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f001 f941 	bl	800ca20 <USBD_CtlError>
            ret = USBD_FAIL;
 800b79e:	2302      	movs	r3, #2
 800b7a0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b7a2:	e006      	b.n	800b7b2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b7a4:	6839      	ldr	r1, [r7, #0]
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f001 f93a 	bl	800ca20 <USBD_CtlError>
          ret = USBD_FAIL;
 800b7ac:	2302      	movs	r3, #2
 800b7ae:	75fb      	strb	r3, [r7, #23]
          break;
 800b7b0:	e000      	b.n	800b7b4 <USBD_CDC_Setup+0x12c>
          break;
 800b7b2:	bf00      	nop
      }
      break;
 800b7b4:	e006      	b.n	800b7c4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b7b6:	6839      	ldr	r1, [r7, #0]
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f001 f931 	bl	800ca20 <USBD_CtlError>
      ret = USBD_FAIL;
 800b7be:	2302      	movs	r3, #2
 800b7c0:	75fb      	strb	r3, [r7, #23]
      break;
 800b7c2:	bf00      	nop
  }

  return ret;
 800b7c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3718      	adds	r7, #24
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}

0800b7ce <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b7ce:	b580      	push	{r7, lr}
 800b7d0:	b084      	sub	sp, #16
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7e0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b7e8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d03a      	beq.n	800b86a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b7f4:	78fa      	ldrb	r2, [r7, #3]
 800b7f6:	6879      	ldr	r1, [r7, #4]
 800b7f8:	4613      	mov	r3, r2
 800b7fa:	009b      	lsls	r3, r3, #2
 800b7fc:	4413      	add	r3, r2
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	440b      	add	r3, r1
 800b802:	331c      	adds	r3, #28
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d029      	beq.n	800b85e <USBD_CDC_DataIn+0x90>
 800b80a:	78fa      	ldrb	r2, [r7, #3]
 800b80c:	6879      	ldr	r1, [r7, #4]
 800b80e:	4613      	mov	r3, r2
 800b810:	009b      	lsls	r3, r3, #2
 800b812:	4413      	add	r3, r2
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	440b      	add	r3, r1
 800b818:	331c      	adds	r3, #28
 800b81a:	681a      	ldr	r2, [r3, #0]
 800b81c:	78f9      	ldrb	r1, [r7, #3]
 800b81e:	68b8      	ldr	r0, [r7, #8]
 800b820:	460b      	mov	r3, r1
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	440b      	add	r3, r1
 800b826:	00db      	lsls	r3, r3, #3
 800b828:	4403      	add	r3, r0
 800b82a:	3338      	adds	r3, #56	@ 0x38
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	fbb2 f1f3 	udiv	r1, r2, r3
 800b832:	fb01 f303 	mul.w	r3, r1, r3
 800b836:	1ad3      	subs	r3, r2, r3
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d110      	bne.n	800b85e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b83c:	78fa      	ldrb	r2, [r7, #3]
 800b83e:	6879      	ldr	r1, [r7, #4]
 800b840:	4613      	mov	r3, r2
 800b842:	009b      	lsls	r3, r3, #2
 800b844:	4413      	add	r3, r2
 800b846:	009b      	lsls	r3, r3, #2
 800b848:	440b      	add	r3, r1
 800b84a:	331c      	adds	r3, #28
 800b84c:	2200      	movs	r2, #0
 800b84e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b850:	78f9      	ldrb	r1, [r7, #3]
 800b852:	2300      	movs	r3, #0
 800b854:	2200      	movs	r2, #0
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f001 fdc7 	bl	800d3ea <USBD_LL_Transmit>
 800b85c:	e003      	b.n	800b866 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2200      	movs	r2, #0
 800b862:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800b866:	2300      	movs	r3, #0
 800b868:	e000      	b.n	800b86c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b86a:	2302      	movs	r3, #2
  }
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3710      	adds	r7, #16
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b084      	sub	sp, #16
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	460b      	mov	r3, r1
 800b87e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b886:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b888:	78fb      	ldrb	r3, [r7, #3]
 800b88a:	4619      	mov	r1, r3
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f001 fdf2 	bl	800d476 <USBD_LL_GetRxDataSize>
 800b892:	4602      	mov	r2, r0
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d00d      	beq.n	800b8c0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b8aa:	68db      	ldr	r3, [r3, #12]
 800b8ac:	68fa      	ldr	r2, [r7, #12]
 800b8ae:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b8b8:	4611      	mov	r1, r2
 800b8ba:	4798      	blx	r3

    return USBD_OK;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	e000      	b.n	800b8c2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b8c0:	2302      	movs	r3, #2
  }
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3710      	adds	r7, #16
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b084      	sub	sp, #16
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8d8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d014      	beq.n	800b90e <USBD_CDC_EP0_RxReady+0x44>
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b8ea:	2bff      	cmp	r3, #255	@ 0xff
 800b8ec:	d00f      	beq.n	800b90e <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b8f4:	689b      	ldr	r3, [r3, #8]
 800b8f6:	68fa      	ldr	r2, [r7, #12]
 800b8f8:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b8fc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b8fe:	68fa      	ldr	r2, [r7, #12]
 800b900:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b904:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	22ff      	movs	r2, #255	@ 0xff
 800b90a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800b90e:	2300      	movs	r3, #0
}
 800b910:	4618      	mov	r0, r3
 800b912:	3710      	adds	r7, #16
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b918:	b480      	push	{r7}
 800b91a:	b083      	sub	sp, #12
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2243      	movs	r2, #67	@ 0x43
 800b924:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b926:	4b03      	ldr	r3, [pc, #12]	@ (800b934 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b928:	4618      	mov	r0, r3
 800b92a:	370c      	adds	r7, #12
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bc80      	pop	{r7}
 800b930:	4770      	bx	lr
 800b932:	bf00      	nop
 800b934:	200000b4 	.word	0x200000b4

0800b938 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b938:	b480      	push	{r7}
 800b93a:	b083      	sub	sp, #12
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2243      	movs	r2, #67	@ 0x43
 800b944:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b946:	4b03      	ldr	r3, [pc, #12]	@ (800b954 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b948:	4618      	mov	r0, r3
 800b94a:	370c      	adds	r7, #12
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bc80      	pop	{r7}
 800b950:	4770      	bx	lr
 800b952:	bf00      	nop
 800b954:	20000070 	.word	0x20000070

0800b958 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b958:	b480      	push	{r7}
 800b95a:	b083      	sub	sp, #12
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2243      	movs	r2, #67	@ 0x43
 800b964:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b966:	4b03      	ldr	r3, [pc, #12]	@ (800b974 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b968:	4618      	mov	r0, r3
 800b96a:	370c      	adds	r7, #12
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bc80      	pop	{r7}
 800b970:	4770      	bx	lr
 800b972:	bf00      	nop
 800b974:	200000f8 	.word	0x200000f8

0800b978 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b978:	b480      	push	{r7}
 800b97a:	b083      	sub	sp, #12
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	220a      	movs	r2, #10
 800b984:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b986:	4b03      	ldr	r3, [pc, #12]	@ (800b994 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b988:	4618      	mov	r0, r3
 800b98a:	370c      	adds	r7, #12
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bc80      	pop	{r7}
 800b990:	4770      	bx	lr
 800b992:	bf00      	nop
 800b994:	2000002c 	.word	0x2000002c

0800b998 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b998:	b480      	push	{r7}
 800b99a:	b085      	sub	sp, #20
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b9a2:	2302      	movs	r3, #2
 800b9a4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d005      	beq.n	800b9b8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	683a      	ldr	r2, [r7, #0]
 800b9b0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b9b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3714      	adds	r7, #20
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bc80      	pop	{r7}
 800b9c2:	4770      	bx	lr

0800b9c4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b087      	sub	sp, #28
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	60b9      	str	r1, [r7, #8]
 800b9ce:	4613      	mov	r3, r2
 800b9d0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9d8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	68ba      	ldr	r2, [r7, #8]
 800b9de:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b9e2:	88fa      	ldrh	r2, [r7, #6]
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800b9ea:	2300      	movs	r3, #0
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	371c      	adds	r7, #28
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bc80      	pop	{r7}
 800b9f4:	4770      	bx	lr

0800b9f6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b9f6:	b480      	push	{r7}
 800b9f8:	b085      	sub	sp, #20
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
 800b9fe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba06:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	683a      	ldr	r2, [r7, #0]
 800ba0c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3714      	adds	r7, #20
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bc80      	pop	{r7}
 800ba1a:	4770      	bx	lr

0800ba1c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d01c      	beq.n	800ba70 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d115      	bne.n	800ba6c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2201      	movs	r2, #1
 800ba44:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	2181      	movs	r1, #129	@ 0x81
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f001 fcc1 	bl	800d3ea <USBD_LL_Transmit>

      return USBD_OK;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	e002      	b.n	800ba72 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	e000      	b.n	800ba72 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800ba70:	2302      	movs	r3, #2
  }
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3710      	adds	r7, #16
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}

0800ba7a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ba7a:	b580      	push	{r7, lr}
 800ba7c:	b084      	sub	sp, #16
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba88:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d017      	beq.n	800bac4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	7c1b      	ldrb	r3, [r3, #16]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d109      	bne.n	800bab0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800baa2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800baa6:	2101      	movs	r1, #1
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f001 fcc1 	bl	800d430 <USBD_LL_PrepareReceive>
 800baae:	e007      	b.n	800bac0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bab6:	2340      	movs	r3, #64	@ 0x40
 800bab8:	2101      	movs	r1, #1
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f001 fcb8 	bl	800d430 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800bac0:	2300      	movs	r3, #0
 800bac2:	e000      	b.n	800bac6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800bac4:	2302      	movs	r3, #2
  }
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3710      	adds	r7, #16
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}

0800bace <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bace:	b580      	push	{r7, lr}
 800bad0:	b084      	sub	sp, #16
 800bad2:	af00      	add	r7, sp, #0
 800bad4:	60f8      	str	r0, [r7, #12]
 800bad6:	60b9      	str	r1, [r7, #8]
 800bad8:	4613      	mov	r3, r2
 800bada:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d101      	bne.n	800bae6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bae2:	2302      	movs	r3, #2
 800bae4:	e01a      	b.n	800bb1c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800baec:	2b00      	cmp	r3, #0
 800baee:	d003      	beq.n	800baf8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2200      	movs	r2, #0
 800baf4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d003      	beq.n	800bb06 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	68ba      	ldr	r2, [r7, #8]
 800bb02:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2201      	movs	r2, #1
 800bb0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	79fa      	ldrb	r2, [r7, #7]
 800bb12:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800bb14:	68f8      	ldr	r0, [r7, #12]
 800bb16:	f001 fb25 	bl	800d164 <USBD_LL_Init>

  return USBD_OK;
 800bb1a:	2300      	movs	r3, #0
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3710      	adds	r7, #16
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b085      	sub	sp, #20
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d006      	beq.n	800bb46 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	683a      	ldr	r2, [r7, #0]
 800bb3c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800bb40:	2300      	movs	r3, #0
 800bb42:	73fb      	strb	r3, [r7, #15]
 800bb44:	e001      	b.n	800bb4a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800bb46:	2302      	movs	r3, #2
 800bb48:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bb4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3714      	adds	r7, #20
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bc80      	pop	{r7}
 800bb54:	4770      	bx	lr

0800bb56 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bb56:	b580      	push	{r7, lr}
 800bb58:	b082      	sub	sp, #8
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f001 fb5a 	bl	800d218 <USBD_LL_Start>

  return USBD_OK;
 800bb64:	2300      	movs	r3, #0
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3708      	adds	r7, #8
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}

0800bb6e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bb6e:	b480      	push	{r7}
 800bb70:	b083      	sub	sp, #12
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bb76:	2300      	movs	r3, #0
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	370c      	adds	r7, #12
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bc80      	pop	{r7}
 800bb80:	4770      	bx	lr

0800bb82 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800bb82:	b580      	push	{r7, lr}
 800bb84:	b084      	sub	sp, #16
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bb8e:	2302      	movs	r3, #2
 800bb90:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d00c      	beq.n	800bbb6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	78fa      	ldrb	r2, [r7, #3]
 800bba6:	4611      	mov	r1, r2
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	4798      	blx	r3
 800bbac:	4603      	mov	r3, r0
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d101      	bne.n	800bbb6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800bbb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3710      	adds	r7, #16
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	460b      	mov	r3, r1
 800bbca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	78fa      	ldrb	r2, [r7, #3]
 800bbd6:	4611      	mov	r1, r2
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	4798      	blx	r3

  return USBD_OK;
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3708      	adds	r7, #8
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}

0800bbe6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bbe6:	b580      	push	{r7, lr}
 800bbe8:	b082      	sub	sp, #8
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	6078      	str	r0, [r7, #4]
 800bbee:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800bbf6:	6839      	ldr	r1, [r7, #0]
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f000 fed8 	bl	800c9ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2201      	movs	r2, #1
 800bc02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800bc1a:	f003 031f 	and.w	r3, r3, #31
 800bc1e:	2b02      	cmp	r3, #2
 800bc20:	d016      	beq.n	800bc50 <USBD_LL_SetupStage+0x6a>
 800bc22:	2b02      	cmp	r3, #2
 800bc24:	d81c      	bhi.n	800bc60 <USBD_LL_SetupStage+0x7a>
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d002      	beq.n	800bc30 <USBD_LL_SetupStage+0x4a>
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	d008      	beq.n	800bc40 <USBD_LL_SetupStage+0x5a>
 800bc2e:	e017      	b.n	800bc60 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800bc36:	4619      	mov	r1, r3
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f000 f9cb 	bl	800bfd4 <USBD_StdDevReq>
      break;
 800bc3e:	e01a      	b.n	800bc76 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800bc46:	4619      	mov	r1, r3
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f000 fa2d 	bl	800c0a8 <USBD_StdItfReq>
      break;
 800bc4e:	e012      	b.n	800bc76 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800bc56:	4619      	mov	r1, r3
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 fa6d 	bl	800c138 <USBD_StdEPReq>
      break;
 800bc5e:	e00a      	b.n	800bc76 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800bc66:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f001 fb32 	bl	800d2d8 <USBD_LL_StallEP>
      break;
 800bc74:	bf00      	nop
  }

  return USBD_OK;
 800bc76:	2300      	movs	r3, #0
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3708      	adds	r7, #8
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b086      	sub	sp, #24
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	460b      	mov	r3, r1
 800bc8a:	607a      	str	r2, [r7, #4]
 800bc8c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bc8e:	7afb      	ldrb	r3, [r7, #11]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d14b      	bne.n	800bd2c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bc9a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bca2:	2b03      	cmp	r3, #3
 800bca4:	d134      	bne.n	800bd10 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	68da      	ldr	r2, [r3, #12]
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	691b      	ldr	r3, [r3, #16]
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d919      	bls.n	800bce6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	68da      	ldr	r2, [r3, #12]
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	691b      	ldr	r3, [r3, #16]
 800bcba:	1ad2      	subs	r2, r2, r3
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	68da      	ldr	r2, [r3, #12]
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d203      	bcs.n	800bcd4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	e002      	b.n	800bcda <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bcd8:	b29b      	uxth	r3, r3
 800bcda:	461a      	mov	r2, r3
 800bcdc:	6879      	ldr	r1, [r7, #4]
 800bcde:	68f8      	ldr	r0, [r7, #12]
 800bce0:	f000 ff54 	bl	800cb8c <USBD_CtlContinueRx>
 800bce4:	e038      	b.n	800bd58 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcec:	691b      	ldr	r3, [r3, #16]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d00a      	beq.n	800bd08 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bcf8:	2b03      	cmp	r3, #3
 800bcfa:	d105      	bne.n	800bd08 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd02:	691b      	ldr	r3, [r3, #16]
 800bd04:	68f8      	ldr	r0, [r7, #12]
 800bd06:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800bd08:	68f8      	ldr	r0, [r7, #12]
 800bd0a:	f000 ff51 	bl	800cbb0 <USBD_CtlSendStatus>
 800bd0e:	e023      	b.n	800bd58 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bd16:	2b05      	cmp	r3, #5
 800bd18:	d11e      	bne.n	800bd58 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800bd22:	2100      	movs	r1, #0
 800bd24:	68f8      	ldr	r0, [r7, #12]
 800bd26:	f001 fad7 	bl	800d2d8 <USBD_LL_StallEP>
 800bd2a:	e015      	b.n	800bd58 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd32:	699b      	ldr	r3, [r3, #24]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d00d      	beq.n	800bd54 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800bd3e:	2b03      	cmp	r3, #3
 800bd40:	d108      	bne.n	800bd54 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd48:	699b      	ldr	r3, [r3, #24]
 800bd4a:	7afa      	ldrb	r2, [r7, #11]
 800bd4c:	4611      	mov	r1, r2
 800bd4e:	68f8      	ldr	r0, [r7, #12]
 800bd50:	4798      	blx	r3
 800bd52:	e001      	b.n	800bd58 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bd54:	2302      	movs	r3, #2
 800bd56:	e000      	b.n	800bd5a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800bd58:	2300      	movs	r3, #0
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3718      	adds	r7, #24
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}

0800bd62 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bd62:	b580      	push	{r7, lr}
 800bd64:	b086      	sub	sp, #24
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	60f8      	str	r0, [r7, #12]
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	607a      	str	r2, [r7, #4]
 800bd6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bd70:	7afb      	ldrb	r3, [r7, #11]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d17f      	bne.n	800be76 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	3314      	adds	r3, #20
 800bd7a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bd82:	2b02      	cmp	r3, #2
 800bd84:	d15c      	bne.n	800be40 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	68da      	ldr	r2, [r3, #12]
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	691b      	ldr	r3, [r3, #16]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d915      	bls.n	800bdbe <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	68da      	ldr	r2, [r3, #12]
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	691b      	ldr	r3, [r3, #16]
 800bd9a:	1ad2      	subs	r2, r2, r3
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	68db      	ldr	r3, [r3, #12]
 800bda4:	b29b      	uxth	r3, r3
 800bda6:	461a      	mov	r2, r3
 800bda8:	6879      	ldr	r1, [r7, #4]
 800bdaa:	68f8      	ldr	r0, [r7, #12]
 800bdac:	f000 febe 	bl	800cb2c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	2100      	movs	r1, #0
 800bdb6:	68f8      	ldr	r0, [r7, #12]
 800bdb8:	f001 fb3a 	bl	800d430 <USBD_LL_PrepareReceive>
 800bdbc:	e04e      	b.n	800be5c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	689b      	ldr	r3, [r3, #8]
 800bdc2:	697a      	ldr	r2, [r7, #20]
 800bdc4:	6912      	ldr	r2, [r2, #16]
 800bdc6:	fbb3 f1f2 	udiv	r1, r3, r2
 800bdca:	fb01 f202 	mul.w	r2, r1, r2
 800bdce:	1a9b      	subs	r3, r3, r2
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d11c      	bne.n	800be0e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	689a      	ldr	r2, [r3, #8]
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d316      	bcc.n	800be0e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	689a      	ldr	r2, [r3, #8]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d20f      	bcs.n	800be0e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bdee:	2200      	movs	r2, #0
 800bdf0:	2100      	movs	r1, #0
 800bdf2:	68f8      	ldr	r0, [r7, #12]
 800bdf4:	f000 fe9a 	bl	800cb2c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be00:	2300      	movs	r3, #0
 800be02:	2200      	movs	r2, #0
 800be04:	2100      	movs	r1, #0
 800be06:	68f8      	ldr	r0, [r7, #12]
 800be08:	f001 fb12 	bl	800d430 <USBD_LL_PrepareReceive>
 800be0c:	e026      	b.n	800be5c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be14:	68db      	ldr	r3, [r3, #12]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d00a      	beq.n	800be30 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800be20:	2b03      	cmp	r3, #3
 800be22:	d105      	bne.n	800be30 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	68f8      	ldr	r0, [r7, #12]
 800be2e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800be30:	2180      	movs	r1, #128	@ 0x80
 800be32:	68f8      	ldr	r0, [r7, #12]
 800be34:	f001 fa50 	bl	800d2d8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800be38:	68f8      	ldr	r0, [r7, #12]
 800be3a:	f000 fecc 	bl	800cbd6 <USBD_CtlReceiveStatus>
 800be3e:	e00d      	b.n	800be5c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800be46:	2b04      	cmp	r3, #4
 800be48:	d004      	beq.n	800be54 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800be50:	2b00      	cmp	r3, #0
 800be52:	d103      	bne.n	800be5c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800be54:	2180      	movs	r1, #128	@ 0x80
 800be56:	68f8      	ldr	r0, [r7, #12]
 800be58:	f001 fa3e 	bl	800d2d8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800be62:	2b01      	cmp	r3, #1
 800be64:	d11d      	bne.n	800bea2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800be66:	68f8      	ldr	r0, [r7, #12]
 800be68:	f7ff fe81 	bl	800bb6e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2200      	movs	r2, #0
 800be70:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800be74:	e015      	b.n	800bea2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be7c:	695b      	ldr	r3, [r3, #20]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d00d      	beq.n	800be9e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800be88:	2b03      	cmp	r3, #3
 800be8a:	d108      	bne.n	800be9e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be92:	695b      	ldr	r3, [r3, #20]
 800be94:	7afa      	ldrb	r2, [r7, #11]
 800be96:	4611      	mov	r1, r2
 800be98:	68f8      	ldr	r0, [r7, #12]
 800be9a:	4798      	blx	r3
 800be9c:	e001      	b.n	800bea2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800be9e:	2302      	movs	r3, #2
 800bea0:	e000      	b.n	800bea4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800bea2:	2300      	movs	r3, #0
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3718      	adds	r7, #24
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800beb4:	2340      	movs	r3, #64	@ 0x40
 800beb6:	2200      	movs	r2, #0
 800beb8:	2100      	movs	r1, #0
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f001 f9c7 	bl	800d24e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2201      	movs	r2, #1
 800bec4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2240      	movs	r2, #64	@ 0x40
 800becc:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bed0:	2340      	movs	r3, #64	@ 0x40
 800bed2:	2200      	movs	r2, #0
 800bed4:	2180      	movs	r1, #128	@ 0x80
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f001 f9b9 	bl	800d24e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2201      	movs	r2, #1
 800bee0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2240      	movs	r2, #64	@ 0x40
 800bee6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2201      	movs	r2, #1
 800beec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2200      	movs	r2, #0
 800bef4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2200      	movs	r2, #0
 800bf02:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d009      	beq.n	800bf24 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	6852      	ldr	r2, [r2, #4]
 800bf1c:	b2d2      	uxtb	r2, r2
 800bf1e:	4611      	mov	r1, r2
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	4798      	blx	r3
  }

  return USBD_OK;
 800bf24:	2300      	movs	r3, #0
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3708      	adds	r7, #8
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}

0800bf2e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bf2e:	b480      	push	{r7}
 800bf30:	b083      	sub	sp, #12
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
 800bf36:	460b      	mov	r3, r1
 800bf38:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	78fa      	ldrb	r2, [r7, #3]
 800bf3e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bf40:	2300      	movs	r3, #0
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	370c      	adds	r7, #12
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bc80      	pop	{r7}
 800bf4a:	4770      	bx	lr

0800bf4c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b083      	sub	sp, #12
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2204      	movs	r2, #4
 800bf64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bf68:	2300      	movs	r3, #0
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	370c      	adds	r7, #12
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bc80      	pop	{r7}
 800bf72:	4770      	bx	lr

0800bf74 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b083      	sub	sp, #12
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf82:	2b04      	cmp	r3, #4
 800bf84:	d105      	bne.n	800bf92 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bf92:	2300      	movs	r3, #0
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	370c      	adds	r7, #12
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bc80      	pop	{r7}
 800bf9c:	4770      	bx	lr

0800bf9e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bf9e:	b580      	push	{r7, lr}
 800bfa0:	b082      	sub	sp, #8
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfac:	2b03      	cmp	r3, #3
 800bfae:	d10b      	bne.n	800bfc8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfb6:	69db      	ldr	r3, [r3, #28]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d005      	beq.n	800bfc8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfc2:	69db      	ldr	r3, [r3, #28]
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bfc8:	2300      	movs	r3, #0
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3708      	adds	r7, #8
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
	...

0800bfd4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b084      	sub	sp, #16
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bfea:	2b40      	cmp	r3, #64	@ 0x40
 800bfec:	d005      	beq.n	800bffa <USBD_StdDevReq+0x26>
 800bfee:	2b40      	cmp	r3, #64	@ 0x40
 800bff0:	d84f      	bhi.n	800c092 <USBD_StdDevReq+0xbe>
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d009      	beq.n	800c00a <USBD_StdDevReq+0x36>
 800bff6:	2b20      	cmp	r3, #32
 800bff8:	d14b      	bne.n	800c092 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c000:	689b      	ldr	r3, [r3, #8]
 800c002:	6839      	ldr	r1, [r7, #0]
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	4798      	blx	r3
      break;
 800c008:	e048      	b.n	800c09c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	785b      	ldrb	r3, [r3, #1]
 800c00e:	2b09      	cmp	r3, #9
 800c010:	d839      	bhi.n	800c086 <USBD_StdDevReq+0xb2>
 800c012:	a201      	add	r2, pc, #4	@ (adr r2, 800c018 <USBD_StdDevReq+0x44>)
 800c014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c018:	0800c069 	.word	0x0800c069
 800c01c:	0800c07d 	.word	0x0800c07d
 800c020:	0800c087 	.word	0x0800c087
 800c024:	0800c073 	.word	0x0800c073
 800c028:	0800c087 	.word	0x0800c087
 800c02c:	0800c04b 	.word	0x0800c04b
 800c030:	0800c041 	.word	0x0800c041
 800c034:	0800c087 	.word	0x0800c087
 800c038:	0800c05f 	.word	0x0800c05f
 800c03c:	0800c055 	.word	0x0800c055
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c040:	6839      	ldr	r1, [r7, #0]
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 f9dc 	bl	800c400 <USBD_GetDescriptor>
          break;
 800c048:	e022      	b.n	800c090 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c04a:	6839      	ldr	r1, [r7, #0]
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f000 fb3f 	bl	800c6d0 <USBD_SetAddress>
          break;
 800c052:	e01d      	b.n	800c090 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800c054:	6839      	ldr	r1, [r7, #0]
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f000 fb7e 	bl	800c758 <USBD_SetConfig>
          break;
 800c05c:	e018      	b.n	800c090 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c05e:	6839      	ldr	r1, [r7, #0]
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f000 fc07 	bl	800c874 <USBD_GetConfig>
          break;
 800c066:	e013      	b.n	800c090 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c068:	6839      	ldr	r1, [r7, #0]
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 fc37 	bl	800c8de <USBD_GetStatus>
          break;
 800c070:	e00e      	b.n	800c090 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c072:	6839      	ldr	r1, [r7, #0]
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f000 fc65 	bl	800c944 <USBD_SetFeature>
          break;
 800c07a:	e009      	b.n	800c090 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c07c:	6839      	ldr	r1, [r7, #0]
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 fc74 	bl	800c96c <USBD_ClrFeature>
          break;
 800c084:	e004      	b.n	800c090 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800c086:	6839      	ldr	r1, [r7, #0]
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f000 fcc9 	bl	800ca20 <USBD_CtlError>
          break;
 800c08e:	bf00      	nop
      }
      break;
 800c090:	e004      	b.n	800c09c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800c092:	6839      	ldr	r1, [r7, #0]
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 fcc3 	bl	800ca20 <USBD_CtlError>
      break;
 800c09a:	bf00      	nop
  }

  return ret;
 800c09c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3710      	adds	r7, #16
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	bf00      	nop

0800c0a8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c0be:	2b40      	cmp	r3, #64	@ 0x40
 800c0c0:	d005      	beq.n	800c0ce <USBD_StdItfReq+0x26>
 800c0c2:	2b40      	cmp	r3, #64	@ 0x40
 800c0c4:	d82e      	bhi.n	800c124 <USBD_StdItfReq+0x7c>
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d001      	beq.n	800c0ce <USBD_StdItfReq+0x26>
 800c0ca:	2b20      	cmp	r3, #32
 800c0cc:	d12a      	bne.n	800c124 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0d4:	3b01      	subs	r3, #1
 800c0d6:	2b02      	cmp	r3, #2
 800c0d8:	d81d      	bhi.n	800c116 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	889b      	ldrh	r3, [r3, #4]
 800c0de:	b2db      	uxtb	r3, r3
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d813      	bhi.n	800c10c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0ea:	689b      	ldr	r3, [r3, #8]
 800c0ec:	6839      	ldr	r1, [r7, #0]
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	4798      	blx	r3
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	88db      	ldrh	r3, [r3, #6]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d110      	bne.n	800c120 <USBD_StdItfReq+0x78>
 800c0fe:	7bfb      	ldrb	r3, [r7, #15]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d10d      	bne.n	800c120 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 fd53 	bl	800cbb0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c10a:	e009      	b.n	800c120 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800c10c:	6839      	ldr	r1, [r7, #0]
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f000 fc86 	bl	800ca20 <USBD_CtlError>
          break;
 800c114:	e004      	b.n	800c120 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800c116:	6839      	ldr	r1, [r7, #0]
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f000 fc81 	bl	800ca20 <USBD_CtlError>
          break;
 800c11e:	e000      	b.n	800c122 <USBD_StdItfReq+0x7a>
          break;
 800c120:	bf00      	nop
      }
      break;
 800c122:	e004      	b.n	800c12e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800c124:	6839      	ldr	r1, [r7, #0]
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 fc7a 	bl	800ca20 <USBD_CtlError>
      break;
 800c12c:	bf00      	nop
  }

  return USBD_OK;
 800c12e:	2300      	movs	r3, #0
}
 800c130:	4618      	mov	r0, r3
 800c132:	3710      	adds	r7, #16
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c142:	2300      	movs	r3, #0
 800c144:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	889b      	ldrh	r3, [r3, #4]
 800c14a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c154:	2b40      	cmp	r3, #64	@ 0x40
 800c156:	d007      	beq.n	800c168 <USBD_StdEPReq+0x30>
 800c158:	2b40      	cmp	r3, #64	@ 0x40
 800c15a:	f200 8146 	bhi.w	800c3ea <USBD_StdEPReq+0x2b2>
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d00a      	beq.n	800c178 <USBD_StdEPReq+0x40>
 800c162:	2b20      	cmp	r3, #32
 800c164:	f040 8141 	bne.w	800c3ea <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	6839      	ldr	r1, [r7, #0]
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	4798      	blx	r3
      break;
 800c176:	e13d      	b.n	800c3f4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c180:	2b20      	cmp	r3, #32
 800c182:	d10a      	bne.n	800c19a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c18a:	689b      	ldr	r3, [r3, #8]
 800c18c:	6839      	ldr	r1, [r7, #0]
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	4798      	blx	r3
 800c192:	4603      	mov	r3, r0
 800c194:	73fb      	strb	r3, [r7, #15]

        return ret;
 800c196:	7bfb      	ldrb	r3, [r7, #15]
 800c198:	e12d      	b.n	800c3f6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	785b      	ldrb	r3, [r3, #1]
 800c19e:	2b03      	cmp	r3, #3
 800c1a0:	d007      	beq.n	800c1b2 <USBD_StdEPReq+0x7a>
 800c1a2:	2b03      	cmp	r3, #3
 800c1a4:	f300 811b 	bgt.w	800c3de <USBD_StdEPReq+0x2a6>
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d072      	beq.n	800c292 <USBD_StdEPReq+0x15a>
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	d03a      	beq.n	800c226 <USBD_StdEPReq+0xee>
 800c1b0:	e115      	b.n	800c3de <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1b8:	2b02      	cmp	r3, #2
 800c1ba:	d002      	beq.n	800c1c2 <USBD_StdEPReq+0x8a>
 800c1bc:	2b03      	cmp	r3, #3
 800c1be:	d015      	beq.n	800c1ec <USBD_StdEPReq+0xb4>
 800c1c0:	e02b      	b.n	800c21a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1c2:	7bbb      	ldrb	r3, [r7, #14]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d00c      	beq.n	800c1e2 <USBD_StdEPReq+0xaa>
 800c1c8:	7bbb      	ldrb	r3, [r7, #14]
 800c1ca:	2b80      	cmp	r3, #128	@ 0x80
 800c1cc:	d009      	beq.n	800c1e2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c1ce:	7bbb      	ldrb	r3, [r7, #14]
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f001 f880 	bl	800d2d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c1d8:	2180      	movs	r1, #128	@ 0x80
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f001 f87c 	bl	800d2d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c1e0:	e020      	b.n	800c224 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800c1e2:	6839      	ldr	r1, [r7, #0]
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f000 fc1b 	bl	800ca20 <USBD_CtlError>
              break;
 800c1ea:	e01b      	b.n	800c224 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	885b      	ldrh	r3, [r3, #2]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d10e      	bne.n	800c212 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800c1f4:	7bbb      	ldrb	r3, [r7, #14]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d00b      	beq.n	800c212 <USBD_StdEPReq+0xda>
 800c1fa:	7bbb      	ldrb	r3, [r7, #14]
 800c1fc:	2b80      	cmp	r3, #128	@ 0x80
 800c1fe:	d008      	beq.n	800c212 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	88db      	ldrh	r3, [r3, #6]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d104      	bne.n	800c212 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800c208:	7bbb      	ldrb	r3, [r7, #14]
 800c20a:	4619      	mov	r1, r3
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f001 f863 	bl	800d2d8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f000 fccc 	bl	800cbb0 <USBD_CtlSendStatus>

              break;
 800c218:	e004      	b.n	800c224 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800c21a:	6839      	ldr	r1, [r7, #0]
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 fbff 	bl	800ca20 <USBD_CtlError>
              break;
 800c222:	bf00      	nop
          }
          break;
 800c224:	e0e0      	b.n	800c3e8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c22c:	2b02      	cmp	r3, #2
 800c22e:	d002      	beq.n	800c236 <USBD_StdEPReq+0xfe>
 800c230:	2b03      	cmp	r3, #3
 800c232:	d015      	beq.n	800c260 <USBD_StdEPReq+0x128>
 800c234:	e026      	b.n	800c284 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c236:	7bbb      	ldrb	r3, [r7, #14]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d00c      	beq.n	800c256 <USBD_StdEPReq+0x11e>
 800c23c:	7bbb      	ldrb	r3, [r7, #14]
 800c23e:	2b80      	cmp	r3, #128	@ 0x80
 800c240:	d009      	beq.n	800c256 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c242:	7bbb      	ldrb	r3, [r7, #14]
 800c244:	4619      	mov	r1, r3
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f001 f846 	bl	800d2d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c24c:	2180      	movs	r1, #128	@ 0x80
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f001 f842 	bl	800d2d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c254:	e01c      	b.n	800c290 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800c256:	6839      	ldr	r1, [r7, #0]
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f000 fbe1 	bl	800ca20 <USBD_CtlError>
              break;
 800c25e:	e017      	b.n	800c290 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	885b      	ldrh	r3, [r3, #2]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d112      	bne.n	800c28e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c268:	7bbb      	ldrb	r3, [r7, #14]
 800c26a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d004      	beq.n	800c27c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c272:	7bbb      	ldrb	r3, [r7, #14]
 800c274:	4619      	mov	r1, r3
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f001 f84d 	bl	800d316 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 fc97 	bl	800cbb0 <USBD_CtlSendStatus>
              }
              break;
 800c282:	e004      	b.n	800c28e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800c284:	6839      	ldr	r1, [r7, #0]
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f000 fbca 	bl	800ca20 <USBD_CtlError>
              break;
 800c28c:	e000      	b.n	800c290 <USBD_StdEPReq+0x158>
              break;
 800c28e:	bf00      	nop
          }
          break;
 800c290:	e0aa      	b.n	800c3e8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c298:	2b02      	cmp	r3, #2
 800c29a:	d002      	beq.n	800c2a2 <USBD_StdEPReq+0x16a>
 800c29c:	2b03      	cmp	r3, #3
 800c29e:	d032      	beq.n	800c306 <USBD_StdEPReq+0x1ce>
 800c2a0:	e097      	b.n	800c3d2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c2a2:	7bbb      	ldrb	r3, [r7, #14]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d007      	beq.n	800c2b8 <USBD_StdEPReq+0x180>
 800c2a8:	7bbb      	ldrb	r3, [r7, #14]
 800c2aa:	2b80      	cmp	r3, #128	@ 0x80
 800c2ac:	d004      	beq.n	800c2b8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800c2ae:	6839      	ldr	r1, [r7, #0]
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f000 fbb5 	bl	800ca20 <USBD_CtlError>
                break;
 800c2b6:	e091      	b.n	800c3dc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	da0b      	bge.n	800c2d8 <USBD_StdEPReq+0x1a0>
 800c2c0:	7bbb      	ldrb	r3, [r7, #14]
 800c2c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c2c6:	4613      	mov	r3, r2
 800c2c8:	009b      	lsls	r3, r3, #2
 800c2ca:	4413      	add	r3, r2
 800c2cc:	009b      	lsls	r3, r3, #2
 800c2ce:	3310      	adds	r3, #16
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	4413      	add	r3, r2
 800c2d4:	3304      	adds	r3, #4
 800c2d6:	e00b      	b.n	800c2f0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c2d8:	7bbb      	ldrb	r3, [r7, #14]
 800c2da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2de:	4613      	mov	r3, r2
 800c2e0:	009b      	lsls	r3, r3, #2
 800c2e2:	4413      	add	r3, r2
 800c2e4:	009b      	lsls	r3, r3, #2
 800c2e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	4413      	add	r3, r2
 800c2ee:	3304      	adds	r3, #4
 800c2f0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	2202      	movs	r2, #2
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 fbf8 	bl	800caf4 <USBD_CtlSendData>
              break;
 800c304:	e06a      	b.n	800c3dc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c306:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	da11      	bge.n	800c332 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c30e:	7bbb      	ldrb	r3, [r7, #14]
 800c310:	f003 020f 	and.w	r2, r3, #15
 800c314:	6879      	ldr	r1, [r7, #4]
 800c316:	4613      	mov	r3, r2
 800c318:	009b      	lsls	r3, r3, #2
 800c31a:	4413      	add	r3, r2
 800c31c:	009b      	lsls	r3, r3, #2
 800c31e:	440b      	add	r3, r1
 800c320:	3318      	adds	r3, #24
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d117      	bne.n	800c358 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c328:	6839      	ldr	r1, [r7, #0]
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 fb78 	bl	800ca20 <USBD_CtlError>
                  break;
 800c330:	e054      	b.n	800c3dc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c332:	7bbb      	ldrb	r3, [r7, #14]
 800c334:	f003 020f 	and.w	r2, r3, #15
 800c338:	6879      	ldr	r1, [r7, #4]
 800c33a:	4613      	mov	r3, r2
 800c33c:	009b      	lsls	r3, r3, #2
 800c33e:	4413      	add	r3, r2
 800c340:	009b      	lsls	r3, r3, #2
 800c342:	440b      	add	r3, r1
 800c344:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d104      	bne.n	800c358 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c34e:	6839      	ldr	r1, [r7, #0]
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f000 fb65 	bl	800ca20 <USBD_CtlError>
                  break;
 800c356:	e041      	b.n	800c3dc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c358:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	da0b      	bge.n	800c378 <USBD_StdEPReq+0x240>
 800c360:	7bbb      	ldrb	r3, [r7, #14]
 800c362:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c366:	4613      	mov	r3, r2
 800c368:	009b      	lsls	r3, r3, #2
 800c36a:	4413      	add	r3, r2
 800c36c:	009b      	lsls	r3, r3, #2
 800c36e:	3310      	adds	r3, #16
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	4413      	add	r3, r2
 800c374:	3304      	adds	r3, #4
 800c376:	e00b      	b.n	800c390 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c378:	7bbb      	ldrb	r3, [r7, #14]
 800c37a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c37e:	4613      	mov	r3, r2
 800c380:	009b      	lsls	r3, r3, #2
 800c382:	4413      	add	r3, r2
 800c384:	009b      	lsls	r3, r3, #2
 800c386:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c38a:	687a      	ldr	r2, [r7, #4]
 800c38c:	4413      	add	r3, r2
 800c38e:	3304      	adds	r3, #4
 800c390:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c392:	7bbb      	ldrb	r3, [r7, #14]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d002      	beq.n	800c39e <USBD_StdEPReq+0x266>
 800c398:	7bbb      	ldrb	r3, [r7, #14]
 800c39a:	2b80      	cmp	r3, #128	@ 0x80
 800c39c:	d103      	bne.n	800c3a6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	601a      	str	r2, [r3, #0]
 800c3a4:	e00e      	b.n	800c3c4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c3a6:	7bbb      	ldrb	r3, [r7, #14]
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f000 ffd2 	bl	800d354 <USBD_LL_IsStallEP>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d003      	beq.n	800c3be <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	601a      	str	r2, [r3, #0]
 800c3bc:	e002      	b.n	800c3c4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	2202      	movs	r2, #2
 800c3c8:	4619      	mov	r1, r3
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 fb92 	bl	800caf4 <USBD_CtlSendData>
              break;
 800c3d0:	e004      	b.n	800c3dc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800c3d2:	6839      	ldr	r1, [r7, #0]
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f000 fb23 	bl	800ca20 <USBD_CtlError>
              break;
 800c3da:	bf00      	nop
          }
          break;
 800c3dc:	e004      	b.n	800c3e8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800c3de:	6839      	ldr	r1, [r7, #0]
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f000 fb1d 	bl	800ca20 <USBD_CtlError>
          break;
 800c3e6:	bf00      	nop
      }
      break;
 800c3e8:	e004      	b.n	800c3f4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800c3ea:	6839      	ldr	r1, [r7, #0]
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f000 fb17 	bl	800ca20 <USBD_CtlError>
      break;
 800c3f2:	bf00      	nop
  }

  return ret;
 800c3f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3710      	adds	r7, #16
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
	...

0800c400 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b084      	sub	sp, #16
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c40a:	2300      	movs	r3, #0
 800c40c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c40e:	2300      	movs	r3, #0
 800c410:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c412:	2300      	movs	r3, #0
 800c414:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	885b      	ldrh	r3, [r3, #2]
 800c41a:	0a1b      	lsrs	r3, r3, #8
 800c41c:	b29b      	uxth	r3, r3
 800c41e:	3b01      	subs	r3, #1
 800c420:	2b06      	cmp	r3, #6
 800c422:	f200 8128 	bhi.w	800c676 <USBD_GetDescriptor+0x276>
 800c426:	a201      	add	r2, pc, #4	@ (adr r2, 800c42c <USBD_GetDescriptor+0x2c>)
 800c428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c42c:	0800c449 	.word	0x0800c449
 800c430:	0800c461 	.word	0x0800c461
 800c434:	0800c4a1 	.word	0x0800c4a1
 800c438:	0800c677 	.word	0x0800c677
 800c43c:	0800c677 	.word	0x0800c677
 800c440:	0800c617 	.word	0x0800c617
 800c444:	0800c643 	.word	0x0800c643
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	7c12      	ldrb	r2, [r2, #16]
 800c454:	f107 0108 	add.w	r1, r7, #8
 800c458:	4610      	mov	r0, r2
 800c45a:	4798      	blx	r3
 800c45c:	60f8      	str	r0, [r7, #12]
      break;
 800c45e:	e112      	b.n	800c686 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	7c1b      	ldrb	r3, [r3, #16]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d10d      	bne.n	800c484 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c46e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c470:	f107 0208 	add.w	r2, r7, #8
 800c474:	4610      	mov	r0, r2
 800c476:	4798      	blx	r3
 800c478:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	3301      	adds	r3, #1
 800c47e:	2202      	movs	r2, #2
 800c480:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c482:	e100      	b.n	800c686 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c48a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c48c:	f107 0208 	add.w	r2, r7, #8
 800c490:	4610      	mov	r0, r2
 800c492:	4798      	blx	r3
 800c494:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	3301      	adds	r3, #1
 800c49a:	2202      	movs	r2, #2
 800c49c:	701a      	strb	r2, [r3, #0]
      break;
 800c49e:	e0f2      	b.n	800c686 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	885b      	ldrh	r3, [r3, #2]
 800c4a4:	b2db      	uxtb	r3, r3
 800c4a6:	2b05      	cmp	r3, #5
 800c4a8:	f200 80ac 	bhi.w	800c604 <USBD_GetDescriptor+0x204>
 800c4ac:	a201      	add	r2, pc, #4	@ (adr r2, 800c4b4 <USBD_GetDescriptor+0xb4>)
 800c4ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4b2:	bf00      	nop
 800c4b4:	0800c4cd 	.word	0x0800c4cd
 800c4b8:	0800c501 	.word	0x0800c501
 800c4bc:	0800c535 	.word	0x0800c535
 800c4c0:	0800c569 	.word	0x0800c569
 800c4c4:	0800c59d 	.word	0x0800c59d
 800c4c8:	0800c5d1 	.word	0x0800c5d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d00b      	beq.n	800c4f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c4de:	685b      	ldr	r3, [r3, #4]
 800c4e0:	687a      	ldr	r2, [r7, #4]
 800c4e2:	7c12      	ldrb	r2, [r2, #16]
 800c4e4:	f107 0108 	add.w	r1, r7, #8
 800c4e8:	4610      	mov	r0, r2
 800c4ea:	4798      	blx	r3
 800c4ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4ee:	e091      	b.n	800c614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4f0:	6839      	ldr	r1, [r7, #0]
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 fa94 	bl	800ca20 <USBD_CtlError>
            err++;
 800c4f8:	7afb      	ldrb	r3, [r7, #11]
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	72fb      	strb	r3, [r7, #11]
          break;
 800c4fe:	e089      	b.n	800c614 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c506:	689b      	ldr	r3, [r3, #8]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d00b      	beq.n	800c524 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c512:	689b      	ldr	r3, [r3, #8]
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	7c12      	ldrb	r2, [r2, #16]
 800c518:	f107 0108 	add.w	r1, r7, #8
 800c51c:	4610      	mov	r0, r2
 800c51e:	4798      	blx	r3
 800c520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c522:	e077      	b.n	800c614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c524:	6839      	ldr	r1, [r7, #0]
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f000 fa7a 	bl	800ca20 <USBD_CtlError>
            err++;
 800c52c:	7afb      	ldrb	r3, [r7, #11]
 800c52e:	3301      	adds	r3, #1
 800c530:	72fb      	strb	r3, [r7, #11]
          break;
 800c532:	e06f      	b.n	800c614 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c53a:	68db      	ldr	r3, [r3, #12]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d00b      	beq.n	800c558 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	687a      	ldr	r2, [r7, #4]
 800c54a:	7c12      	ldrb	r2, [r2, #16]
 800c54c:	f107 0108 	add.w	r1, r7, #8
 800c550:	4610      	mov	r0, r2
 800c552:	4798      	blx	r3
 800c554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c556:	e05d      	b.n	800c614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c558:	6839      	ldr	r1, [r7, #0]
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 fa60 	bl	800ca20 <USBD_CtlError>
            err++;
 800c560:	7afb      	ldrb	r3, [r7, #11]
 800c562:	3301      	adds	r3, #1
 800c564:	72fb      	strb	r3, [r7, #11]
          break;
 800c566:	e055      	b.n	800c614 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c56e:	691b      	ldr	r3, [r3, #16]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d00b      	beq.n	800c58c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c57a:	691b      	ldr	r3, [r3, #16]
 800c57c:	687a      	ldr	r2, [r7, #4]
 800c57e:	7c12      	ldrb	r2, [r2, #16]
 800c580:	f107 0108 	add.w	r1, r7, #8
 800c584:	4610      	mov	r0, r2
 800c586:	4798      	blx	r3
 800c588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c58a:	e043      	b.n	800c614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c58c:	6839      	ldr	r1, [r7, #0]
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f000 fa46 	bl	800ca20 <USBD_CtlError>
            err++;
 800c594:	7afb      	ldrb	r3, [r7, #11]
 800c596:	3301      	adds	r3, #1
 800c598:	72fb      	strb	r3, [r7, #11]
          break;
 800c59a:	e03b      	b.n	800c614 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c5a2:	695b      	ldr	r3, [r3, #20]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d00b      	beq.n	800c5c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c5ae:	695b      	ldr	r3, [r3, #20]
 800c5b0:	687a      	ldr	r2, [r7, #4]
 800c5b2:	7c12      	ldrb	r2, [r2, #16]
 800c5b4:	f107 0108 	add.w	r1, r7, #8
 800c5b8:	4610      	mov	r0, r2
 800c5ba:	4798      	blx	r3
 800c5bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5be:	e029      	b.n	800c614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c5c0:	6839      	ldr	r1, [r7, #0]
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f000 fa2c 	bl	800ca20 <USBD_CtlError>
            err++;
 800c5c8:	7afb      	ldrb	r3, [r7, #11]
 800c5ca:	3301      	adds	r3, #1
 800c5cc:	72fb      	strb	r3, [r7, #11]
          break;
 800c5ce:	e021      	b.n	800c614 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c5d6:	699b      	ldr	r3, [r3, #24]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d00b      	beq.n	800c5f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c5e2:	699b      	ldr	r3, [r3, #24]
 800c5e4:	687a      	ldr	r2, [r7, #4]
 800c5e6:	7c12      	ldrb	r2, [r2, #16]
 800c5e8:	f107 0108 	add.w	r1, r7, #8
 800c5ec:	4610      	mov	r0, r2
 800c5ee:	4798      	blx	r3
 800c5f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5f2:	e00f      	b.n	800c614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c5f4:	6839      	ldr	r1, [r7, #0]
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f000 fa12 	bl	800ca20 <USBD_CtlError>
            err++;
 800c5fc:	7afb      	ldrb	r3, [r7, #11]
 800c5fe:	3301      	adds	r3, #1
 800c600:	72fb      	strb	r3, [r7, #11]
          break;
 800c602:	e007      	b.n	800c614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c604:	6839      	ldr	r1, [r7, #0]
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f000 fa0a 	bl	800ca20 <USBD_CtlError>
          err++;
 800c60c:	7afb      	ldrb	r3, [r7, #11]
 800c60e:	3301      	adds	r3, #1
 800c610:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c612:	e038      	b.n	800c686 <USBD_GetDescriptor+0x286>
 800c614:	e037      	b.n	800c686 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	7c1b      	ldrb	r3, [r3, #16]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d109      	bne.n	800c632 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c626:	f107 0208 	add.w	r2, r7, #8
 800c62a:	4610      	mov	r0, r2
 800c62c:	4798      	blx	r3
 800c62e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c630:	e029      	b.n	800c686 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c632:	6839      	ldr	r1, [r7, #0]
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f000 f9f3 	bl	800ca20 <USBD_CtlError>
        err++;
 800c63a:	7afb      	ldrb	r3, [r7, #11]
 800c63c:	3301      	adds	r3, #1
 800c63e:	72fb      	strb	r3, [r7, #11]
      break;
 800c640:	e021      	b.n	800c686 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	7c1b      	ldrb	r3, [r3, #16]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d10d      	bne.n	800c666 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c652:	f107 0208 	add.w	r2, r7, #8
 800c656:	4610      	mov	r0, r2
 800c658:	4798      	blx	r3
 800c65a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	3301      	adds	r3, #1
 800c660:	2207      	movs	r2, #7
 800c662:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c664:	e00f      	b.n	800c686 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c666:	6839      	ldr	r1, [r7, #0]
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f000 f9d9 	bl	800ca20 <USBD_CtlError>
        err++;
 800c66e:	7afb      	ldrb	r3, [r7, #11]
 800c670:	3301      	adds	r3, #1
 800c672:	72fb      	strb	r3, [r7, #11]
      break;
 800c674:	e007      	b.n	800c686 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c676:	6839      	ldr	r1, [r7, #0]
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f000 f9d1 	bl	800ca20 <USBD_CtlError>
      err++;
 800c67e:	7afb      	ldrb	r3, [r7, #11]
 800c680:	3301      	adds	r3, #1
 800c682:	72fb      	strb	r3, [r7, #11]
      break;
 800c684:	bf00      	nop
  }

  if (err != 0U)
 800c686:	7afb      	ldrb	r3, [r7, #11]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d11c      	bne.n	800c6c6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c68c:	893b      	ldrh	r3, [r7, #8]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d011      	beq.n	800c6b6 <USBD_GetDescriptor+0x2b6>
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	88db      	ldrh	r3, [r3, #6]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d00d      	beq.n	800c6b6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	88da      	ldrh	r2, [r3, #6]
 800c69e:	893b      	ldrh	r3, [r7, #8]
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	bf28      	it	cs
 800c6a4:	4613      	movcs	r3, r2
 800c6a6:	b29b      	uxth	r3, r3
 800c6a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c6aa:	893b      	ldrh	r3, [r7, #8]
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	68f9      	ldr	r1, [r7, #12]
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f000 fa1f 	bl	800caf4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	88db      	ldrh	r3, [r3, #6]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d104      	bne.n	800c6c8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f000 fa76 	bl	800cbb0 <USBD_CtlSendStatus>
 800c6c4:	e000      	b.n	800c6c8 <USBD_GetDescriptor+0x2c8>
    return;
 800c6c6:	bf00      	nop
    }
  }
}
 800c6c8:	3710      	adds	r7, #16
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
 800c6ce:	bf00      	nop

0800c6d0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b084      	sub	sp, #16
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
 800c6d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	889b      	ldrh	r3, [r3, #4]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d130      	bne.n	800c744 <USBD_SetAddress+0x74>
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	88db      	ldrh	r3, [r3, #6]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d12c      	bne.n	800c744 <USBD_SetAddress+0x74>
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	885b      	ldrh	r3, [r3, #2]
 800c6ee:	2b7f      	cmp	r3, #127	@ 0x7f
 800c6f0:	d828      	bhi.n	800c744 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	885b      	ldrh	r3, [r3, #2]
 800c6f6:	b2db      	uxtb	r3, r3
 800c6f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c6fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c704:	2b03      	cmp	r3, #3
 800c706:	d104      	bne.n	800c712 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c708:	6839      	ldr	r1, [r7, #0]
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f000 f988 	bl	800ca20 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c710:	e01d      	b.n	800c74e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	7bfa      	ldrb	r2, [r7, #15]
 800c716:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c71a:	7bfb      	ldrb	r3, [r7, #15]
 800c71c:	4619      	mov	r1, r3
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 fe44 	bl	800d3ac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f000 fa43 	bl	800cbb0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c72a:	7bfb      	ldrb	r3, [r7, #15]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d004      	beq.n	800c73a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2202      	movs	r2, #2
 800c734:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c738:	e009      	b.n	800c74e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2201      	movs	r2, #1
 800c73e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c742:	e004      	b.n	800c74e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c744:	6839      	ldr	r1, [r7, #0]
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 f96a 	bl	800ca20 <USBD_CtlError>
  }
}
 800c74c:	bf00      	nop
 800c74e:	bf00      	nop
 800c750:	3710      	adds	r7, #16
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
	...

0800c758 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b082      	sub	sp, #8
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	885b      	ldrh	r3, [r3, #2]
 800c766:	b2da      	uxtb	r2, r3
 800c768:	4b41      	ldr	r3, [pc, #260]	@ (800c870 <USBD_SetConfig+0x118>)
 800c76a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c76c:	4b40      	ldr	r3, [pc, #256]	@ (800c870 <USBD_SetConfig+0x118>)
 800c76e:	781b      	ldrb	r3, [r3, #0]
 800c770:	2b01      	cmp	r3, #1
 800c772:	d904      	bls.n	800c77e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c774:	6839      	ldr	r1, [r7, #0]
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 f952 	bl	800ca20 <USBD_CtlError>
 800c77c:	e075      	b.n	800c86a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c784:	2b02      	cmp	r3, #2
 800c786:	d002      	beq.n	800c78e <USBD_SetConfig+0x36>
 800c788:	2b03      	cmp	r3, #3
 800c78a:	d023      	beq.n	800c7d4 <USBD_SetConfig+0x7c>
 800c78c:	e062      	b.n	800c854 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c78e:	4b38      	ldr	r3, [pc, #224]	@ (800c870 <USBD_SetConfig+0x118>)
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d01a      	beq.n	800c7cc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c796:	4b36      	ldr	r3, [pc, #216]	@ (800c870 <USBD_SetConfig+0x118>)
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	461a      	mov	r2, r3
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2203      	movs	r2, #3
 800c7a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c7a8:	4b31      	ldr	r3, [pc, #196]	@ (800c870 <USBD_SetConfig+0x118>)
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f7ff f9e7 	bl	800bb82 <USBD_SetClassConfig>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	2b02      	cmp	r3, #2
 800c7b8:	d104      	bne.n	800c7c4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c7ba:	6839      	ldr	r1, [r7, #0]
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f000 f92f 	bl	800ca20 <USBD_CtlError>
            return;
 800c7c2:	e052      	b.n	800c86a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f000 f9f3 	bl	800cbb0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c7ca:	e04e      	b.n	800c86a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f000 f9ef 	bl	800cbb0 <USBD_CtlSendStatus>
        break;
 800c7d2:	e04a      	b.n	800c86a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c7d4:	4b26      	ldr	r3, [pc, #152]	@ (800c870 <USBD_SetConfig+0x118>)
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d112      	bne.n	800c802 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2202      	movs	r2, #2
 800c7e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800c7e4:	4b22      	ldr	r3, [pc, #136]	@ (800c870 <USBD_SetConfig+0x118>)
 800c7e6:	781b      	ldrb	r3, [r3, #0]
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c7ee:	4b20      	ldr	r3, [pc, #128]	@ (800c870 <USBD_SetConfig+0x118>)
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	4619      	mov	r1, r3
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f7ff f9e3 	bl	800bbc0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 f9d8 	bl	800cbb0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c800:	e033      	b.n	800c86a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c802:	4b1b      	ldr	r3, [pc, #108]	@ (800c870 <USBD_SetConfig+0x118>)
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	461a      	mov	r2, r3
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d01d      	beq.n	800c84c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	685b      	ldr	r3, [r3, #4]
 800c814:	b2db      	uxtb	r3, r3
 800c816:	4619      	mov	r1, r3
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f7ff f9d1 	bl	800bbc0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c81e:	4b14      	ldr	r3, [pc, #80]	@ (800c870 <USBD_SetConfig+0x118>)
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	461a      	mov	r2, r3
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c828:	4b11      	ldr	r3, [pc, #68]	@ (800c870 <USBD_SetConfig+0x118>)
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	4619      	mov	r1, r3
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f7ff f9a7 	bl	800bb82 <USBD_SetClassConfig>
 800c834:	4603      	mov	r3, r0
 800c836:	2b02      	cmp	r3, #2
 800c838:	d104      	bne.n	800c844 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c83a:	6839      	ldr	r1, [r7, #0]
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f000 f8ef 	bl	800ca20 <USBD_CtlError>
            return;
 800c842:	e012      	b.n	800c86a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f000 f9b3 	bl	800cbb0 <USBD_CtlSendStatus>
        break;
 800c84a:	e00e      	b.n	800c86a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 f9af 	bl	800cbb0 <USBD_CtlSendStatus>
        break;
 800c852:	e00a      	b.n	800c86a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c854:	6839      	ldr	r1, [r7, #0]
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f000 f8e2 	bl	800ca20 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c85c:	4b04      	ldr	r3, [pc, #16]	@ (800c870 <USBD_SetConfig+0x118>)
 800c85e:	781b      	ldrb	r3, [r3, #0]
 800c860:	4619      	mov	r1, r3
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f7ff f9ac 	bl	800bbc0 <USBD_ClrClassConfig>
        break;
 800c868:	bf00      	nop
    }
  }
}
 800c86a:	3708      	adds	r7, #8
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}
 800c870:	200006a8 	.word	0x200006a8

0800c874 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b082      	sub	sp, #8
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	88db      	ldrh	r3, [r3, #6]
 800c882:	2b01      	cmp	r3, #1
 800c884:	d004      	beq.n	800c890 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c886:	6839      	ldr	r1, [r7, #0]
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f000 f8c9 	bl	800ca20 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c88e:	e022      	b.n	800c8d6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c896:	2b02      	cmp	r3, #2
 800c898:	dc02      	bgt.n	800c8a0 <USBD_GetConfig+0x2c>
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	dc03      	bgt.n	800c8a6 <USBD_GetConfig+0x32>
 800c89e:	e015      	b.n	800c8cc <USBD_GetConfig+0x58>
 800c8a0:	2b03      	cmp	r3, #3
 800c8a2:	d00b      	beq.n	800c8bc <USBD_GetConfig+0x48>
 800c8a4:	e012      	b.n	800c8cc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	3308      	adds	r3, #8
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f000 f91d 	bl	800caf4 <USBD_CtlSendData>
        break;
 800c8ba:	e00c      	b.n	800c8d6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	3304      	adds	r3, #4
 800c8c0:	2201      	movs	r2, #1
 800c8c2:	4619      	mov	r1, r3
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 f915 	bl	800caf4 <USBD_CtlSendData>
        break;
 800c8ca:	e004      	b.n	800c8d6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c8cc:	6839      	ldr	r1, [r7, #0]
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f000 f8a6 	bl	800ca20 <USBD_CtlError>
        break;
 800c8d4:	bf00      	nop
}
 800c8d6:	bf00      	nop
 800c8d8:	3708      	adds	r7, #8
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}

0800c8de <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8de:	b580      	push	{r7, lr}
 800c8e0:	b082      	sub	sp, #8
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
 800c8e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8ee:	3b01      	subs	r3, #1
 800c8f0:	2b02      	cmp	r3, #2
 800c8f2:	d81e      	bhi.n	800c932 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	88db      	ldrh	r3, [r3, #6]
 800c8f8:	2b02      	cmp	r3, #2
 800c8fa:	d004      	beq.n	800c906 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c8fc:	6839      	ldr	r1, [r7, #0]
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 f88e 	bl	800ca20 <USBD_CtlError>
        break;
 800c904:	e01a      	b.n	800c93c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2201      	movs	r2, #1
 800c90a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c912:	2b00      	cmp	r3, #0
 800c914:	d005      	beq.n	800c922 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	68db      	ldr	r3, [r3, #12]
 800c91a:	f043 0202 	orr.w	r2, r3, #2
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	330c      	adds	r3, #12
 800c926:	2202      	movs	r2, #2
 800c928:	4619      	mov	r1, r3
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f000 f8e2 	bl	800caf4 <USBD_CtlSendData>
      break;
 800c930:	e004      	b.n	800c93c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c932:	6839      	ldr	r1, [r7, #0]
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f000 f873 	bl	800ca20 <USBD_CtlError>
      break;
 800c93a:	bf00      	nop
  }
}
 800c93c:	bf00      	nop
 800c93e:	3708      	adds	r7, #8
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b082      	sub	sp, #8
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
 800c94c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	885b      	ldrh	r3, [r3, #2]
 800c952:	2b01      	cmp	r3, #1
 800c954:	d106      	bne.n	800c964 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2201      	movs	r2, #1
 800c95a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 f926 	bl	800cbb0 <USBD_CtlSendStatus>
  }
}
 800c964:	bf00      	nop
 800c966:	3708      	adds	r7, #8
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b082      	sub	sp, #8
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c97c:	3b01      	subs	r3, #1
 800c97e:	2b02      	cmp	r3, #2
 800c980:	d80b      	bhi.n	800c99a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	885b      	ldrh	r3, [r3, #2]
 800c986:	2b01      	cmp	r3, #1
 800c988:	d10c      	bne.n	800c9a4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2200      	movs	r2, #0
 800c98e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f000 f90c 	bl	800cbb0 <USBD_CtlSendStatus>
      }
      break;
 800c998:	e004      	b.n	800c9a4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c99a:	6839      	ldr	r1, [r7, #0]
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f000 f83f 	bl	800ca20 <USBD_CtlError>
      break;
 800c9a2:	e000      	b.n	800c9a6 <USBD_ClrFeature+0x3a>
      break;
 800c9a4:	bf00      	nop
  }
}
 800c9a6:	bf00      	nop
 800c9a8:	3708      	adds	r7, #8
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}

0800c9ae <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c9ae:	b480      	push	{r7}
 800c9b0:	b083      	sub	sp, #12
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	6078      	str	r0, [r7, #4]
 800c9b6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	781a      	ldrb	r2, [r3, #0]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	785a      	ldrb	r2, [r3, #1]
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	3302      	adds	r3, #2
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	3303      	adds	r3, #3
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	021b      	lsls	r3, r3, #8
 800c9d8:	b29b      	uxth	r3, r3
 800c9da:	4413      	add	r3, r2
 800c9dc:	b29a      	uxth	r2, r3
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	3304      	adds	r3, #4
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	461a      	mov	r2, r3
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	3305      	adds	r3, #5
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	021b      	lsls	r3, r3, #8
 800c9f2:	b29b      	uxth	r3, r3
 800c9f4:	4413      	add	r3, r2
 800c9f6:	b29a      	uxth	r2, r3
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	3306      	adds	r3, #6
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	461a      	mov	r2, r3
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	3307      	adds	r3, #7
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	021b      	lsls	r3, r3, #8
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	4413      	add	r3, r2
 800ca10:	b29a      	uxth	r2, r3
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	80da      	strh	r2, [r3, #6]

}
 800ca16:	bf00      	nop
 800ca18:	370c      	adds	r7, #12
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bc80      	pop	{r7}
 800ca1e:	4770      	bx	lr

0800ca20 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b082      	sub	sp, #8
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ca2a:	2180      	movs	r1, #128	@ 0x80
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f000 fc53 	bl	800d2d8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ca32:	2100      	movs	r1, #0
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f000 fc4f 	bl	800d2d8 <USBD_LL_StallEP>
}
 800ca3a:	bf00      	nop
 800ca3c:	3708      	adds	r7, #8
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}

0800ca42 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ca42:	b580      	push	{r7, lr}
 800ca44:	b086      	sub	sp, #24
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	60f8      	str	r0, [r7, #12]
 800ca4a:	60b9      	str	r1, [r7, #8]
 800ca4c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d032      	beq.n	800cabe <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ca58:	68f8      	ldr	r0, [r7, #12]
 800ca5a:	f000 f834 	bl	800cac6 <USBD_GetLen>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	3301      	adds	r3, #1
 800ca62:	b29b      	uxth	r3, r3
 800ca64:	005b      	lsls	r3, r3, #1
 800ca66:	b29a      	uxth	r2, r3
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ca6c:	7dfb      	ldrb	r3, [r7, #23]
 800ca6e:	1c5a      	adds	r2, r3, #1
 800ca70:	75fa      	strb	r2, [r7, #23]
 800ca72:	461a      	mov	r2, r3
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	4413      	add	r3, r2
 800ca78:	687a      	ldr	r2, [r7, #4]
 800ca7a:	7812      	ldrb	r2, [r2, #0]
 800ca7c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ca7e:	7dfb      	ldrb	r3, [r7, #23]
 800ca80:	1c5a      	adds	r2, r3, #1
 800ca82:	75fa      	strb	r2, [r7, #23]
 800ca84:	461a      	mov	r2, r3
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	4413      	add	r3, r2
 800ca8a:	2203      	movs	r2, #3
 800ca8c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ca8e:	e012      	b.n	800cab6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	1c5a      	adds	r2, r3, #1
 800ca94:	60fa      	str	r2, [r7, #12]
 800ca96:	7dfa      	ldrb	r2, [r7, #23]
 800ca98:	1c51      	adds	r1, r2, #1
 800ca9a:	75f9      	strb	r1, [r7, #23]
 800ca9c:	4611      	mov	r1, r2
 800ca9e:	68ba      	ldr	r2, [r7, #8]
 800caa0:	440a      	add	r2, r1
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800caa6:	7dfb      	ldrb	r3, [r7, #23]
 800caa8:	1c5a      	adds	r2, r3, #1
 800caaa:	75fa      	strb	r2, [r7, #23]
 800caac:	461a      	mov	r2, r3
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	4413      	add	r3, r2
 800cab2:	2200      	movs	r2, #0
 800cab4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	781b      	ldrb	r3, [r3, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d1e8      	bne.n	800ca90 <USBD_GetString+0x4e>
    }
  }
}
 800cabe:	bf00      	nop
 800cac0:	3718      	adds	r7, #24
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}

0800cac6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cac6:	b480      	push	{r7}
 800cac8:	b085      	sub	sp, #20
 800caca:	af00      	add	r7, sp, #0
 800cacc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cace:	2300      	movs	r3, #0
 800cad0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800cad2:	e005      	b.n	800cae0 <USBD_GetLen+0x1a>
  {
    len++;
 800cad4:	7bfb      	ldrb	r3, [r7, #15]
 800cad6:	3301      	adds	r3, #1
 800cad8:	73fb      	strb	r3, [r7, #15]
    buf++;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	3301      	adds	r3, #1
 800cade:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d1f5      	bne.n	800cad4 <USBD_GetLen+0xe>
  }

  return len;
 800cae8:	7bfb      	ldrb	r3, [r7, #15]
}
 800caea:	4618      	mov	r0, r3
 800caec:	3714      	adds	r7, #20
 800caee:	46bd      	mov	sp, r7
 800caf0:	bc80      	pop	{r7}
 800caf2:	4770      	bx	lr

0800caf4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	60f8      	str	r0, [r7, #12]
 800cafc:	60b9      	str	r1, [r7, #8]
 800cafe:	4613      	mov	r3, r2
 800cb00:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	2202      	movs	r2, #2
 800cb06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cb0a:	88fa      	ldrh	r2, [r7, #6]
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800cb10:	88fa      	ldrh	r2, [r7, #6]
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb16:	88fb      	ldrh	r3, [r7, #6]
 800cb18:	68ba      	ldr	r2, [r7, #8]
 800cb1a:	2100      	movs	r1, #0
 800cb1c:	68f8      	ldr	r0, [r7, #12]
 800cb1e:	f000 fc64 	bl	800d3ea <USBD_LL_Transmit>

  return USBD_OK;
 800cb22:	2300      	movs	r3, #0
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3710      	adds	r7, #16
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}

0800cb2c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b084      	sub	sp, #16
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	60f8      	str	r0, [r7, #12]
 800cb34:	60b9      	str	r1, [r7, #8]
 800cb36:	4613      	mov	r3, r2
 800cb38:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb3a:	88fb      	ldrh	r3, [r7, #6]
 800cb3c:	68ba      	ldr	r2, [r7, #8]
 800cb3e:	2100      	movs	r1, #0
 800cb40:	68f8      	ldr	r0, [r7, #12]
 800cb42:	f000 fc52 	bl	800d3ea <USBD_LL_Transmit>

  return USBD_OK;
 800cb46:	2300      	movs	r3, #0
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3710      	adds	r7, #16
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b084      	sub	sp, #16
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	60f8      	str	r0, [r7, #12]
 800cb58:	60b9      	str	r1, [r7, #8]
 800cb5a:	4613      	mov	r3, r2
 800cb5c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	2203      	movs	r2, #3
 800cb62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cb66:	88fa      	ldrh	r2, [r7, #6]
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800cb6e:	88fa      	ldrh	r2, [r7, #6]
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb76:	88fb      	ldrh	r3, [r7, #6]
 800cb78:	68ba      	ldr	r2, [r7, #8]
 800cb7a:	2100      	movs	r1, #0
 800cb7c:	68f8      	ldr	r0, [r7, #12]
 800cb7e:	f000 fc57 	bl	800d430 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb82:	2300      	movs	r3, #0
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3710      	adds	r7, #16
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b084      	sub	sp, #16
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	60f8      	str	r0, [r7, #12]
 800cb94:	60b9      	str	r1, [r7, #8]
 800cb96:	4613      	mov	r3, r2
 800cb98:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb9a:	88fb      	ldrh	r3, [r7, #6]
 800cb9c:	68ba      	ldr	r2, [r7, #8]
 800cb9e:	2100      	movs	r1, #0
 800cba0:	68f8      	ldr	r0, [r7, #12]
 800cba2:	f000 fc45 	bl	800d430 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cba6:	2300      	movs	r3, #0
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3710      	adds	r7, #16
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}

0800cbb0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2204      	movs	r2, #4
 800cbbc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	2100      	movs	r1, #0
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f000 fc0f 	bl	800d3ea <USBD_LL_Transmit>

  return USBD_OK;
 800cbcc:	2300      	movs	r3, #0
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3708      	adds	r7, #8
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}

0800cbd6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cbd6:	b580      	push	{r7, lr}
 800cbd8:	b082      	sub	sp, #8
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2205      	movs	r2, #5
 800cbe2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	2200      	movs	r2, #0
 800cbea:	2100      	movs	r1, #0
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f000 fc1f 	bl	800d430 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cbf2:	2300      	movs	r3, #0
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3708      	adds	r7, #8
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cc00:	2200      	movs	r2, #0
 800cc02:	4912      	ldr	r1, [pc, #72]	@ (800cc4c <MX_USB_DEVICE_Init+0x50>)
 800cc04:	4812      	ldr	r0, [pc, #72]	@ (800cc50 <MX_USB_DEVICE_Init+0x54>)
 800cc06:	f7fe ff62 	bl	800bace <USBD_Init>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d001      	beq.n	800cc14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cc10:	f7f5 fb1e 	bl	8002250 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cc14:	490f      	ldr	r1, [pc, #60]	@ (800cc54 <MX_USB_DEVICE_Init+0x58>)
 800cc16:	480e      	ldr	r0, [pc, #56]	@ (800cc50 <MX_USB_DEVICE_Init+0x54>)
 800cc18:	f7fe ff84 	bl	800bb24 <USBD_RegisterClass>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d001      	beq.n	800cc26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cc22:	f7f5 fb15 	bl	8002250 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cc26:	490c      	ldr	r1, [pc, #48]	@ (800cc58 <MX_USB_DEVICE_Init+0x5c>)
 800cc28:	4809      	ldr	r0, [pc, #36]	@ (800cc50 <MX_USB_DEVICE_Init+0x54>)
 800cc2a:	f7fe feb5 	bl	800b998 <USBD_CDC_RegisterInterface>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d001      	beq.n	800cc38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cc34:	f7f5 fb0c 	bl	8002250 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cc38:	4805      	ldr	r0, [pc, #20]	@ (800cc50 <MX_USB_DEVICE_Init+0x54>)
 800cc3a:	f7fe ff8c 	bl	800bb56 <USBD_Start>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d001      	beq.n	800cc48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cc44:	f7f5 fb04 	bl	8002250 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cc48:	bf00      	nop
 800cc4a:	bd80      	pop	{r7, pc}
 800cc4c:	2000014c 	.word	0x2000014c
 800cc50:	200006ac 	.word	0x200006ac
 800cc54:	20000038 	.word	0x20000038
 800cc58:	2000013c 	.word	0x2000013c

0800cc5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cc60:	2200      	movs	r2, #0
 800cc62:	4905      	ldr	r1, [pc, #20]	@ (800cc78 <CDC_Init_FS+0x1c>)
 800cc64:	4805      	ldr	r0, [pc, #20]	@ (800cc7c <CDC_Init_FS+0x20>)
 800cc66:	f7fe fead 	bl	800b9c4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cc6a:	4905      	ldr	r1, [pc, #20]	@ (800cc80 <CDC_Init_FS+0x24>)
 800cc6c:	4803      	ldr	r0, [pc, #12]	@ (800cc7c <CDC_Init_FS+0x20>)
 800cc6e:	f7fe fec2 	bl	800b9f6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cc72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	bd80      	pop	{r7, pc}
 800cc78:	20000d70 	.word	0x20000d70
 800cc7c:	200006ac 	.word	0x200006ac
 800cc80:	20000970 	.word	0x20000970

0800cc84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cc84:	b480      	push	{r7}
 800cc86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cc88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bc80      	pop	{r7}
 800cc90:	4770      	bx	lr
	...

0800cc94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b083      	sub	sp, #12
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	6039      	str	r1, [r7, #0]
 800cc9e:	71fb      	strb	r3, [r7, #7]
 800cca0:	4613      	mov	r3, r2
 800cca2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cca4:	79fb      	ldrb	r3, [r7, #7]
 800cca6:	2b23      	cmp	r3, #35	@ 0x23
 800cca8:	d84a      	bhi.n	800cd40 <CDC_Control_FS+0xac>
 800ccaa:	a201      	add	r2, pc, #4	@ (adr r2, 800ccb0 <CDC_Control_FS+0x1c>)
 800ccac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccb0:	0800cd41 	.word	0x0800cd41
 800ccb4:	0800cd41 	.word	0x0800cd41
 800ccb8:	0800cd41 	.word	0x0800cd41
 800ccbc:	0800cd41 	.word	0x0800cd41
 800ccc0:	0800cd41 	.word	0x0800cd41
 800ccc4:	0800cd41 	.word	0x0800cd41
 800ccc8:	0800cd41 	.word	0x0800cd41
 800cccc:	0800cd41 	.word	0x0800cd41
 800ccd0:	0800cd41 	.word	0x0800cd41
 800ccd4:	0800cd41 	.word	0x0800cd41
 800ccd8:	0800cd41 	.word	0x0800cd41
 800ccdc:	0800cd41 	.word	0x0800cd41
 800cce0:	0800cd41 	.word	0x0800cd41
 800cce4:	0800cd41 	.word	0x0800cd41
 800cce8:	0800cd41 	.word	0x0800cd41
 800ccec:	0800cd41 	.word	0x0800cd41
 800ccf0:	0800cd41 	.word	0x0800cd41
 800ccf4:	0800cd41 	.word	0x0800cd41
 800ccf8:	0800cd41 	.word	0x0800cd41
 800ccfc:	0800cd41 	.word	0x0800cd41
 800cd00:	0800cd41 	.word	0x0800cd41
 800cd04:	0800cd41 	.word	0x0800cd41
 800cd08:	0800cd41 	.word	0x0800cd41
 800cd0c:	0800cd41 	.word	0x0800cd41
 800cd10:	0800cd41 	.word	0x0800cd41
 800cd14:	0800cd41 	.word	0x0800cd41
 800cd18:	0800cd41 	.word	0x0800cd41
 800cd1c:	0800cd41 	.word	0x0800cd41
 800cd20:	0800cd41 	.word	0x0800cd41
 800cd24:	0800cd41 	.word	0x0800cd41
 800cd28:	0800cd41 	.word	0x0800cd41
 800cd2c:	0800cd41 	.word	0x0800cd41
 800cd30:	0800cd41 	.word	0x0800cd41
 800cd34:	0800cd41 	.word	0x0800cd41
 800cd38:	0800cd41 	.word	0x0800cd41
 800cd3c:	0800cd41 	.word	0x0800cd41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cd40:	bf00      	nop
  }

  return (USBD_OK);
 800cd42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	370c      	adds	r7, #12
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bc80      	pop	{r7}
 800cd4c:	4770      	bx	lr
 800cd4e:	bf00      	nop

0800cd50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b082      	sub	sp, #8
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
 800cd58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cd5a:	6879      	ldr	r1, [r7, #4]
 800cd5c:	4805      	ldr	r0, [pc, #20]	@ (800cd74 <CDC_Receive_FS+0x24>)
 800cd5e:	f7fe fe4a 	bl	800b9f6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cd62:	4804      	ldr	r0, [pc, #16]	@ (800cd74 <CDC_Receive_FS+0x24>)
 800cd64:	f7fe fe89 	bl	800ba7a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cd68:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3708      	adds	r7, #8
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	200006ac 	.word	0x200006ac

0800cd78 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b084      	sub	sp, #16
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	460b      	mov	r3, r1
 800cd82:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cd84:	2300      	movs	r3, #0
 800cd86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cd88:	4b0d      	ldr	r3, [pc, #52]	@ (800cdc0 <CDC_Transmit_FS+0x48>)
 800cd8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd8e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d001      	beq.n	800cd9e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	e00b      	b.n	800cdb6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cd9e:	887b      	ldrh	r3, [r7, #2]
 800cda0:	461a      	mov	r2, r3
 800cda2:	6879      	ldr	r1, [r7, #4]
 800cda4:	4806      	ldr	r0, [pc, #24]	@ (800cdc0 <CDC_Transmit_FS+0x48>)
 800cda6:	f7fe fe0d 	bl	800b9c4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cdaa:	4805      	ldr	r0, [pc, #20]	@ (800cdc0 <CDC_Transmit_FS+0x48>)
 800cdac:	f7fe fe36 	bl	800ba1c <USBD_CDC_TransmitPacket>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cdb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3710      	adds	r7, #16
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}
 800cdbe:	bf00      	nop
 800cdc0:	200006ac 	.word	0x200006ac

0800cdc4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b083      	sub	sp, #12
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	4603      	mov	r3, r0
 800cdcc:	6039      	str	r1, [r7, #0]
 800cdce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	2212      	movs	r2, #18
 800cdd4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cdd6:	4b03      	ldr	r3, [pc, #12]	@ (800cde4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	370c      	adds	r7, #12
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bc80      	pop	{r7}
 800cde0:	4770      	bx	lr
 800cde2:	bf00      	nop
 800cde4:	20000168 	.word	0x20000168

0800cde8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b083      	sub	sp, #12
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	4603      	mov	r3, r0
 800cdf0:	6039      	str	r1, [r7, #0]
 800cdf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	2204      	movs	r2, #4
 800cdf8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cdfa:	4b03      	ldr	r3, [pc, #12]	@ (800ce08 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	370c      	adds	r7, #12
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bc80      	pop	{r7}
 800ce04:	4770      	bx	lr
 800ce06:	bf00      	nop
 800ce08:	2000017c 	.word	0x2000017c

0800ce0c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b082      	sub	sp, #8
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	4603      	mov	r3, r0
 800ce14:	6039      	str	r1, [r7, #0]
 800ce16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce18:	79fb      	ldrb	r3, [r7, #7]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d105      	bne.n	800ce2a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce1e:	683a      	ldr	r2, [r7, #0]
 800ce20:	4907      	ldr	r1, [pc, #28]	@ (800ce40 <USBD_FS_ProductStrDescriptor+0x34>)
 800ce22:	4808      	ldr	r0, [pc, #32]	@ (800ce44 <USBD_FS_ProductStrDescriptor+0x38>)
 800ce24:	f7ff fe0d 	bl	800ca42 <USBD_GetString>
 800ce28:	e004      	b.n	800ce34 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce2a:	683a      	ldr	r2, [r7, #0]
 800ce2c:	4904      	ldr	r1, [pc, #16]	@ (800ce40 <USBD_FS_ProductStrDescriptor+0x34>)
 800ce2e:	4805      	ldr	r0, [pc, #20]	@ (800ce44 <USBD_FS_ProductStrDescriptor+0x38>)
 800ce30:	f7ff fe07 	bl	800ca42 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce34:	4b02      	ldr	r3, [pc, #8]	@ (800ce40 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3708      	adds	r7, #8
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
 800ce3e:	bf00      	nop
 800ce40:	20001170 	.word	0x20001170
 800ce44:	08011ca8 	.word	0x08011ca8

0800ce48 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	4603      	mov	r3, r0
 800ce50:	6039      	str	r1, [r7, #0]
 800ce52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ce54:	683a      	ldr	r2, [r7, #0]
 800ce56:	4904      	ldr	r1, [pc, #16]	@ (800ce68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ce58:	4804      	ldr	r0, [pc, #16]	@ (800ce6c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ce5a:	f7ff fdf2 	bl	800ca42 <USBD_GetString>
  return USBD_StrDesc;
 800ce5e:	4b02      	ldr	r3, [pc, #8]	@ (800ce68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3708      	adds	r7, #8
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}
 800ce68:	20001170 	.word	0x20001170
 800ce6c:	08011cc0 	.word	0x08011cc0

0800ce70 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	4603      	mov	r3, r0
 800ce78:	6039      	str	r1, [r7, #0]
 800ce7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	221a      	movs	r2, #26
 800ce80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ce82:	f000 f843 	bl	800cf0c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ce86:	4b02      	ldr	r3, [pc, #8]	@ (800ce90 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3708      	adds	r7, #8
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}
 800ce90:	20000180 	.word	0x20000180

0800ce94 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b082      	sub	sp, #8
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	6039      	str	r1, [r7, #0]
 800ce9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cea0:	79fb      	ldrb	r3, [r7, #7]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d105      	bne.n	800ceb2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cea6:	683a      	ldr	r2, [r7, #0]
 800cea8:	4907      	ldr	r1, [pc, #28]	@ (800cec8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ceaa:	4808      	ldr	r0, [pc, #32]	@ (800cecc <USBD_FS_ConfigStrDescriptor+0x38>)
 800ceac:	f7ff fdc9 	bl	800ca42 <USBD_GetString>
 800ceb0:	e004      	b.n	800cebc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ceb2:	683a      	ldr	r2, [r7, #0]
 800ceb4:	4904      	ldr	r1, [pc, #16]	@ (800cec8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ceb6:	4805      	ldr	r0, [pc, #20]	@ (800cecc <USBD_FS_ConfigStrDescriptor+0x38>)
 800ceb8:	f7ff fdc3 	bl	800ca42 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cebc:	4b02      	ldr	r3, [pc, #8]	@ (800cec8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3708      	adds	r7, #8
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
 800cec6:	bf00      	nop
 800cec8:	20001170 	.word	0x20001170
 800cecc:	08011cd4 	.word	0x08011cd4

0800ced0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b082      	sub	sp, #8
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	4603      	mov	r3, r0
 800ced8:	6039      	str	r1, [r7, #0]
 800ceda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cedc:	79fb      	ldrb	r3, [r7, #7]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d105      	bne.n	800ceee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cee2:	683a      	ldr	r2, [r7, #0]
 800cee4:	4907      	ldr	r1, [pc, #28]	@ (800cf04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cee6:	4808      	ldr	r0, [pc, #32]	@ (800cf08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cee8:	f7ff fdab 	bl	800ca42 <USBD_GetString>
 800ceec:	e004      	b.n	800cef8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ceee:	683a      	ldr	r2, [r7, #0]
 800cef0:	4904      	ldr	r1, [pc, #16]	@ (800cf04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cef2:	4805      	ldr	r0, [pc, #20]	@ (800cf08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cef4:	f7ff fda5 	bl	800ca42 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cef8:	4b02      	ldr	r3, [pc, #8]	@ (800cf04 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3708      	adds	r7, #8
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
 800cf02:	bf00      	nop
 800cf04:	20001170 	.word	0x20001170
 800cf08:	08011ce0 	.word	0x08011ce0

0800cf0c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b084      	sub	sp, #16
 800cf10:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cf12:	4b0f      	ldr	r3, [pc, #60]	@ (800cf50 <Get_SerialNum+0x44>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cf18:	4b0e      	ldr	r3, [pc, #56]	@ (800cf54 <Get_SerialNum+0x48>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cf1e:	4b0e      	ldr	r3, [pc, #56]	@ (800cf58 <Get_SerialNum+0x4c>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cf24:	68fa      	ldr	r2, [r7, #12]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	4413      	add	r3, r2
 800cf2a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d009      	beq.n	800cf46 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cf32:	2208      	movs	r2, #8
 800cf34:	4909      	ldr	r1, [pc, #36]	@ (800cf5c <Get_SerialNum+0x50>)
 800cf36:	68f8      	ldr	r0, [r7, #12]
 800cf38:	f000 f814 	bl	800cf64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cf3c:	2204      	movs	r2, #4
 800cf3e:	4908      	ldr	r1, [pc, #32]	@ (800cf60 <Get_SerialNum+0x54>)
 800cf40:	68b8      	ldr	r0, [r7, #8]
 800cf42:	f000 f80f 	bl	800cf64 <IntToUnicode>
  }
}
 800cf46:	bf00      	nop
 800cf48:	3710      	adds	r7, #16
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	1ffff7e8 	.word	0x1ffff7e8
 800cf54:	1ffff7ec 	.word	0x1ffff7ec
 800cf58:	1ffff7f0 	.word	0x1ffff7f0
 800cf5c:	20000182 	.word	0x20000182
 800cf60:	20000192 	.word	0x20000192

0800cf64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cf64:	b480      	push	{r7}
 800cf66:	b087      	sub	sp, #28
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	60f8      	str	r0, [r7, #12]
 800cf6c:	60b9      	str	r1, [r7, #8]
 800cf6e:	4613      	mov	r3, r2
 800cf70:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cf72:	2300      	movs	r3, #0
 800cf74:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cf76:	2300      	movs	r3, #0
 800cf78:	75fb      	strb	r3, [r7, #23]
 800cf7a:	e027      	b.n	800cfcc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	0f1b      	lsrs	r3, r3, #28
 800cf80:	2b09      	cmp	r3, #9
 800cf82:	d80b      	bhi.n	800cf9c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	0f1b      	lsrs	r3, r3, #28
 800cf88:	b2da      	uxtb	r2, r3
 800cf8a:	7dfb      	ldrb	r3, [r7, #23]
 800cf8c:	005b      	lsls	r3, r3, #1
 800cf8e:	4619      	mov	r1, r3
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	440b      	add	r3, r1
 800cf94:	3230      	adds	r2, #48	@ 0x30
 800cf96:	b2d2      	uxtb	r2, r2
 800cf98:	701a      	strb	r2, [r3, #0]
 800cf9a:	e00a      	b.n	800cfb2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	0f1b      	lsrs	r3, r3, #28
 800cfa0:	b2da      	uxtb	r2, r3
 800cfa2:	7dfb      	ldrb	r3, [r7, #23]
 800cfa4:	005b      	lsls	r3, r3, #1
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	440b      	add	r3, r1
 800cfac:	3237      	adds	r2, #55	@ 0x37
 800cfae:	b2d2      	uxtb	r2, r2
 800cfb0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	011b      	lsls	r3, r3, #4
 800cfb6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cfb8:	7dfb      	ldrb	r3, [r7, #23]
 800cfba:	005b      	lsls	r3, r3, #1
 800cfbc:	3301      	adds	r3, #1
 800cfbe:	68ba      	ldr	r2, [r7, #8]
 800cfc0:	4413      	add	r3, r2
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cfc6:	7dfb      	ldrb	r3, [r7, #23]
 800cfc8:	3301      	adds	r3, #1
 800cfca:	75fb      	strb	r3, [r7, #23]
 800cfcc:	7dfa      	ldrb	r2, [r7, #23]
 800cfce:	79fb      	ldrb	r3, [r7, #7]
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d3d3      	bcc.n	800cf7c <IntToUnicode+0x18>
  }
}
 800cfd4:	bf00      	nop
 800cfd6:	bf00      	nop
 800cfd8:	371c      	adds	r7, #28
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bc80      	pop	{r7}
 800cfde:	4770      	bx	lr

0800cfe0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b084      	sub	sp, #16
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	4a0d      	ldr	r2, [pc, #52]	@ (800d024 <HAL_PCD_MspInit+0x44>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d113      	bne.n	800d01a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cff2:	4b0d      	ldr	r3, [pc, #52]	@ (800d028 <HAL_PCD_MspInit+0x48>)
 800cff4:	69db      	ldr	r3, [r3, #28]
 800cff6:	4a0c      	ldr	r2, [pc, #48]	@ (800d028 <HAL_PCD_MspInit+0x48>)
 800cff8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cffc:	61d3      	str	r3, [r2, #28]
 800cffe:	4b0a      	ldr	r3, [pc, #40]	@ (800d028 <HAL_PCD_MspInit+0x48>)
 800d000:	69db      	ldr	r3, [r3, #28]
 800d002:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d006:	60fb      	str	r3, [r7, #12]
 800d008:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800d00a:	2200      	movs	r2, #0
 800d00c:	2100      	movs	r1, #0
 800d00e:	2014      	movs	r0, #20
 800d010:	f7f6 fa37 	bl	8003482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800d014:	2014      	movs	r0, #20
 800d016:	f7f6 fa50 	bl	80034ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d01a:	bf00      	nop
 800d01c:	3710      	adds	r7, #16
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	40005c00 	.word	0x40005c00
 800d028:	40021000 	.word	0x40021000

0800d02c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b082      	sub	sp, #8
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800d040:	4619      	mov	r1, r3
 800d042:	4610      	mov	r0, r2
 800d044:	f7fe fdcf 	bl	800bbe6 <USBD_LL_SetupStage>
}
 800d048:	bf00      	nop
 800d04a:	3708      	adds	r7, #8
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}

0800d050 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
 800d058:	460b      	mov	r3, r1
 800d05a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800d062:	78fa      	ldrb	r2, [r7, #3]
 800d064:	6879      	ldr	r1, [r7, #4]
 800d066:	4613      	mov	r3, r2
 800d068:	009b      	lsls	r3, r3, #2
 800d06a:	4413      	add	r3, r2
 800d06c:	00db      	lsls	r3, r3, #3
 800d06e:	440b      	add	r3, r1
 800d070:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800d074:	681a      	ldr	r2, [r3, #0]
 800d076:	78fb      	ldrb	r3, [r7, #3]
 800d078:	4619      	mov	r1, r3
 800d07a:	f7fe fe01 	bl	800bc80 <USBD_LL_DataOutStage>
}
 800d07e:	bf00      	nop
 800d080:	3708      	adds	r7, #8
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}

0800d086 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d086:	b580      	push	{r7, lr}
 800d088:	b082      	sub	sp, #8
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]
 800d08e:	460b      	mov	r3, r1
 800d090:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800d098:	78fa      	ldrb	r2, [r7, #3]
 800d09a:	6879      	ldr	r1, [r7, #4]
 800d09c:	4613      	mov	r3, r2
 800d09e:	009b      	lsls	r3, r3, #2
 800d0a0:	4413      	add	r3, r2
 800d0a2:	00db      	lsls	r3, r3, #3
 800d0a4:	440b      	add	r3, r1
 800d0a6:	333c      	adds	r3, #60	@ 0x3c
 800d0a8:	681a      	ldr	r2, [r3, #0]
 800d0aa:	78fb      	ldrb	r3, [r7, #3]
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	f7fe fe58 	bl	800bd62 <USBD_LL_DataInStage>
}
 800d0b2:	bf00      	nop
 800d0b4:	3708      	adds	r7, #8
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}

0800d0ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0ba:	b580      	push	{r7, lr}
 800d0bc:	b082      	sub	sp, #8
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7fe ff68 	bl	800bf9e <USBD_LL_SOF>
}
 800d0ce:	bf00      	nop
 800d0d0:	3708      	adds	r7, #8
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}

0800d0d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0d6:	b580      	push	{r7, lr}
 800d0d8:	b084      	sub	sp, #16
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d0de:	2301      	movs	r3, #1
 800d0e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	689b      	ldr	r3, [r3, #8]
 800d0e6:	2b02      	cmp	r3, #2
 800d0e8:	d001      	beq.n	800d0ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d0ea:	f7f5 f8b1 	bl	8002250 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800d0f4:	7bfa      	ldrb	r2, [r7, #15]
 800d0f6:	4611      	mov	r1, r2
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f7fe ff18 	bl	800bf2e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800d104:	4618      	mov	r0, r3
 800d106:	f7fe fed1 	bl	800beac <USBD_LL_Reset>
}
 800d10a:	bf00      	nop
 800d10c:	3710      	adds	r7, #16
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}
	...

0800d114 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b082      	sub	sp, #8
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800d122:	4618      	mov	r0, r3
 800d124:	f7fe ff12 	bl	800bf4c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	699b      	ldr	r3, [r3, #24]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d005      	beq.n	800d13c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d130:	4b04      	ldr	r3, [pc, #16]	@ (800d144 <HAL_PCD_SuspendCallback+0x30>)
 800d132:	691b      	ldr	r3, [r3, #16]
 800d134:	4a03      	ldr	r2, [pc, #12]	@ (800d144 <HAL_PCD_SuspendCallback+0x30>)
 800d136:	f043 0306 	orr.w	r3, r3, #6
 800d13a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d13c:	bf00      	nop
 800d13e:	3708      	adds	r7, #8
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}
 800d144:	e000ed00 	.word	0xe000ed00

0800d148 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b082      	sub	sp, #8
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800d156:	4618      	mov	r0, r3
 800d158:	f7fe ff0c 	bl	800bf74 <USBD_LL_Resume>
}
 800d15c:	bf00      	nop
 800d15e:	3708      	adds	r7, #8
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}

0800d164 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b082      	sub	sp, #8
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d16c:	4a28      	ldr	r2, [pc, #160]	@ (800d210 <USBD_LL_Init+0xac>)
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	4a26      	ldr	r2, [pc, #152]	@ (800d210 <USBD_LL_Init+0xac>)
 800d178:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d17c:	4b24      	ldr	r3, [pc, #144]	@ (800d210 <USBD_LL_Init+0xac>)
 800d17e:	4a25      	ldr	r2, [pc, #148]	@ (800d214 <USBD_LL_Init+0xb0>)
 800d180:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d182:	4b23      	ldr	r3, [pc, #140]	@ (800d210 <USBD_LL_Init+0xac>)
 800d184:	2208      	movs	r2, #8
 800d186:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d188:	4b21      	ldr	r3, [pc, #132]	@ (800d210 <USBD_LL_Init+0xac>)
 800d18a:	2202      	movs	r2, #2
 800d18c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d18e:	4b20      	ldr	r3, [pc, #128]	@ (800d210 <USBD_LL_Init+0xac>)
 800d190:	2200      	movs	r2, #0
 800d192:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d194:	4b1e      	ldr	r3, [pc, #120]	@ (800d210 <USBD_LL_Init+0xac>)
 800d196:	2200      	movs	r2, #0
 800d198:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d19a:	4b1d      	ldr	r3, [pc, #116]	@ (800d210 <USBD_LL_Init+0xac>)
 800d19c:	2200      	movs	r2, #0
 800d19e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d1a0:	481b      	ldr	r0, [pc, #108]	@ (800d210 <USBD_LL_Init+0xac>)
 800d1a2:	f7f7 febd 	bl	8004f20 <HAL_PCD_Init>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d001      	beq.n	800d1b0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800d1ac:	f7f5 f850 	bl	8002250 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d1b6:	2318      	movs	r3, #24
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	2100      	movs	r1, #0
 800d1bc:	f7f9 fbdb 	bl	8006976 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d1c6:	2358      	movs	r3, #88	@ 0x58
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	2180      	movs	r1, #128	@ 0x80
 800d1cc:	f7f9 fbd3 	bl	8006976 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d1d6:	23c0      	movs	r3, #192	@ 0xc0
 800d1d8:	2200      	movs	r2, #0
 800d1da:	2181      	movs	r1, #129	@ 0x81
 800d1dc:	f7f9 fbcb 	bl	8006976 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d1e6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	2101      	movs	r1, #1
 800d1ee:	f7f9 fbc2 	bl	8006976 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d1f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	2182      	movs	r1, #130	@ 0x82
 800d200:	f7f9 fbb9 	bl	8006976 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d204:	2300      	movs	r3, #0
}
 800d206:	4618      	mov	r0, r3
 800d208:	3708      	adds	r7, #8
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}
 800d20e:	bf00      	nop
 800d210:	20001370 	.word	0x20001370
 800d214:	40005c00 	.word	0x40005c00

0800d218 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b084      	sub	sp, #16
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d220:	2300      	movs	r3, #0
 800d222:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d224:	2300      	movs	r3, #0
 800d226:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d22e:	4618      	mov	r0, r3
 800d230:	f7f7 ff75 	bl	800511e <HAL_PCD_Start>
 800d234:	4603      	mov	r3, r0
 800d236:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d238:	7bfb      	ldrb	r3, [r7, #15]
 800d23a:	4618      	mov	r0, r3
 800d23c:	f000 f94e 	bl	800d4dc <USBD_Get_USB_Status>
 800d240:	4603      	mov	r3, r0
 800d242:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d244:	7bbb      	ldrb	r3, [r7, #14]
}
 800d246:	4618      	mov	r0, r3
 800d248:	3710      	adds	r7, #16
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}

0800d24e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d24e:	b580      	push	{r7, lr}
 800d250:	b084      	sub	sp, #16
 800d252:	af00      	add	r7, sp, #0
 800d254:	6078      	str	r0, [r7, #4]
 800d256:	4608      	mov	r0, r1
 800d258:	4611      	mov	r1, r2
 800d25a:	461a      	mov	r2, r3
 800d25c:	4603      	mov	r3, r0
 800d25e:	70fb      	strb	r3, [r7, #3]
 800d260:	460b      	mov	r3, r1
 800d262:	70bb      	strb	r3, [r7, #2]
 800d264:	4613      	mov	r3, r2
 800d266:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d268:	2300      	movs	r3, #0
 800d26a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d26c:	2300      	movs	r3, #0
 800d26e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d276:	78bb      	ldrb	r3, [r7, #2]
 800d278:	883a      	ldrh	r2, [r7, #0]
 800d27a:	78f9      	ldrb	r1, [r7, #3]
 800d27c:	f7f8 f8ca 	bl	8005414 <HAL_PCD_EP_Open>
 800d280:	4603      	mov	r3, r0
 800d282:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d284:	7bfb      	ldrb	r3, [r7, #15]
 800d286:	4618      	mov	r0, r3
 800d288:	f000 f928 	bl	800d4dc <USBD_Get_USB_Status>
 800d28c:	4603      	mov	r3, r0
 800d28e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d290:	7bbb      	ldrb	r3, [r7, #14]
}
 800d292:	4618      	mov	r0, r3
 800d294:	3710      	adds	r7, #16
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}

0800d29a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d29a:	b580      	push	{r7, lr}
 800d29c:	b084      	sub	sp, #16
 800d29e:	af00      	add	r7, sp, #0
 800d2a0:	6078      	str	r0, [r7, #4]
 800d2a2:	460b      	mov	r3, r1
 800d2a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d2b4:	78fa      	ldrb	r2, [r7, #3]
 800d2b6:	4611      	mov	r1, r2
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7f8 f908 	bl	80054ce <HAL_PCD_EP_Close>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2c2:	7bfb      	ldrb	r3, [r7, #15]
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f000 f909 	bl	800d4dc <USBD_Get_USB_Status>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3710      	adds	r7, #16
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}

0800d2d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b084      	sub	sp, #16
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	460b      	mov	r3, r1
 800d2e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d2f2:	78fa      	ldrb	r2, [r7, #3]
 800d2f4:	4611      	mov	r1, r2
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f7f8 f9b0 	bl	800565c <HAL_PCD_EP_SetStall>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d300:	7bfb      	ldrb	r3, [r7, #15]
 800d302:	4618      	mov	r0, r3
 800d304:	f000 f8ea 	bl	800d4dc <USBD_Get_USB_Status>
 800d308:	4603      	mov	r3, r0
 800d30a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d30c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3710      	adds	r7, #16
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}

0800d316 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d316:	b580      	push	{r7, lr}
 800d318:	b084      	sub	sp, #16
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	6078      	str	r0, [r7, #4]
 800d31e:	460b      	mov	r3, r1
 800d320:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d322:	2300      	movs	r3, #0
 800d324:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d326:	2300      	movs	r3, #0
 800d328:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d330:	78fa      	ldrb	r2, [r7, #3]
 800d332:	4611      	mov	r1, r2
 800d334:	4618      	mov	r0, r3
 800d336:	f7f8 f9f1 	bl	800571c <HAL_PCD_EP_ClrStall>
 800d33a:	4603      	mov	r3, r0
 800d33c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d33e:	7bfb      	ldrb	r3, [r7, #15]
 800d340:	4618      	mov	r0, r3
 800d342:	f000 f8cb 	bl	800d4dc <USBD_Get_USB_Status>
 800d346:	4603      	mov	r3, r0
 800d348:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d34a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3710      	adds	r7, #16
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}

0800d354 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d354:	b480      	push	{r7}
 800d356:	b085      	sub	sp, #20
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	460b      	mov	r3, r1
 800d35e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d366:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d368:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	da0c      	bge.n	800d38a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d370:	78fb      	ldrb	r3, [r7, #3]
 800d372:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d376:	68f9      	ldr	r1, [r7, #12]
 800d378:	1c5a      	adds	r2, r3, #1
 800d37a:	4613      	mov	r3, r2
 800d37c:	009b      	lsls	r3, r3, #2
 800d37e:	4413      	add	r3, r2
 800d380:	00db      	lsls	r3, r3, #3
 800d382:	440b      	add	r3, r1
 800d384:	3302      	adds	r3, #2
 800d386:	781b      	ldrb	r3, [r3, #0]
 800d388:	e00b      	b.n	800d3a2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d38a:	78fb      	ldrb	r3, [r7, #3]
 800d38c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d390:	68f9      	ldr	r1, [r7, #12]
 800d392:	4613      	mov	r3, r2
 800d394:	009b      	lsls	r3, r3, #2
 800d396:	4413      	add	r3, r2
 800d398:	00db      	lsls	r3, r3, #3
 800d39a:	440b      	add	r3, r1
 800d39c:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800d3a0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3714      	adds	r7, #20
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bc80      	pop	{r7}
 800d3aa:	4770      	bx	lr

0800d3ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b084      	sub	sp, #16
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	460b      	mov	r3, r1
 800d3b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d3c6:	78fa      	ldrb	r2, [r7, #3]
 800d3c8:	4611      	mov	r1, r2
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f7f7 fffd 	bl	80053ca <HAL_PCD_SetAddress>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3d4:	7bfb      	ldrb	r3, [r7, #15]
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f000 f880 	bl	800d4dc <USBD_Get_USB_Status>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3710      	adds	r7, #16
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}

0800d3ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d3ea:	b580      	push	{r7, lr}
 800d3ec:	b086      	sub	sp, #24
 800d3ee:	af00      	add	r7, sp, #0
 800d3f0:	60f8      	str	r0, [r7, #12]
 800d3f2:	607a      	str	r2, [r7, #4]
 800d3f4:	461a      	mov	r2, r3
 800d3f6:	460b      	mov	r3, r1
 800d3f8:	72fb      	strb	r3, [r7, #11]
 800d3fa:	4613      	mov	r3, r2
 800d3fc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3fe:	2300      	movs	r3, #0
 800d400:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d402:	2300      	movs	r3, #0
 800d404:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d40c:	893b      	ldrh	r3, [r7, #8]
 800d40e:	7af9      	ldrb	r1, [r7, #11]
 800d410:	687a      	ldr	r2, [r7, #4]
 800d412:	f7f8 f8ec 	bl	80055ee <HAL_PCD_EP_Transmit>
 800d416:	4603      	mov	r3, r0
 800d418:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d41a:	7dfb      	ldrb	r3, [r7, #23]
 800d41c:	4618      	mov	r0, r3
 800d41e:	f000 f85d 	bl	800d4dc <USBD_Get_USB_Status>
 800d422:	4603      	mov	r3, r0
 800d424:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d426:	7dbb      	ldrb	r3, [r7, #22]
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3718      	adds	r7, #24
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b086      	sub	sp, #24
 800d434:	af00      	add	r7, sp, #0
 800d436:	60f8      	str	r0, [r7, #12]
 800d438:	607a      	str	r2, [r7, #4]
 800d43a:	461a      	mov	r2, r3
 800d43c:	460b      	mov	r3, r1
 800d43e:	72fb      	strb	r3, [r7, #11]
 800d440:	4613      	mov	r3, r2
 800d442:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d444:	2300      	movs	r3, #0
 800d446:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d448:	2300      	movs	r3, #0
 800d44a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d452:	893b      	ldrh	r3, [r7, #8]
 800d454:	7af9      	ldrb	r1, [r7, #11]
 800d456:	687a      	ldr	r2, [r7, #4]
 800d458:	f7f8 f881 	bl	800555e <HAL_PCD_EP_Receive>
 800d45c:	4603      	mov	r3, r0
 800d45e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d460:	7dfb      	ldrb	r3, [r7, #23]
 800d462:	4618      	mov	r0, r3
 800d464:	f000 f83a 	bl	800d4dc <USBD_Get_USB_Status>
 800d468:	4603      	mov	r3, r0
 800d46a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d46c:	7dbb      	ldrb	r3, [r7, #22]
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3718      	adds	r7, #24
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}

0800d476 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d476:	b580      	push	{r7, lr}
 800d478:	b082      	sub	sp, #8
 800d47a:	af00      	add	r7, sp, #0
 800d47c:	6078      	str	r0, [r7, #4]
 800d47e:	460b      	mov	r3, r1
 800d480:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d488:	78fa      	ldrb	r2, [r7, #3]
 800d48a:	4611      	mov	r1, r2
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7f8 f897 	bl	80055c0 <HAL_PCD_EP_GetRxCount>
 800d492:	4603      	mov	r3, r0
}
 800d494:	4618      	mov	r0, r3
 800d496:	3708      	adds	r7, #8
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b083      	sub	sp, #12
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d4a4:	4b02      	ldr	r3, [pc, #8]	@ (800d4b0 <USBD_static_malloc+0x14>)
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	370c      	adds	r7, #12
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bc80      	pop	{r7}
 800d4ae:	4770      	bx	lr
 800d4b0:	20001660 	.word	0x20001660

0800d4b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b083      	sub	sp, #12
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]

}
 800d4bc:	bf00      	nop
 800d4be:	370c      	adds	r7, #12
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bc80      	pop	{r7}
 800d4c4:	4770      	bx	lr

0800d4c6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4c6:	b480      	push	{r7}
 800d4c8:	b083      	sub	sp, #12
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	6078      	str	r0, [r7, #4]
 800d4ce:	460b      	mov	r3, r1
 800d4d0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d4d2:	bf00      	nop
 800d4d4:	370c      	adds	r7, #12
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bc80      	pop	{r7}
 800d4da:	4770      	bx	lr

0800d4dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b085      	sub	sp, #20
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d4ea:	79fb      	ldrb	r3, [r7, #7]
 800d4ec:	2b03      	cmp	r3, #3
 800d4ee:	d817      	bhi.n	800d520 <USBD_Get_USB_Status+0x44>
 800d4f0:	a201      	add	r2, pc, #4	@ (adr r2, 800d4f8 <USBD_Get_USB_Status+0x1c>)
 800d4f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4f6:	bf00      	nop
 800d4f8:	0800d509 	.word	0x0800d509
 800d4fc:	0800d50f 	.word	0x0800d50f
 800d500:	0800d515 	.word	0x0800d515
 800d504:	0800d51b 	.word	0x0800d51b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d508:	2300      	movs	r3, #0
 800d50a:	73fb      	strb	r3, [r7, #15]
    break;
 800d50c:	e00b      	b.n	800d526 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d50e:	2302      	movs	r3, #2
 800d510:	73fb      	strb	r3, [r7, #15]
    break;
 800d512:	e008      	b.n	800d526 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d514:	2301      	movs	r3, #1
 800d516:	73fb      	strb	r3, [r7, #15]
    break;
 800d518:	e005      	b.n	800d526 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d51a:	2302      	movs	r3, #2
 800d51c:	73fb      	strb	r3, [r7, #15]
    break;
 800d51e:	e002      	b.n	800d526 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d520:	2302      	movs	r3, #2
 800d522:	73fb      	strb	r3, [r7, #15]
    break;
 800d524:	bf00      	nop
  }
  return usb_status;
 800d526:	7bfb      	ldrb	r3, [r7, #15]
}
 800d528:	4618      	mov	r0, r3
 800d52a:	3714      	adds	r7, #20
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bc80      	pop	{r7}
 800d530:	4770      	bx	lr
 800d532:	bf00      	nop

0800d534 <__cvt>:
 800d534:	2b00      	cmp	r3, #0
 800d536:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d53a:	461d      	mov	r5, r3
 800d53c:	bfbb      	ittet	lt
 800d53e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800d542:	461d      	movlt	r5, r3
 800d544:	2300      	movge	r3, #0
 800d546:	232d      	movlt	r3, #45	@ 0x2d
 800d548:	b088      	sub	sp, #32
 800d54a:	4614      	mov	r4, r2
 800d54c:	bfb8      	it	lt
 800d54e:	4614      	movlt	r4, r2
 800d550:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d552:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800d554:	7013      	strb	r3, [r2, #0]
 800d556:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d558:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800d55c:	f023 0820 	bic.w	r8, r3, #32
 800d560:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d564:	d005      	beq.n	800d572 <__cvt+0x3e>
 800d566:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d56a:	d100      	bne.n	800d56e <__cvt+0x3a>
 800d56c:	3601      	adds	r6, #1
 800d56e:	2302      	movs	r3, #2
 800d570:	e000      	b.n	800d574 <__cvt+0x40>
 800d572:	2303      	movs	r3, #3
 800d574:	aa07      	add	r2, sp, #28
 800d576:	9204      	str	r2, [sp, #16]
 800d578:	aa06      	add	r2, sp, #24
 800d57a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800d57e:	e9cd 3600 	strd	r3, r6, [sp]
 800d582:	4622      	mov	r2, r4
 800d584:	462b      	mov	r3, r5
 800d586:	f001 f883 	bl	800e690 <_dtoa_r>
 800d58a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d58e:	4607      	mov	r7, r0
 800d590:	d119      	bne.n	800d5c6 <__cvt+0x92>
 800d592:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d594:	07db      	lsls	r3, r3, #31
 800d596:	d50e      	bpl.n	800d5b6 <__cvt+0x82>
 800d598:	eb00 0906 	add.w	r9, r0, r6
 800d59c:	2200      	movs	r2, #0
 800d59e:	2300      	movs	r3, #0
 800d5a0:	4620      	mov	r0, r4
 800d5a2:	4629      	mov	r1, r5
 800d5a4:	f7f3 fa00 	bl	80009a8 <__aeabi_dcmpeq>
 800d5a8:	b108      	cbz	r0, 800d5ae <__cvt+0x7a>
 800d5aa:	f8cd 901c 	str.w	r9, [sp, #28]
 800d5ae:	2230      	movs	r2, #48	@ 0x30
 800d5b0:	9b07      	ldr	r3, [sp, #28]
 800d5b2:	454b      	cmp	r3, r9
 800d5b4:	d31e      	bcc.n	800d5f4 <__cvt+0xc0>
 800d5b6:	4638      	mov	r0, r7
 800d5b8:	9b07      	ldr	r3, [sp, #28]
 800d5ba:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d5bc:	1bdb      	subs	r3, r3, r7
 800d5be:	6013      	str	r3, [r2, #0]
 800d5c0:	b008      	add	sp, #32
 800d5c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5c6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d5ca:	eb00 0906 	add.w	r9, r0, r6
 800d5ce:	d1e5      	bne.n	800d59c <__cvt+0x68>
 800d5d0:	7803      	ldrb	r3, [r0, #0]
 800d5d2:	2b30      	cmp	r3, #48	@ 0x30
 800d5d4:	d10a      	bne.n	800d5ec <__cvt+0xb8>
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	2300      	movs	r3, #0
 800d5da:	4620      	mov	r0, r4
 800d5dc:	4629      	mov	r1, r5
 800d5de:	f7f3 f9e3 	bl	80009a8 <__aeabi_dcmpeq>
 800d5e2:	b918      	cbnz	r0, 800d5ec <__cvt+0xb8>
 800d5e4:	f1c6 0601 	rsb	r6, r6, #1
 800d5e8:	f8ca 6000 	str.w	r6, [sl]
 800d5ec:	f8da 3000 	ldr.w	r3, [sl]
 800d5f0:	4499      	add	r9, r3
 800d5f2:	e7d3      	b.n	800d59c <__cvt+0x68>
 800d5f4:	1c59      	adds	r1, r3, #1
 800d5f6:	9107      	str	r1, [sp, #28]
 800d5f8:	701a      	strb	r2, [r3, #0]
 800d5fa:	e7d9      	b.n	800d5b0 <__cvt+0x7c>

0800d5fc <__exponent>:
 800d5fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5fe:	2900      	cmp	r1, #0
 800d600:	bfb6      	itet	lt
 800d602:	232d      	movlt	r3, #45	@ 0x2d
 800d604:	232b      	movge	r3, #43	@ 0x2b
 800d606:	4249      	neglt	r1, r1
 800d608:	2909      	cmp	r1, #9
 800d60a:	7002      	strb	r2, [r0, #0]
 800d60c:	7043      	strb	r3, [r0, #1]
 800d60e:	dd29      	ble.n	800d664 <__exponent+0x68>
 800d610:	f10d 0307 	add.w	r3, sp, #7
 800d614:	461d      	mov	r5, r3
 800d616:	270a      	movs	r7, #10
 800d618:	fbb1 f6f7 	udiv	r6, r1, r7
 800d61c:	461a      	mov	r2, r3
 800d61e:	fb07 1416 	mls	r4, r7, r6, r1
 800d622:	3430      	adds	r4, #48	@ 0x30
 800d624:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d628:	460c      	mov	r4, r1
 800d62a:	2c63      	cmp	r4, #99	@ 0x63
 800d62c:	4631      	mov	r1, r6
 800d62e:	f103 33ff 	add.w	r3, r3, #4294967295
 800d632:	dcf1      	bgt.n	800d618 <__exponent+0x1c>
 800d634:	3130      	adds	r1, #48	@ 0x30
 800d636:	1e94      	subs	r4, r2, #2
 800d638:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d63c:	4623      	mov	r3, r4
 800d63e:	1c41      	adds	r1, r0, #1
 800d640:	42ab      	cmp	r3, r5
 800d642:	d30a      	bcc.n	800d65a <__exponent+0x5e>
 800d644:	f10d 0309 	add.w	r3, sp, #9
 800d648:	1a9b      	subs	r3, r3, r2
 800d64a:	42ac      	cmp	r4, r5
 800d64c:	bf88      	it	hi
 800d64e:	2300      	movhi	r3, #0
 800d650:	3302      	adds	r3, #2
 800d652:	4403      	add	r3, r0
 800d654:	1a18      	subs	r0, r3, r0
 800d656:	b003      	add	sp, #12
 800d658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d65a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d65e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d662:	e7ed      	b.n	800d640 <__exponent+0x44>
 800d664:	2330      	movs	r3, #48	@ 0x30
 800d666:	3130      	adds	r1, #48	@ 0x30
 800d668:	7083      	strb	r3, [r0, #2]
 800d66a:	70c1      	strb	r1, [r0, #3]
 800d66c:	1d03      	adds	r3, r0, #4
 800d66e:	e7f1      	b.n	800d654 <__exponent+0x58>

0800d670 <_printf_float>:
 800d670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d674:	b091      	sub	sp, #68	@ 0x44
 800d676:	460c      	mov	r4, r1
 800d678:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800d67c:	4616      	mov	r6, r2
 800d67e:	461f      	mov	r7, r3
 800d680:	4605      	mov	r5, r0
 800d682:	f000 fef1 	bl	800e468 <_localeconv_r>
 800d686:	6803      	ldr	r3, [r0, #0]
 800d688:	4618      	mov	r0, r3
 800d68a:	9308      	str	r3, [sp, #32]
 800d68c:	f7f2 fd60 	bl	8000150 <strlen>
 800d690:	2300      	movs	r3, #0
 800d692:	930e      	str	r3, [sp, #56]	@ 0x38
 800d694:	f8d8 3000 	ldr.w	r3, [r8]
 800d698:	9009      	str	r0, [sp, #36]	@ 0x24
 800d69a:	3307      	adds	r3, #7
 800d69c:	f023 0307 	bic.w	r3, r3, #7
 800d6a0:	f103 0208 	add.w	r2, r3, #8
 800d6a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d6a8:	f8d4 b000 	ldr.w	fp, [r4]
 800d6ac:	f8c8 2000 	str.w	r2, [r8]
 800d6b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d6b4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d6b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6ba:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800d6be:	f04f 32ff 	mov.w	r2, #4294967295
 800d6c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d6c6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d6ca:	4b9c      	ldr	r3, [pc, #624]	@ (800d93c <_printf_float+0x2cc>)
 800d6cc:	f7f3 f99e 	bl	8000a0c <__aeabi_dcmpun>
 800d6d0:	bb70      	cbnz	r0, 800d730 <_printf_float+0xc0>
 800d6d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d6d6:	f04f 32ff 	mov.w	r2, #4294967295
 800d6da:	4b98      	ldr	r3, [pc, #608]	@ (800d93c <_printf_float+0x2cc>)
 800d6dc:	f7f3 f978 	bl	80009d0 <__aeabi_dcmple>
 800d6e0:	bb30      	cbnz	r0, 800d730 <_printf_float+0xc0>
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	4640      	mov	r0, r8
 800d6e8:	4649      	mov	r1, r9
 800d6ea:	f7f3 f967 	bl	80009bc <__aeabi_dcmplt>
 800d6ee:	b110      	cbz	r0, 800d6f6 <_printf_float+0x86>
 800d6f0:	232d      	movs	r3, #45	@ 0x2d
 800d6f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d6f6:	4a92      	ldr	r2, [pc, #584]	@ (800d940 <_printf_float+0x2d0>)
 800d6f8:	4b92      	ldr	r3, [pc, #584]	@ (800d944 <_printf_float+0x2d4>)
 800d6fa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d6fe:	bf94      	ite	ls
 800d700:	4690      	movls	r8, r2
 800d702:	4698      	movhi	r8, r3
 800d704:	2303      	movs	r3, #3
 800d706:	f04f 0900 	mov.w	r9, #0
 800d70a:	6123      	str	r3, [r4, #16]
 800d70c:	f02b 0304 	bic.w	r3, fp, #4
 800d710:	6023      	str	r3, [r4, #0]
 800d712:	4633      	mov	r3, r6
 800d714:	4621      	mov	r1, r4
 800d716:	4628      	mov	r0, r5
 800d718:	9700      	str	r7, [sp, #0]
 800d71a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800d71c:	f000 f9d4 	bl	800dac8 <_printf_common>
 800d720:	3001      	adds	r0, #1
 800d722:	f040 8090 	bne.w	800d846 <_printf_float+0x1d6>
 800d726:	f04f 30ff 	mov.w	r0, #4294967295
 800d72a:	b011      	add	sp, #68	@ 0x44
 800d72c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d730:	4642      	mov	r2, r8
 800d732:	464b      	mov	r3, r9
 800d734:	4640      	mov	r0, r8
 800d736:	4649      	mov	r1, r9
 800d738:	f7f3 f968 	bl	8000a0c <__aeabi_dcmpun>
 800d73c:	b148      	cbz	r0, 800d752 <_printf_float+0xe2>
 800d73e:	464b      	mov	r3, r9
 800d740:	2b00      	cmp	r3, #0
 800d742:	bfb8      	it	lt
 800d744:	232d      	movlt	r3, #45	@ 0x2d
 800d746:	4a80      	ldr	r2, [pc, #512]	@ (800d948 <_printf_float+0x2d8>)
 800d748:	bfb8      	it	lt
 800d74a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d74e:	4b7f      	ldr	r3, [pc, #508]	@ (800d94c <_printf_float+0x2dc>)
 800d750:	e7d3      	b.n	800d6fa <_printf_float+0x8a>
 800d752:	6863      	ldr	r3, [r4, #4]
 800d754:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800d758:	1c5a      	adds	r2, r3, #1
 800d75a:	d13f      	bne.n	800d7dc <_printf_float+0x16c>
 800d75c:	2306      	movs	r3, #6
 800d75e:	6063      	str	r3, [r4, #4]
 800d760:	2200      	movs	r2, #0
 800d762:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800d766:	6023      	str	r3, [r4, #0]
 800d768:	9206      	str	r2, [sp, #24]
 800d76a:	aa0e      	add	r2, sp, #56	@ 0x38
 800d76c:	e9cd a204 	strd	sl, r2, [sp, #16]
 800d770:	aa0d      	add	r2, sp, #52	@ 0x34
 800d772:	9203      	str	r2, [sp, #12]
 800d774:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800d778:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d77c:	6863      	ldr	r3, [r4, #4]
 800d77e:	4642      	mov	r2, r8
 800d780:	9300      	str	r3, [sp, #0]
 800d782:	4628      	mov	r0, r5
 800d784:	464b      	mov	r3, r9
 800d786:	910a      	str	r1, [sp, #40]	@ 0x28
 800d788:	f7ff fed4 	bl	800d534 <__cvt>
 800d78c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d78e:	4680      	mov	r8, r0
 800d790:	2947      	cmp	r1, #71	@ 0x47
 800d792:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d794:	d128      	bne.n	800d7e8 <_printf_float+0x178>
 800d796:	1cc8      	adds	r0, r1, #3
 800d798:	db02      	blt.n	800d7a0 <_printf_float+0x130>
 800d79a:	6863      	ldr	r3, [r4, #4]
 800d79c:	4299      	cmp	r1, r3
 800d79e:	dd40      	ble.n	800d822 <_printf_float+0x1b2>
 800d7a0:	f1aa 0a02 	sub.w	sl, sl, #2
 800d7a4:	fa5f fa8a 	uxtb.w	sl, sl
 800d7a8:	4652      	mov	r2, sl
 800d7aa:	3901      	subs	r1, #1
 800d7ac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d7b0:	910d      	str	r1, [sp, #52]	@ 0x34
 800d7b2:	f7ff ff23 	bl	800d5fc <__exponent>
 800d7b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d7b8:	4681      	mov	r9, r0
 800d7ba:	1813      	adds	r3, r2, r0
 800d7bc:	2a01      	cmp	r2, #1
 800d7be:	6123      	str	r3, [r4, #16]
 800d7c0:	dc02      	bgt.n	800d7c8 <_printf_float+0x158>
 800d7c2:	6822      	ldr	r2, [r4, #0]
 800d7c4:	07d2      	lsls	r2, r2, #31
 800d7c6:	d501      	bpl.n	800d7cc <_printf_float+0x15c>
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	6123      	str	r3, [r4, #16]
 800d7cc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d09e      	beq.n	800d712 <_printf_float+0xa2>
 800d7d4:	232d      	movs	r3, #45	@ 0x2d
 800d7d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d7da:	e79a      	b.n	800d712 <_printf_float+0xa2>
 800d7dc:	2947      	cmp	r1, #71	@ 0x47
 800d7de:	d1bf      	bne.n	800d760 <_printf_float+0xf0>
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d1bd      	bne.n	800d760 <_printf_float+0xf0>
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	e7ba      	b.n	800d75e <_printf_float+0xee>
 800d7e8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d7ec:	d9dc      	bls.n	800d7a8 <_printf_float+0x138>
 800d7ee:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d7f2:	d118      	bne.n	800d826 <_printf_float+0x1b6>
 800d7f4:	2900      	cmp	r1, #0
 800d7f6:	6863      	ldr	r3, [r4, #4]
 800d7f8:	dd0b      	ble.n	800d812 <_printf_float+0x1a2>
 800d7fa:	6121      	str	r1, [r4, #16]
 800d7fc:	b913      	cbnz	r3, 800d804 <_printf_float+0x194>
 800d7fe:	6822      	ldr	r2, [r4, #0]
 800d800:	07d0      	lsls	r0, r2, #31
 800d802:	d502      	bpl.n	800d80a <_printf_float+0x19a>
 800d804:	3301      	adds	r3, #1
 800d806:	440b      	add	r3, r1
 800d808:	6123      	str	r3, [r4, #16]
 800d80a:	f04f 0900 	mov.w	r9, #0
 800d80e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d810:	e7dc      	b.n	800d7cc <_printf_float+0x15c>
 800d812:	b913      	cbnz	r3, 800d81a <_printf_float+0x1aa>
 800d814:	6822      	ldr	r2, [r4, #0]
 800d816:	07d2      	lsls	r2, r2, #31
 800d818:	d501      	bpl.n	800d81e <_printf_float+0x1ae>
 800d81a:	3302      	adds	r3, #2
 800d81c:	e7f4      	b.n	800d808 <_printf_float+0x198>
 800d81e:	2301      	movs	r3, #1
 800d820:	e7f2      	b.n	800d808 <_printf_float+0x198>
 800d822:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d826:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d828:	4299      	cmp	r1, r3
 800d82a:	db05      	blt.n	800d838 <_printf_float+0x1c8>
 800d82c:	6823      	ldr	r3, [r4, #0]
 800d82e:	6121      	str	r1, [r4, #16]
 800d830:	07d8      	lsls	r0, r3, #31
 800d832:	d5ea      	bpl.n	800d80a <_printf_float+0x19a>
 800d834:	1c4b      	adds	r3, r1, #1
 800d836:	e7e7      	b.n	800d808 <_printf_float+0x198>
 800d838:	2900      	cmp	r1, #0
 800d83a:	bfcc      	ite	gt
 800d83c:	2201      	movgt	r2, #1
 800d83e:	f1c1 0202 	rsble	r2, r1, #2
 800d842:	4413      	add	r3, r2
 800d844:	e7e0      	b.n	800d808 <_printf_float+0x198>
 800d846:	6823      	ldr	r3, [r4, #0]
 800d848:	055a      	lsls	r2, r3, #21
 800d84a:	d407      	bmi.n	800d85c <_printf_float+0x1ec>
 800d84c:	6923      	ldr	r3, [r4, #16]
 800d84e:	4642      	mov	r2, r8
 800d850:	4631      	mov	r1, r6
 800d852:	4628      	mov	r0, r5
 800d854:	47b8      	blx	r7
 800d856:	3001      	adds	r0, #1
 800d858:	d12b      	bne.n	800d8b2 <_printf_float+0x242>
 800d85a:	e764      	b.n	800d726 <_printf_float+0xb6>
 800d85c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d860:	f240 80dc 	bls.w	800da1c <_printf_float+0x3ac>
 800d864:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d868:	2200      	movs	r2, #0
 800d86a:	2300      	movs	r3, #0
 800d86c:	f7f3 f89c 	bl	80009a8 <__aeabi_dcmpeq>
 800d870:	2800      	cmp	r0, #0
 800d872:	d033      	beq.n	800d8dc <_printf_float+0x26c>
 800d874:	2301      	movs	r3, #1
 800d876:	4631      	mov	r1, r6
 800d878:	4628      	mov	r0, r5
 800d87a:	4a35      	ldr	r2, [pc, #212]	@ (800d950 <_printf_float+0x2e0>)
 800d87c:	47b8      	blx	r7
 800d87e:	3001      	adds	r0, #1
 800d880:	f43f af51 	beq.w	800d726 <_printf_float+0xb6>
 800d884:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800d888:	4543      	cmp	r3, r8
 800d88a:	db02      	blt.n	800d892 <_printf_float+0x222>
 800d88c:	6823      	ldr	r3, [r4, #0]
 800d88e:	07d8      	lsls	r0, r3, #31
 800d890:	d50f      	bpl.n	800d8b2 <_printf_float+0x242>
 800d892:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d896:	4631      	mov	r1, r6
 800d898:	4628      	mov	r0, r5
 800d89a:	47b8      	blx	r7
 800d89c:	3001      	adds	r0, #1
 800d89e:	f43f af42 	beq.w	800d726 <_printf_float+0xb6>
 800d8a2:	f04f 0900 	mov.w	r9, #0
 800d8a6:	f108 38ff 	add.w	r8, r8, #4294967295
 800d8aa:	f104 0a1a 	add.w	sl, r4, #26
 800d8ae:	45c8      	cmp	r8, r9
 800d8b0:	dc09      	bgt.n	800d8c6 <_printf_float+0x256>
 800d8b2:	6823      	ldr	r3, [r4, #0]
 800d8b4:	079b      	lsls	r3, r3, #30
 800d8b6:	f100 8102 	bmi.w	800dabe <_printf_float+0x44e>
 800d8ba:	68e0      	ldr	r0, [r4, #12]
 800d8bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8be:	4298      	cmp	r0, r3
 800d8c0:	bfb8      	it	lt
 800d8c2:	4618      	movlt	r0, r3
 800d8c4:	e731      	b.n	800d72a <_printf_float+0xba>
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	4652      	mov	r2, sl
 800d8ca:	4631      	mov	r1, r6
 800d8cc:	4628      	mov	r0, r5
 800d8ce:	47b8      	blx	r7
 800d8d0:	3001      	adds	r0, #1
 800d8d2:	f43f af28 	beq.w	800d726 <_printf_float+0xb6>
 800d8d6:	f109 0901 	add.w	r9, r9, #1
 800d8da:	e7e8      	b.n	800d8ae <_printf_float+0x23e>
 800d8dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	dc38      	bgt.n	800d954 <_printf_float+0x2e4>
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	4631      	mov	r1, r6
 800d8e6:	4628      	mov	r0, r5
 800d8e8:	4a19      	ldr	r2, [pc, #100]	@ (800d950 <_printf_float+0x2e0>)
 800d8ea:	47b8      	blx	r7
 800d8ec:	3001      	adds	r0, #1
 800d8ee:	f43f af1a 	beq.w	800d726 <_printf_float+0xb6>
 800d8f2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800d8f6:	ea59 0303 	orrs.w	r3, r9, r3
 800d8fa:	d102      	bne.n	800d902 <_printf_float+0x292>
 800d8fc:	6823      	ldr	r3, [r4, #0]
 800d8fe:	07d9      	lsls	r1, r3, #31
 800d900:	d5d7      	bpl.n	800d8b2 <_printf_float+0x242>
 800d902:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d906:	4631      	mov	r1, r6
 800d908:	4628      	mov	r0, r5
 800d90a:	47b8      	blx	r7
 800d90c:	3001      	adds	r0, #1
 800d90e:	f43f af0a 	beq.w	800d726 <_printf_float+0xb6>
 800d912:	f04f 0a00 	mov.w	sl, #0
 800d916:	f104 0b1a 	add.w	fp, r4, #26
 800d91a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d91c:	425b      	negs	r3, r3
 800d91e:	4553      	cmp	r3, sl
 800d920:	dc01      	bgt.n	800d926 <_printf_float+0x2b6>
 800d922:	464b      	mov	r3, r9
 800d924:	e793      	b.n	800d84e <_printf_float+0x1de>
 800d926:	2301      	movs	r3, #1
 800d928:	465a      	mov	r2, fp
 800d92a:	4631      	mov	r1, r6
 800d92c:	4628      	mov	r0, r5
 800d92e:	47b8      	blx	r7
 800d930:	3001      	adds	r0, #1
 800d932:	f43f aef8 	beq.w	800d726 <_printf_float+0xb6>
 800d936:	f10a 0a01 	add.w	sl, sl, #1
 800d93a:	e7ee      	b.n	800d91a <_printf_float+0x2aa>
 800d93c:	7fefffff 	.word	0x7fefffff
 800d940:	08011d7a 	.word	0x08011d7a
 800d944:	08011d7e 	.word	0x08011d7e
 800d948:	08011d82 	.word	0x08011d82
 800d94c:	08011d86 	.word	0x08011d86
 800d950:	08011d8a 	.word	0x08011d8a
 800d954:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d956:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800d95a:	4553      	cmp	r3, sl
 800d95c:	bfa8      	it	ge
 800d95e:	4653      	movge	r3, sl
 800d960:	2b00      	cmp	r3, #0
 800d962:	4699      	mov	r9, r3
 800d964:	dc36      	bgt.n	800d9d4 <_printf_float+0x364>
 800d966:	f04f 0b00 	mov.w	fp, #0
 800d96a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d96e:	f104 021a 	add.w	r2, r4, #26
 800d972:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d974:	930a      	str	r3, [sp, #40]	@ 0x28
 800d976:	eba3 0309 	sub.w	r3, r3, r9
 800d97a:	455b      	cmp	r3, fp
 800d97c:	dc31      	bgt.n	800d9e2 <_printf_float+0x372>
 800d97e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d980:	459a      	cmp	sl, r3
 800d982:	dc3a      	bgt.n	800d9fa <_printf_float+0x38a>
 800d984:	6823      	ldr	r3, [r4, #0]
 800d986:	07da      	lsls	r2, r3, #31
 800d988:	d437      	bmi.n	800d9fa <_printf_float+0x38a>
 800d98a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d98c:	ebaa 0903 	sub.w	r9, sl, r3
 800d990:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d992:	ebaa 0303 	sub.w	r3, sl, r3
 800d996:	4599      	cmp	r9, r3
 800d998:	bfa8      	it	ge
 800d99a:	4699      	movge	r9, r3
 800d99c:	f1b9 0f00 	cmp.w	r9, #0
 800d9a0:	dc33      	bgt.n	800da0a <_printf_float+0x39a>
 800d9a2:	f04f 0800 	mov.w	r8, #0
 800d9a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d9aa:	f104 0b1a 	add.w	fp, r4, #26
 800d9ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d9b0:	ebaa 0303 	sub.w	r3, sl, r3
 800d9b4:	eba3 0309 	sub.w	r3, r3, r9
 800d9b8:	4543      	cmp	r3, r8
 800d9ba:	f77f af7a 	ble.w	800d8b2 <_printf_float+0x242>
 800d9be:	2301      	movs	r3, #1
 800d9c0:	465a      	mov	r2, fp
 800d9c2:	4631      	mov	r1, r6
 800d9c4:	4628      	mov	r0, r5
 800d9c6:	47b8      	blx	r7
 800d9c8:	3001      	adds	r0, #1
 800d9ca:	f43f aeac 	beq.w	800d726 <_printf_float+0xb6>
 800d9ce:	f108 0801 	add.w	r8, r8, #1
 800d9d2:	e7ec      	b.n	800d9ae <_printf_float+0x33e>
 800d9d4:	4642      	mov	r2, r8
 800d9d6:	4631      	mov	r1, r6
 800d9d8:	4628      	mov	r0, r5
 800d9da:	47b8      	blx	r7
 800d9dc:	3001      	adds	r0, #1
 800d9de:	d1c2      	bne.n	800d966 <_printf_float+0x2f6>
 800d9e0:	e6a1      	b.n	800d726 <_printf_float+0xb6>
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	4631      	mov	r1, r6
 800d9e6:	4628      	mov	r0, r5
 800d9e8:	920a      	str	r2, [sp, #40]	@ 0x28
 800d9ea:	47b8      	blx	r7
 800d9ec:	3001      	adds	r0, #1
 800d9ee:	f43f ae9a 	beq.w	800d726 <_printf_float+0xb6>
 800d9f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d9f4:	f10b 0b01 	add.w	fp, fp, #1
 800d9f8:	e7bb      	b.n	800d972 <_printf_float+0x302>
 800d9fa:	4631      	mov	r1, r6
 800d9fc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800da00:	4628      	mov	r0, r5
 800da02:	47b8      	blx	r7
 800da04:	3001      	adds	r0, #1
 800da06:	d1c0      	bne.n	800d98a <_printf_float+0x31a>
 800da08:	e68d      	b.n	800d726 <_printf_float+0xb6>
 800da0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da0c:	464b      	mov	r3, r9
 800da0e:	4631      	mov	r1, r6
 800da10:	4628      	mov	r0, r5
 800da12:	4442      	add	r2, r8
 800da14:	47b8      	blx	r7
 800da16:	3001      	adds	r0, #1
 800da18:	d1c3      	bne.n	800d9a2 <_printf_float+0x332>
 800da1a:	e684      	b.n	800d726 <_printf_float+0xb6>
 800da1c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800da20:	f1ba 0f01 	cmp.w	sl, #1
 800da24:	dc01      	bgt.n	800da2a <_printf_float+0x3ba>
 800da26:	07db      	lsls	r3, r3, #31
 800da28:	d536      	bpl.n	800da98 <_printf_float+0x428>
 800da2a:	2301      	movs	r3, #1
 800da2c:	4642      	mov	r2, r8
 800da2e:	4631      	mov	r1, r6
 800da30:	4628      	mov	r0, r5
 800da32:	47b8      	blx	r7
 800da34:	3001      	adds	r0, #1
 800da36:	f43f ae76 	beq.w	800d726 <_printf_float+0xb6>
 800da3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800da3e:	4631      	mov	r1, r6
 800da40:	4628      	mov	r0, r5
 800da42:	47b8      	blx	r7
 800da44:	3001      	adds	r0, #1
 800da46:	f43f ae6e 	beq.w	800d726 <_printf_float+0xb6>
 800da4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800da4e:	2200      	movs	r2, #0
 800da50:	2300      	movs	r3, #0
 800da52:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da56:	f7f2 ffa7 	bl	80009a8 <__aeabi_dcmpeq>
 800da5a:	b9c0      	cbnz	r0, 800da8e <_printf_float+0x41e>
 800da5c:	4653      	mov	r3, sl
 800da5e:	f108 0201 	add.w	r2, r8, #1
 800da62:	4631      	mov	r1, r6
 800da64:	4628      	mov	r0, r5
 800da66:	47b8      	blx	r7
 800da68:	3001      	adds	r0, #1
 800da6a:	d10c      	bne.n	800da86 <_printf_float+0x416>
 800da6c:	e65b      	b.n	800d726 <_printf_float+0xb6>
 800da6e:	2301      	movs	r3, #1
 800da70:	465a      	mov	r2, fp
 800da72:	4631      	mov	r1, r6
 800da74:	4628      	mov	r0, r5
 800da76:	47b8      	blx	r7
 800da78:	3001      	adds	r0, #1
 800da7a:	f43f ae54 	beq.w	800d726 <_printf_float+0xb6>
 800da7e:	f108 0801 	add.w	r8, r8, #1
 800da82:	45d0      	cmp	r8, sl
 800da84:	dbf3      	blt.n	800da6e <_printf_float+0x3fe>
 800da86:	464b      	mov	r3, r9
 800da88:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800da8c:	e6e0      	b.n	800d850 <_printf_float+0x1e0>
 800da8e:	f04f 0800 	mov.w	r8, #0
 800da92:	f104 0b1a 	add.w	fp, r4, #26
 800da96:	e7f4      	b.n	800da82 <_printf_float+0x412>
 800da98:	2301      	movs	r3, #1
 800da9a:	4642      	mov	r2, r8
 800da9c:	e7e1      	b.n	800da62 <_printf_float+0x3f2>
 800da9e:	2301      	movs	r3, #1
 800daa0:	464a      	mov	r2, r9
 800daa2:	4631      	mov	r1, r6
 800daa4:	4628      	mov	r0, r5
 800daa6:	47b8      	blx	r7
 800daa8:	3001      	adds	r0, #1
 800daaa:	f43f ae3c 	beq.w	800d726 <_printf_float+0xb6>
 800daae:	f108 0801 	add.w	r8, r8, #1
 800dab2:	68e3      	ldr	r3, [r4, #12]
 800dab4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800dab6:	1a5b      	subs	r3, r3, r1
 800dab8:	4543      	cmp	r3, r8
 800daba:	dcf0      	bgt.n	800da9e <_printf_float+0x42e>
 800dabc:	e6fd      	b.n	800d8ba <_printf_float+0x24a>
 800dabe:	f04f 0800 	mov.w	r8, #0
 800dac2:	f104 0919 	add.w	r9, r4, #25
 800dac6:	e7f4      	b.n	800dab2 <_printf_float+0x442>

0800dac8 <_printf_common>:
 800dac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dacc:	4616      	mov	r6, r2
 800dace:	4698      	mov	r8, r3
 800dad0:	688a      	ldr	r2, [r1, #8]
 800dad2:	690b      	ldr	r3, [r1, #16]
 800dad4:	4607      	mov	r7, r0
 800dad6:	4293      	cmp	r3, r2
 800dad8:	bfb8      	it	lt
 800dada:	4613      	movlt	r3, r2
 800dadc:	6033      	str	r3, [r6, #0]
 800dade:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dae2:	460c      	mov	r4, r1
 800dae4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dae8:	b10a      	cbz	r2, 800daee <_printf_common+0x26>
 800daea:	3301      	adds	r3, #1
 800daec:	6033      	str	r3, [r6, #0]
 800daee:	6823      	ldr	r3, [r4, #0]
 800daf0:	0699      	lsls	r1, r3, #26
 800daf2:	bf42      	ittt	mi
 800daf4:	6833      	ldrmi	r3, [r6, #0]
 800daf6:	3302      	addmi	r3, #2
 800daf8:	6033      	strmi	r3, [r6, #0]
 800dafa:	6825      	ldr	r5, [r4, #0]
 800dafc:	f015 0506 	ands.w	r5, r5, #6
 800db00:	d106      	bne.n	800db10 <_printf_common+0x48>
 800db02:	f104 0a19 	add.w	sl, r4, #25
 800db06:	68e3      	ldr	r3, [r4, #12]
 800db08:	6832      	ldr	r2, [r6, #0]
 800db0a:	1a9b      	subs	r3, r3, r2
 800db0c:	42ab      	cmp	r3, r5
 800db0e:	dc2b      	bgt.n	800db68 <_printf_common+0xa0>
 800db10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800db14:	6822      	ldr	r2, [r4, #0]
 800db16:	3b00      	subs	r3, #0
 800db18:	bf18      	it	ne
 800db1a:	2301      	movne	r3, #1
 800db1c:	0692      	lsls	r2, r2, #26
 800db1e:	d430      	bmi.n	800db82 <_printf_common+0xba>
 800db20:	4641      	mov	r1, r8
 800db22:	4638      	mov	r0, r7
 800db24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800db28:	47c8      	blx	r9
 800db2a:	3001      	adds	r0, #1
 800db2c:	d023      	beq.n	800db76 <_printf_common+0xae>
 800db2e:	6823      	ldr	r3, [r4, #0]
 800db30:	6922      	ldr	r2, [r4, #16]
 800db32:	f003 0306 	and.w	r3, r3, #6
 800db36:	2b04      	cmp	r3, #4
 800db38:	bf14      	ite	ne
 800db3a:	2500      	movne	r5, #0
 800db3c:	6833      	ldreq	r3, [r6, #0]
 800db3e:	f04f 0600 	mov.w	r6, #0
 800db42:	bf08      	it	eq
 800db44:	68e5      	ldreq	r5, [r4, #12]
 800db46:	f104 041a 	add.w	r4, r4, #26
 800db4a:	bf08      	it	eq
 800db4c:	1aed      	subeq	r5, r5, r3
 800db4e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800db52:	bf08      	it	eq
 800db54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800db58:	4293      	cmp	r3, r2
 800db5a:	bfc4      	itt	gt
 800db5c:	1a9b      	subgt	r3, r3, r2
 800db5e:	18ed      	addgt	r5, r5, r3
 800db60:	42b5      	cmp	r5, r6
 800db62:	d11a      	bne.n	800db9a <_printf_common+0xd2>
 800db64:	2000      	movs	r0, #0
 800db66:	e008      	b.n	800db7a <_printf_common+0xb2>
 800db68:	2301      	movs	r3, #1
 800db6a:	4652      	mov	r2, sl
 800db6c:	4641      	mov	r1, r8
 800db6e:	4638      	mov	r0, r7
 800db70:	47c8      	blx	r9
 800db72:	3001      	adds	r0, #1
 800db74:	d103      	bne.n	800db7e <_printf_common+0xb6>
 800db76:	f04f 30ff 	mov.w	r0, #4294967295
 800db7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db7e:	3501      	adds	r5, #1
 800db80:	e7c1      	b.n	800db06 <_printf_common+0x3e>
 800db82:	2030      	movs	r0, #48	@ 0x30
 800db84:	18e1      	adds	r1, r4, r3
 800db86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800db8a:	1c5a      	adds	r2, r3, #1
 800db8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800db90:	4422      	add	r2, r4
 800db92:	3302      	adds	r3, #2
 800db94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800db98:	e7c2      	b.n	800db20 <_printf_common+0x58>
 800db9a:	2301      	movs	r3, #1
 800db9c:	4622      	mov	r2, r4
 800db9e:	4641      	mov	r1, r8
 800dba0:	4638      	mov	r0, r7
 800dba2:	47c8      	blx	r9
 800dba4:	3001      	adds	r0, #1
 800dba6:	d0e6      	beq.n	800db76 <_printf_common+0xae>
 800dba8:	3601      	adds	r6, #1
 800dbaa:	e7d9      	b.n	800db60 <_printf_common+0x98>

0800dbac <_printf_i>:
 800dbac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dbb0:	7e0f      	ldrb	r7, [r1, #24]
 800dbb2:	4691      	mov	r9, r2
 800dbb4:	2f78      	cmp	r7, #120	@ 0x78
 800dbb6:	4680      	mov	r8, r0
 800dbb8:	460c      	mov	r4, r1
 800dbba:	469a      	mov	sl, r3
 800dbbc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dbbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dbc2:	d807      	bhi.n	800dbd4 <_printf_i+0x28>
 800dbc4:	2f62      	cmp	r7, #98	@ 0x62
 800dbc6:	d80a      	bhi.n	800dbde <_printf_i+0x32>
 800dbc8:	2f00      	cmp	r7, #0
 800dbca:	f000 80d3 	beq.w	800dd74 <_printf_i+0x1c8>
 800dbce:	2f58      	cmp	r7, #88	@ 0x58
 800dbd0:	f000 80ba 	beq.w	800dd48 <_printf_i+0x19c>
 800dbd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dbd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dbdc:	e03a      	b.n	800dc54 <_printf_i+0xa8>
 800dbde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dbe2:	2b15      	cmp	r3, #21
 800dbe4:	d8f6      	bhi.n	800dbd4 <_printf_i+0x28>
 800dbe6:	a101      	add	r1, pc, #4	@ (adr r1, 800dbec <_printf_i+0x40>)
 800dbe8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dbec:	0800dc45 	.word	0x0800dc45
 800dbf0:	0800dc59 	.word	0x0800dc59
 800dbf4:	0800dbd5 	.word	0x0800dbd5
 800dbf8:	0800dbd5 	.word	0x0800dbd5
 800dbfc:	0800dbd5 	.word	0x0800dbd5
 800dc00:	0800dbd5 	.word	0x0800dbd5
 800dc04:	0800dc59 	.word	0x0800dc59
 800dc08:	0800dbd5 	.word	0x0800dbd5
 800dc0c:	0800dbd5 	.word	0x0800dbd5
 800dc10:	0800dbd5 	.word	0x0800dbd5
 800dc14:	0800dbd5 	.word	0x0800dbd5
 800dc18:	0800dd5b 	.word	0x0800dd5b
 800dc1c:	0800dc83 	.word	0x0800dc83
 800dc20:	0800dd15 	.word	0x0800dd15
 800dc24:	0800dbd5 	.word	0x0800dbd5
 800dc28:	0800dbd5 	.word	0x0800dbd5
 800dc2c:	0800dd7d 	.word	0x0800dd7d
 800dc30:	0800dbd5 	.word	0x0800dbd5
 800dc34:	0800dc83 	.word	0x0800dc83
 800dc38:	0800dbd5 	.word	0x0800dbd5
 800dc3c:	0800dbd5 	.word	0x0800dbd5
 800dc40:	0800dd1d 	.word	0x0800dd1d
 800dc44:	6833      	ldr	r3, [r6, #0]
 800dc46:	1d1a      	adds	r2, r3, #4
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	6032      	str	r2, [r6, #0]
 800dc4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dc50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dc54:	2301      	movs	r3, #1
 800dc56:	e09e      	b.n	800dd96 <_printf_i+0x1ea>
 800dc58:	6833      	ldr	r3, [r6, #0]
 800dc5a:	6820      	ldr	r0, [r4, #0]
 800dc5c:	1d19      	adds	r1, r3, #4
 800dc5e:	6031      	str	r1, [r6, #0]
 800dc60:	0606      	lsls	r6, r0, #24
 800dc62:	d501      	bpl.n	800dc68 <_printf_i+0xbc>
 800dc64:	681d      	ldr	r5, [r3, #0]
 800dc66:	e003      	b.n	800dc70 <_printf_i+0xc4>
 800dc68:	0645      	lsls	r5, r0, #25
 800dc6a:	d5fb      	bpl.n	800dc64 <_printf_i+0xb8>
 800dc6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dc70:	2d00      	cmp	r5, #0
 800dc72:	da03      	bge.n	800dc7c <_printf_i+0xd0>
 800dc74:	232d      	movs	r3, #45	@ 0x2d
 800dc76:	426d      	negs	r5, r5
 800dc78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc7c:	230a      	movs	r3, #10
 800dc7e:	4859      	ldr	r0, [pc, #356]	@ (800dde4 <_printf_i+0x238>)
 800dc80:	e011      	b.n	800dca6 <_printf_i+0xfa>
 800dc82:	6821      	ldr	r1, [r4, #0]
 800dc84:	6833      	ldr	r3, [r6, #0]
 800dc86:	0608      	lsls	r0, r1, #24
 800dc88:	f853 5b04 	ldr.w	r5, [r3], #4
 800dc8c:	d402      	bmi.n	800dc94 <_printf_i+0xe8>
 800dc8e:	0649      	lsls	r1, r1, #25
 800dc90:	bf48      	it	mi
 800dc92:	b2ad      	uxthmi	r5, r5
 800dc94:	2f6f      	cmp	r7, #111	@ 0x6f
 800dc96:	6033      	str	r3, [r6, #0]
 800dc98:	bf14      	ite	ne
 800dc9a:	230a      	movne	r3, #10
 800dc9c:	2308      	moveq	r3, #8
 800dc9e:	4851      	ldr	r0, [pc, #324]	@ (800dde4 <_printf_i+0x238>)
 800dca0:	2100      	movs	r1, #0
 800dca2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dca6:	6866      	ldr	r6, [r4, #4]
 800dca8:	2e00      	cmp	r6, #0
 800dcaa:	bfa8      	it	ge
 800dcac:	6821      	ldrge	r1, [r4, #0]
 800dcae:	60a6      	str	r6, [r4, #8]
 800dcb0:	bfa4      	itt	ge
 800dcb2:	f021 0104 	bicge.w	r1, r1, #4
 800dcb6:	6021      	strge	r1, [r4, #0]
 800dcb8:	b90d      	cbnz	r5, 800dcbe <_printf_i+0x112>
 800dcba:	2e00      	cmp	r6, #0
 800dcbc:	d04b      	beq.n	800dd56 <_printf_i+0x1aa>
 800dcbe:	4616      	mov	r6, r2
 800dcc0:	fbb5 f1f3 	udiv	r1, r5, r3
 800dcc4:	fb03 5711 	mls	r7, r3, r1, r5
 800dcc8:	5dc7      	ldrb	r7, [r0, r7]
 800dcca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dcce:	462f      	mov	r7, r5
 800dcd0:	42bb      	cmp	r3, r7
 800dcd2:	460d      	mov	r5, r1
 800dcd4:	d9f4      	bls.n	800dcc0 <_printf_i+0x114>
 800dcd6:	2b08      	cmp	r3, #8
 800dcd8:	d10b      	bne.n	800dcf2 <_printf_i+0x146>
 800dcda:	6823      	ldr	r3, [r4, #0]
 800dcdc:	07df      	lsls	r7, r3, #31
 800dcde:	d508      	bpl.n	800dcf2 <_printf_i+0x146>
 800dce0:	6923      	ldr	r3, [r4, #16]
 800dce2:	6861      	ldr	r1, [r4, #4]
 800dce4:	4299      	cmp	r1, r3
 800dce6:	bfde      	ittt	le
 800dce8:	2330      	movle	r3, #48	@ 0x30
 800dcea:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dcee:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dcf2:	1b92      	subs	r2, r2, r6
 800dcf4:	6122      	str	r2, [r4, #16]
 800dcf6:	464b      	mov	r3, r9
 800dcf8:	4621      	mov	r1, r4
 800dcfa:	4640      	mov	r0, r8
 800dcfc:	f8cd a000 	str.w	sl, [sp]
 800dd00:	aa03      	add	r2, sp, #12
 800dd02:	f7ff fee1 	bl	800dac8 <_printf_common>
 800dd06:	3001      	adds	r0, #1
 800dd08:	d14a      	bne.n	800dda0 <_printf_i+0x1f4>
 800dd0a:	f04f 30ff 	mov.w	r0, #4294967295
 800dd0e:	b004      	add	sp, #16
 800dd10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd14:	6823      	ldr	r3, [r4, #0]
 800dd16:	f043 0320 	orr.w	r3, r3, #32
 800dd1a:	6023      	str	r3, [r4, #0]
 800dd1c:	2778      	movs	r7, #120	@ 0x78
 800dd1e:	4832      	ldr	r0, [pc, #200]	@ (800dde8 <_printf_i+0x23c>)
 800dd20:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dd24:	6823      	ldr	r3, [r4, #0]
 800dd26:	6831      	ldr	r1, [r6, #0]
 800dd28:	061f      	lsls	r7, r3, #24
 800dd2a:	f851 5b04 	ldr.w	r5, [r1], #4
 800dd2e:	d402      	bmi.n	800dd36 <_printf_i+0x18a>
 800dd30:	065f      	lsls	r7, r3, #25
 800dd32:	bf48      	it	mi
 800dd34:	b2ad      	uxthmi	r5, r5
 800dd36:	6031      	str	r1, [r6, #0]
 800dd38:	07d9      	lsls	r1, r3, #31
 800dd3a:	bf44      	itt	mi
 800dd3c:	f043 0320 	orrmi.w	r3, r3, #32
 800dd40:	6023      	strmi	r3, [r4, #0]
 800dd42:	b11d      	cbz	r5, 800dd4c <_printf_i+0x1a0>
 800dd44:	2310      	movs	r3, #16
 800dd46:	e7ab      	b.n	800dca0 <_printf_i+0xf4>
 800dd48:	4826      	ldr	r0, [pc, #152]	@ (800dde4 <_printf_i+0x238>)
 800dd4a:	e7e9      	b.n	800dd20 <_printf_i+0x174>
 800dd4c:	6823      	ldr	r3, [r4, #0]
 800dd4e:	f023 0320 	bic.w	r3, r3, #32
 800dd52:	6023      	str	r3, [r4, #0]
 800dd54:	e7f6      	b.n	800dd44 <_printf_i+0x198>
 800dd56:	4616      	mov	r6, r2
 800dd58:	e7bd      	b.n	800dcd6 <_printf_i+0x12a>
 800dd5a:	6833      	ldr	r3, [r6, #0]
 800dd5c:	6825      	ldr	r5, [r4, #0]
 800dd5e:	1d18      	adds	r0, r3, #4
 800dd60:	6961      	ldr	r1, [r4, #20]
 800dd62:	6030      	str	r0, [r6, #0]
 800dd64:	062e      	lsls	r6, r5, #24
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	d501      	bpl.n	800dd6e <_printf_i+0x1c2>
 800dd6a:	6019      	str	r1, [r3, #0]
 800dd6c:	e002      	b.n	800dd74 <_printf_i+0x1c8>
 800dd6e:	0668      	lsls	r0, r5, #25
 800dd70:	d5fb      	bpl.n	800dd6a <_printf_i+0x1be>
 800dd72:	8019      	strh	r1, [r3, #0]
 800dd74:	2300      	movs	r3, #0
 800dd76:	4616      	mov	r6, r2
 800dd78:	6123      	str	r3, [r4, #16]
 800dd7a:	e7bc      	b.n	800dcf6 <_printf_i+0x14a>
 800dd7c:	6833      	ldr	r3, [r6, #0]
 800dd7e:	2100      	movs	r1, #0
 800dd80:	1d1a      	adds	r2, r3, #4
 800dd82:	6032      	str	r2, [r6, #0]
 800dd84:	681e      	ldr	r6, [r3, #0]
 800dd86:	6862      	ldr	r2, [r4, #4]
 800dd88:	4630      	mov	r0, r6
 800dd8a:	f000 fbe4 	bl	800e556 <memchr>
 800dd8e:	b108      	cbz	r0, 800dd94 <_printf_i+0x1e8>
 800dd90:	1b80      	subs	r0, r0, r6
 800dd92:	6060      	str	r0, [r4, #4]
 800dd94:	6863      	ldr	r3, [r4, #4]
 800dd96:	6123      	str	r3, [r4, #16]
 800dd98:	2300      	movs	r3, #0
 800dd9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd9e:	e7aa      	b.n	800dcf6 <_printf_i+0x14a>
 800dda0:	4632      	mov	r2, r6
 800dda2:	4649      	mov	r1, r9
 800dda4:	4640      	mov	r0, r8
 800dda6:	6923      	ldr	r3, [r4, #16]
 800dda8:	47d0      	blx	sl
 800ddaa:	3001      	adds	r0, #1
 800ddac:	d0ad      	beq.n	800dd0a <_printf_i+0x15e>
 800ddae:	6823      	ldr	r3, [r4, #0]
 800ddb0:	079b      	lsls	r3, r3, #30
 800ddb2:	d413      	bmi.n	800dddc <_printf_i+0x230>
 800ddb4:	68e0      	ldr	r0, [r4, #12]
 800ddb6:	9b03      	ldr	r3, [sp, #12]
 800ddb8:	4298      	cmp	r0, r3
 800ddba:	bfb8      	it	lt
 800ddbc:	4618      	movlt	r0, r3
 800ddbe:	e7a6      	b.n	800dd0e <_printf_i+0x162>
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	4632      	mov	r2, r6
 800ddc4:	4649      	mov	r1, r9
 800ddc6:	4640      	mov	r0, r8
 800ddc8:	47d0      	blx	sl
 800ddca:	3001      	adds	r0, #1
 800ddcc:	d09d      	beq.n	800dd0a <_printf_i+0x15e>
 800ddce:	3501      	adds	r5, #1
 800ddd0:	68e3      	ldr	r3, [r4, #12]
 800ddd2:	9903      	ldr	r1, [sp, #12]
 800ddd4:	1a5b      	subs	r3, r3, r1
 800ddd6:	42ab      	cmp	r3, r5
 800ddd8:	dcf2      	bgt.n	800ddc0 <_printf_i+0x214>
 800ddda:	e7eb      	b.n	800ddb4 <_printf_i+0x208>
 800dddc:	2500      	movs	r5, #0
 800ddde:	f104 0619 	add.w	r6, r4, #25
 800dde2:	e7f5      	b.n	800ddd0 <_printf_i+0x224>
 800dde4:	08011d8c 	.word	0x08011d8c
 800dde8:	08011d9d 	.word	0x08011d9d

0800ddec <_scanf_float>:
 800ddec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddf0:	b087      	sub	sp, #28
 800ddf2:	9303      	str	r3, [sp, #12]
 800ddf4:	688b      	ldr	r3, [r1, #8]
 800ddf6:	4617      	mov	r7, r2
 800ddf8:	1e5a      	subs	r2, r3, #1
 800ddfa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ddfe:	bf82      	ittt	hi
 800de00:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800de04:	eb03 0b05 	addhi.w	fp, r3, r5
 800de08:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800de0c:	460a      	mov	r2, r1
 800de0e:	f04f 0500 	mov.w	r5, #0
 800de12:	bf88      	it	hi
 800de14:	608b      	strhi	r3, [r1, #8]
 800de16:	680b      	ldr	r3, [r1, #0]
 800de18:	4680      	mov	r8, r0
 800de1a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800de1e:	f842 3b1c 	str.w	r3, [r2], #28
 800de22:	460c      	mov	r4, r1
 800de24:	bf98      	it	ls
 800de26:	f04f 0b00 	movls.w	fp, #0
 800de2a:	4616      	mov	r6, r2
 800de2c:	46aa      	mov	sl, r5
 800de2e:	46a9      	mov	r9, r5
 800de30:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800de34:	9201      	str	r2, [sp, #4]
 800de36:	9502      	str	r5, [sp, #8]
 800de38:	68a2      	ldr	r2, [r4, #8]
 800de3a:	b152      	cbz	r2, 800de52 <_scanf_float+0x66>
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	781b      	ldrb	r3, [r3, #0]
 800de40:	2b4e      	cmp	r3, #78	@ 0x4e
 800de42:	d865      	bhi.n	800df10 <_scanf_float+0x124>
 800de44:	2b40      	cmp	r3, #64	@ 0x40
 800de46:	d83d      	bhi.n	800dec4 <_scanf_float+0xd8>
 800de48:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800de4c:	b2c8      	uxtb	r0, r1
 800de4e:	280e      	cmp	r0, #14
 800de50:	d93b      	bls.n	800deca <_scanf_float+0xde>
 800de52:	f1b9 0f00 	cmp.w	r9, #0
 800de56:	d003      	beq.n	800de60 <_scanf_float+0x74>
 800de58:	6823      	ldr	r3, [r4, #0]
 800de5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800de5e:	6023      	str	r3, [r4, #0]
 800de60:	f10a 3aff 	add.w	sl, sl, #4294967295
 800de64:	f1ba 0f01 	cmp.w	sl, #1
 800de68:	f200 8118 	bhi.w	800e09c <_scanf_float+0x2b0>
 800de6c:	9b01      	ldr	r3, [sp, #4]
 800de6e:	429e      	cmp	r6, r3
 800de70:	f200 8109 	bhi.w	800e086 <_scanf_float+0x29a>
 800de74:	2001      	movs	r0, #1
 800de76:	b007      	add	sp, #28
 800de78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de7c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800de80:	2a0d      	cmp	r2, #13
 800de82:	d8e6      	bhi.n	800de52 <_scanf_float+0x66>
 800de84:	a101      	add	r1, pc, #4	@ (adr r1, 800de8c <_scanf_float+0xa0>)
 800de86:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800de8a:	bf00      	nop
 800de8c:	0800dfd3 	.word	0x0800dfd3
 800de90:	0800de53 	.word	0x0800de53
 800de94:	0800de53 	.word	0x0800de53
 800de98:	0800de53 	.word	0x0800de53
 800de9c:	0800e033 	.word	0x0800e033
 800dea0:	0800e00b 	.word	0x0800e00b
 800dea4:	0800de53 	.word	0x0800de53
 800dea8:	0800de53 	.word	0x0800de53
 800deac:	0800dfe1 	.word	0x0800dfe1
 800deb0:	0800de53 	.word	0x0800de53
 800deb4:	0800de53 	.word	0x0800de53
 800deb8:	0800de53 	.word	0x0800de53
 800debc:	0800de53 	.word	0x0800de53
 800dec0:	0800df99 	.word	0x0800df99
 800dec4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800dec8:	e7da      	b.n	800de80 <_scanf_float+0x94>
 800deca:	290e      	cmp	r1, #14
 800decc:	d8c1      	bhi.n	800de52 <_scanf_float+0x66>
 800dece:	a001      	add	r0, pc, #4	@ (adr r0, 800ded4 <_scanf_float+0xe8>)
 800ded0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ded4:	0800df89 	.word	0x0800df89
 800ded8:	0800de53 	.word	0x0800de53
 800dedc:	0800df89 	.word	0x0800df89
 800dee0:	0800e01f 	.word	0x0800e01f
 800dee4:	0800de53 	.word	0x0800de53
 800dee8:	0800df31 	.word	0x0800df31
 800deec:	0800df6f 	.word	0x0800df6f
 800def0:	0800df6f 	.word	0x0800df6f
 800def4:	0800df6f 	.word	0x0800df6f
 800def8:	0800df6f 	.word	0x0800df6f
 800defc:	0800df6f 	.word	0x0800df6f
 800df00:	0800df6f 	.word	0x0800df6f
 800df04:	0800df6f 	.word	0x0800df6f
 800df08:	0800df6f 	.word	0x0800df6f
 800df0c:	0800df6f 	.word	0x0800df6f
 800df10:	2b6e      	cmp	r3, #110	@ 0x6e
 800df12:	d809      	bhi.n	800df28 <_scanf_float+0x13c>
 800df14:	2b60      	cmp	r3, #96	@ 0x60
 800df16:	d8b1      	bhi.n	800de7c <_scanf_float+0x90>
 800df18:	2b54      	cmp	r3, #84	@ 0x54
 800df1a:	d07b      	beq.n	800e014 <_scanf_float+0x228>
 800df1c:	2b59      	cmp	r3, #89	@ 0x59
 800df1e:	d198      	bne.n	800de52 <_scanf_float+0x66>
 800df20:	2d07      	cmp	r5, #7
 800df22:	d196      	bne.n	800de52 <_scanf_float+0x66>
 800df24:	2508      	movs	r5, #8
 800df26:	e02c      	b.n	800df82 <_scanf_float+0x196>
 800df28:	2b74      	cmp	r3, #116	@ 0x74
 800df2a:	d073      	beq.n	800e014 <_scanf_float+0x228>
 800df2c:	2b79      	cmp	r3, #121	@ 0x79
 800df2e:	e7f6      	b.n	800df1e <_scanf_float+0x132>
 800df30:	6821      	ldr	r1, [r4, #0]
 800df32:	05c8      	lsls	r0, r1, #23
 800df34:	d51b      	bpl.n	800df6e <_scanf_float+0x182>
 800df36:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800df3a:	6021      	str	r1, [r4, #0]
 800df3c:	f109 0901 	add.w	r9, r9, #1
 800df40:	f1bb 0f00 	cmp.w	fp, #0
 800df44:	d003      	beq.n	800df4e <_scanf_float+0x162>
 800df46:	3201      	adds	r2, #1
 800df48:	f10b 3bff 	add.w	fp, fp, #4294967295
 800df4c:	60a2      	str	r2, [r4, #8]
 800df4e:	68a3      	ldr	r3, [r4, #8]
 800df50:	3b01      	subs	r3, #1
 800df52:	60a3      	str	r3, [r4, #8]
 800df54:	6923      	ldr	r3, [r4, #16]
 800df56:	3301      	adds	r3, #1
 800df58:	6123      	str	r3, [r4, #16]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	3b01      	subs	r3, #1
 800df5e:	2b00      	cmp	r3, #0
 800df60:	607b      	str	r3, [r7, #4]
 800df62:	f340 8087 	ble.w	800e074 <_scanf_float+0x288>
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	3301      	adds	r3, #1
 800df6a:	603b      	str	r3, [r7, #0]
 800df6c:	e764      	b.n	800de38 <_scanf_float+0x4c>
 800df6e:	eb1a 0105 	adds.w	r1, sl, r5
 800df72:	f47f af6e 	bne.w	800de52 <_scanf_float+0x66>
 800df76:	460d      	mov	r5, r1
 800df78:	468a      	mov	sl, r1
 800df7a:	6822      	ldr	r2, [r4, #0]
 800df7c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800df80:	6022      	str	r2, [r4, #0]
 800df82:	f806 3b01 	strb.w	r3, [r6], #1
 800df86:	e7e2      	b.n	800df4e <_scanf_float+0x162>
 800df88:	6822      	ldr	r2, [r4, #0]
 800df8a:	0610      	lsls	r0, r2, #24
 800df8c:	f57f af61 	bpl.w	800de52 <_scanf_float+0x66>
 800df90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800df94:	6022      	str	r2, [r4, #0]
 800df96:	e7f4      	b.n	800df82 <_scanf_float+0x196>
 800df98:	f1ba 0f00 	cmp.w	sl, #0
 800df9c:	d10e      	bne.n	800dfbc <_scanf_float+0x1d0>
 800df9e:	f1b9 0f00 	cmp.w	r9, #0
 800dfa2:	d10e      	bne.n	800dfc2 <_scanf_float+0x1d6>
 800dfa4:	6822      	ldr	r2, [r4, #0]
 800dfa6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800dfaa:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800dfae:	d108      	bne.n	800dfc2 <_scanf_float+0x1d6>
 800dfb0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800dfb4:	f04f 0a01 	mov.w	sl, #1
 800dfb8:	6022      	str	r2, [r4, #0]
 800dfba:	e7e2      	b.n	800df82 <_scanf_float+0x196>
 800dfbc:	f1ba 0f02 	cmp.w	sl, #2
 800dfc0:	d055      	beq.n	800e06e <_scanf_float+0x282>
 800dfc2:	2d01      	cmp	r5, #1
 800dfc4:	d002      	beq.n	800dfcc <_scanf_float+0x1e0>
 800dfc6:	2d04      	cmp	r5, #4
 800dfc8:	f47f af43 	bne.w	800de52 <_scanf_float+0x66>
 800dfcc:	3501      	adds	r5, #1
 800dfce:	b2ed      	uxtb	r5, r5
 800dfd0:	e7d7      	b.n	800df82 <_scanf_float+0x196>
 800dfd2:	f1ba 0f01 	cmp.w	sl, #1
 800dfd6:	f47f af3c 	bne.w	800de52 <_scanf_float+0x66>
 800dfda:	f04f 0a02 	mov.w	sl, #2
 800dfde:	e7d0      	b.n	800df82 <_scanf_float+0x196>
 800dfe0:	b97d      	cbnz	r5, 800e002 <_scanf_float+0x216>
 800dfe2:	f1b9 0f00 	cmp.w	r9, #0
 800dfe6:	f47f af37 	bne.w	800de58 <_scanf_float+0x6c>
 800dfea:	6822      	ldr	r2, [r4, #0]
 800dfec:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800dff0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800dff4:	f040 8103 	bne.w	800e1fe <_scanf_float+0x412>
 800dff8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800dffc:	2501      	movs	r5, #1
 800dffe:	6022      	str	r2, [r4, #0]
 800e000:	e7bf      	b.n	800df82 <_scanf_float+0x196>
 800e002:	2d03      	cmp	r5, #3
 800e004:	d0e2      	beq.n	800dfcc <_scanf_float+0x1e0>
 800e006:	2d05      	cmp	r5, #5
 800e008:	e7de      	b.n	800dfc8 <_scanf_float+0x1dc>
 800e00a:	2d02      	cmp	r5, #2
 800e00c:	f47f af21 	bne.w	800de52 <_scanf_float+0x66>
 800e010:	2503      	movs	r5, #3
 800e012:	e7b6      	b.n	800df82 <_scanf_float+0x196>
 800e014:	2d06      	cmp	r5, #6
 800e016:	f47f af1c 	bne.w	800de52 <_scanf_float+0x66>
 800e01a:	2507      	movs	r5, #7
 800e01c:	e7b1      	b.n	800df82 <_scanf_float+0x196>
 800e01e:	6822      	ldr	r2, [r4, #0]
 800e020:	0591      	lsls	r1, r2, #22
 800e022:	f57f af16 	bpl.w	800de52 <_scanf_float+0x66>
 800e026:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e02a:	6022      	str	r2, [r4, #0]
 800e02c:	f8cd 9008 	str.w	r9, [sp, #8]
 800e030:	e7a7      	b.n	800df82 <_scanf_float+0x196>
 800e032:	6822      	ldr	r2, [r4, #0]
 800e034:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e038:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e03c:	d006      	beq.n	800e04c <_scanf_float+0x260>
 800e03e:	0550      	lsls	r0, r2, #21
 800e040:	f57f af07 	bpl.w	800de52 <_scanf_float+0x66>
 800e044:	f1b9 0f00 	cmp.w	r9, #0
 800e048:	f000 80d9 	beq.w	800e1fe <_scanf_float+0x412>
 800e04c:	0591      	lsls	r1, r2, #22
 800e04e:	bf58      	it	pl
 800e050:	9902      	ldrpl	r1, [sp, #8]
 800e052:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e056:	bf58      	it	pl
 800e058:	eba9 0101 	subpl.w	r1, r9, r1
 800e05c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e060:	f04f 0900 	mov.w	r9, #0
 800e064:	bf58      	it	pl
 800e066:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e06a:	6022      	str	r2, [r4, #0]
 800e06c:	e789      	b.n	800df82 <_scanf_float+0x196>
 800e06e:	f04f 0a03 	mov.w	sl, #3
 800e072:	e786      	b.n	800df82 <_scanf_float+0x196>
 800e074:	4639      	mov	r1, r7
 800e076:	4640      	mov	r0, r8
 800e078:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e07c:	4798      	blx	r3
 800e07e:	2800      	cmp	r0, #0
 800e080:	f43f aeda 	beq.w	800de38 <_scanf_float+0x4c>
 800e084:	e6e5      	b.n	800de52 <_scanf_float+0x66>
 800e086:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e08a:	463a      	mov	r2, r7
 800e08c:	4640      	mov	r0, r8
 800e08e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e092:	4798      	blx	r3
 800e094:	6923      	ldr	r3, [r4, #16]
 800e096:	3b01      	subs	r3, #1
 800e098:	6123      	str	r3, [r4, #16]
 800e09a:	e6e7      	b.n	800de6c <_scanf_float+0x80>
 800e09c:	1e6b      	subs	r3, r5, #1
 800e09e:	2b06      	cmp	r3, #6
 800e0a0:	d824      	bhi.n	800e0ec <_scanf_float+0x300>
 800e0a2:	2d02      	cmp	r5, #2
 800e0a4:	d836      	bhi.n	800e114 <_scanf_float+0x328>
 800e0a6:	9b01      	ldr	r3, [sp, #4]
 800e0a8:	429e      	cmp	r6, r3
 800e0aa:	f67f aee3 	bls.w	800de74 <_scanf_float+0x88>
 800e0ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e0b2:	463a      	mov	r2, r7
 800e0b4:	4640      	mov	r0, r8
 800e0b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e0ba:	4798      	blx	r3
 800e0bc:	6923      	ldr	r3, [r4, #16]
 800e0be:	3b01      	subs	r3, #1
 800e0c0:	6123      	str	r3, [r4, #16]
 800e0c2:	e7f0      	b.n	800e0a6 <_scanf_float+0x2ba>
 800e0c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e0c8:	463a      	mov	r2, r7
 800e0ca:	4640      	mov	r0, r8
 800e0cc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e0d0:	4798      	blx	r3
 800e0d2:	6923      	ldr	r3, [r4, #16]
 800e0d4:	3b01      	subs	r3, #1
 800e0d6:	6123      	str	r3, [r4, #16]
 800e0d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e0dc:	fa5f fa8a 	uxtb.w	sl, sl
 800e0e0:	f1ba 0f02 	cmp.w	sl, #2
 800e0e4:	d1ee      	bne.n	800e0c4 <_scanf_float+0x2d8>
 800e0e6:	3d03      	subs	r5, #3
 800e0e8:	b2ed      	uxtb	r5, r5
 800e0ea:	1b76      	subs	r6, r6, r5
 800e0ec:	6823      	ldr	r3, [r4, #0]
 800e0ee:	05da      	lsls	r2, r3, #23
 800e0f0:	d530      	bpl.n	800e154 <_scanf_float+0x368>
 800e0f2:	055b      	lsls	r3, r3, #21
 800e0f4:	d511      	bpl.n	800e11a <_scanf_float+0x32e>
 800e0f6:	9b01      	ldr	r3, [sp, #4]
 800e0f8:	429e      	cmp	r6, r3
 800e0fa:	f67f aebb 	bls.w	800de74 <_scanf_float+0x88>
 800e0fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e102:	463a      	mov	r2, r7
 800e104:	4640      	mov	r0, r8
 800e106:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e10a:	4798      	blx	r3
 800e10c:	6923      	ldr	r3, [r4, #16]
 800e10e:	3b01      	subs	r3, #1
 800e110:	6123      	str	r3, [r4, #16]
 800e112:	e7f0      	b.n	800e0f6 <_scanf_float+0x30a>
 800e114:	46aa      	mov	sl, r5
 800e116:	46b3      	mov	fp, r6
 800e118:	e7de      	b.n	800e0d8 <_scanf_float+0x2ec>
 800e11a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e11e:	6923      	ldr	r3, [r4, #16]
 800e120:	2965      	cmp	r1, #101	@ 0x65
 800e122:	f103 33ff 	add.w	r3, r3, #4294967295
 800e126:	f106 35ff 	add.w	r5, r6, #4294967295
 800e12a:	6123      	str	r3, [r4, #16]
 800e12c:	d00c      	beq.n	800e148 <_scanf_float+0x35c>
 800e12e:	2945      	cmp	r1, #69	@ 0x45
 800e130:	d00a      	beq.n	800e148 <_scanf_float+0x35c>
 800e132:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e136:	463a      	mov	r2, r7
 800e138:	4640      	mov	r0, r8
 800e13a:	4798      	blx	r3
 800e13c:	6923      	ldr	r3, [r4, #16]
 800e13e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e142:	3b01      	subs	r3, #1
 800e144:	1eb5      	subs	r5, r6, #2
 800e146:	6123      	str	r3, [r4, #16]
 800e148:	463a      	mov	r2, r7
 800e14a:	4640      	mov	r0, r8
 800e14c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e150:	4798      	blx	r3
 800e152:	462e      	mov	r6, r5
 800e154:	6822      	ldr	r2, [r4, #0]
 800e156:	f012 0210 	ands.w	r2, r2, #16
 800e15a:	d001      	beq.n	800e160 <_scanf_float+0x374>
 800e15c:	2000      	movs	r0, #0
 800e15e:	e68a      	b.n	800de76 <_scanf_float+0x8a>
 800e160:	7032      	strb	r2, [r6, #0]
 800e162:	6823      	ldr	r3, [r4, #0]
 800e164:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e168:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e16c:	d11c      	bne.n	800e1a8 <_scanf_float+0x3bc>
 800e16e:	9b02      	ldr	r3, [sp, #8]
 800e170:	454b      	cmp	r3, r9
 800e172:	eba3 0209 	sub.w	r2, r3, r9
 800e176:	d123      	bne.n	800e1c0 <_scanf_float+0x3d4>
 800e178:	2200      	movs	r2, #0
 800e17a:	4640      	mov	r0, r8
 800e17c:	9901      	ldr	r1, [sp, #4]
 800e17e:	f002 fbef 	bl	8010960 <_strtod_r>
 800e182:	9b03      	ldr	r3, [sp, #12]
 800e184:	6825      	ldr	r5, [r4, #0]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	f015 0f02 	tst.w	r5, #2
 800e18c:	4606      	mov	r6, r0
 800e18e:	460f      	mov	r7, r1
 800e190:	f103 0204 	add.w	r2, r3, #4
 800e194:	d01f      	beq.n	800e1d6 <_scanf_float+0x3ea>
 800e196:	9903      	ldr	r1, [sp, #12]
 800e198:	600a      	str	r2, [r1, #0]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	e9c3 6700 	strd	r6, r7, [r3]
 800e1a0:	68e3      	ldr	r3, [r4, #12]
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	60e3      	str	r3, [r4, #12]
 800e1a6:	e7d9      	b.n	800e15c <_scanf_float+0x370>
 800e1a8:	9b04      	ldr	r3, [sp, #16]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d0e4      	beq.n	800e178 <_scanf_float+0x38c>
 800e1ae:	9905      	ldr	r1, [sp, #20]
 800e1b0:	230a      	movs	r3, #10
 800e1b2:	4640      	mov	r0, r8
 800e1b4:	3101      	adds	r1, #1
 800e1b6:	f002 fc53 	bl	8010a60 <_strtol_r>
 800e1ba:	9b04      	ldr	r3, [sp, #16]
 800e1bc:	9e05      	ldr	r6, [sp, #20]
 800e1be:	1ac2      	subs	r2, r0, r3
 800e1c0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e1c4:	429e      	cmp	r6, r3
 800e1c6:	bf28      	it	cs
 800e1c8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e1cc:	4630      	mov	r0, r6
 800e1ce:	490d      	ldr	r1, [pc, #52]	@ (800e204 <_scanf_float+0x418>)
 800e1d0:	f000 f8de 	bl	800e390 <siprintf>
 800e1d4:	e7d0      	b.n	800e178 <_scanf_float+0x38c>
 800e1d6:	076d      	lsls	r5, r5, #29
 800e1d8:	d4dd      	bmi.n	800e196 <_scanf_float+0x3aa>
 800e1da:	9d03      	ldr	r5, [sp, #12]
 800e1dc:	602a      	str	r2, [r5, #0]
 800e1de:	681d      	ldr	r5, [r3, #0]
 800e1e0:	4602      	mov	r2, r0
 800e1e2:	460b      	mov	r3, r1
 800e1e4:	f7f2 fc12 	bl	8000a0c <__aeabi_dcmpun>
 800e1e8:	b120      	cbz	r0, 800e1f4 <_scanf_float+0x408>
 800e1ea:	4807      	ldr	r0, [pc, #28]	@ (800e208 <_scanf_float+0x41c>)
 800e1ec:	f000 f9c2 	bl	800e574 <nanf>
 800e1f0:	6028      	str	r0, [r5, #0]
 800e1f2:	e7d5      	b.n	800e1a0 <_scanf_float+0x3b4>
 800e1f4:	4630      	mov	r0, r6
 800e1f6:	4639      	mov	r1, r7
 800e1f8:	f7f2 fc66 	bl	8000ac8 <__aeabi_d2f>
 800e1fc:	e7f8      	b.n	800e1f0 <_scanf_float+0x404>
 800e1fe:	f04f 0900 	mov.w	r9, #0
 800e202:	e62d      	b.n	800de60 <_scanf_float+0x74>
 800e204:	08011dae 	.word	0x08011dae
 800e208:	08012145 	.word	0x08012145

0800e20c <std>:
 800e20c:	2300      	movs	r3, #0
 800e20e:	b510      	push	{r4, lr}
 800e210:	4604      	mov	r4, r0
 800e212:	e9c0 3300 	strd	r3, r3, [r0]
 800e216:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e21a:	6083      	str	r3, [r0, #8]
 800e21c:	8181      	strh	r1, [r0, #12]
 800e21e:	6643      	str	r3, [r0, #100]	@ 0x64
 800e220:	81c2      	strh	r2, [r0, #14]
 800e222:	6183      	str	r3, [r0, #24]
 800e224:	4619      	mov	r1, r3
 800e226:	2208      	movs	r2, #8
 800e228:	305c      	adds	r0, #92	@ 0x5c
 800e22a:	f000 f914 	bl	800e456 <memset>
 800e22e:	4b0d      	ldr	r3, [pc, #52]	@ (800e264 <std+0x58>)
 800e230:	6224      	str	r4, [r4, #32]
 800e232:	6263      	str	r3, [r4, #36]	@ 0x24
 800e234:	4b0c      	ldr	r3, [pc, #48]	@ (800e268 <std+0x5c>)
 800e236:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e238:	4b0c      	ldr	r3, [pc, #48]	@ (800e26c <std+0x60>)
 800e23a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e23c:	4b0c      	ldr	r3, [pc, #48]	@ (800e270 <std+0x64>)
 800e23e:	6323      	str	r3, [r4, #48]	@ 0x30
 800e240:	4b0c      	ldr	r3, [pc, #48]	@ (800e274 <std+0x68>)
 800e242:	429c      	cmp	r4, r3
 800e244:	d006      	beq.n	800e254 <std+0x48>
 800e246:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e24a:	4294      	cmp	r4, r2
 800e24c:	d002      	beq.n	800e254 <std+0x48>
 800e24e:	33d0      	adds	r3, #208	@ 0xd0
 800e250:	429c      	cmp	r4, r3
 800e252:	d105      	bne.n	800e260 <std+0x54>
 800e254:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e25c:	f000 b978 	b.w	800e550 <__retarget_lock_init_recursive>
 800e260:	bd10      	pop	{r4, pc}
 800e262:	bf00      	nop
 800e264:	0800e3d1 	.word	0x0800e3d1
 800e268:	0800e3f3 	.word	0x0800e3f3
 800e26c:	0800e42b 	.word	0x0800e42b
 800e270:	0800e44f 	.word	0x0800e44f
 800e274:	20001880 	.word	0x20001880

0800e278 <stdio_exit_handler>:
 800e278:	4a02      	ldr	r2, [pc, #8]	@ (800e284 <stdio_exit_handler+0xc>)
 800e27a:	4903      	ldr	r1, [pc, #12]	@ (800e288 <stdio_exit_handler+0x10>)
 800e27c:	4803      	ldr	r0, [pc, #12]	@ (800e28c <stdio_exit_handler+0x14>)
 800e27e:	f000 b869 	b.w	800e354 <_fwalk_sglue>
 800e282:	bf00      	nop
 800e284:	2000019c 	.word	0x2000019c
 800e288:	08010e15 	.word	0x08010e15
 800e28c:	200001ac 	.word	0x200001ac

0800e290 <cleanup_stdio>:
 800e290:	6841      	ldr	r1, [r0, #4]
 800e292:	4b0c      	ldr	r3, [pc, #48]	@ (800e2c4 <cleanup_stdio+0x34>)
 800e294:	b510      	push	{r4, lr}
 800e296:	4299      	cmp	r1, r3
 800e298:	4604      	mov	r4, r0
 800e29a:	d001      	beq.n	800e2a0 <cleanup_stdio+0x10>
 800e29c:	f002 fdba 	bl	8010e14 <_fflush_r>
 800e2a0:	68a1      	ldr	r1, [r4, #8]
 800e2a2:	4b09      	ldr	r3, [pc, #36]	@ (800e2c8 <cleanup_stdio+0x38>)
 800e2a4:	4299      	cmp	r1, r3
 800e2a6:	d002      	beq.n	800e2ae <cleanup_stdio+0x1e>
 800e2a8:	4620      	mov	r0, r4
 800e2aa:	f002 fdb3 	bl	8010e14 <_fflush_r>
 800e2ae:	68e1      	ldr	r1, [r4, #12]
 800e2b0:	4b06      	ldr	r3, [pc, #24]	@ (800e2cc <cleanup_stdio+0x3c>)
 800e2b2:	4299      	cmp	r1, r3
 800e2b4:	d004      	beq.n	800e2c0 <cleanup_stdio+0x30>
 800e2b6:	4620      	mov	r0, r4
 800e2b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2bc:	f002 bdaa 	b.w	8010e14 <_fflush_r>
 800e2c0:	bd10      	pop	{r4, pc}
 800e2c2:	bf00      	nop
 800e2c4:	20001880 	.word	0x20001880
 800e2c8:	200018e8 	.word	0x200018e8
 800e2cc:	20001950 	.word	0x20001950

0800e2d0 <global_stdio_init.part.0>:
 800e2d0:	b510      	push	{r4, lr}
 800e2d2:	4b0b      	ldr	r3, [pc, #44]	@ (800e300 <global_stdio_init.part.0+0x30>)
 800e2d4:	4c0b      	ldr	r4, [pc, #44]	@ (800e304 <global_stdio_init.part.0+0x34>)
 800e2d6:	4a0c      	ldr	r2, [pc, #48]	@ (800e308 <global_stdio_init.part.0+0x38>)
 800e2d8:	4620      	mov	r0, r4
 800e2da:	601a      	str	r2, [r3, #0]
 800e2dc:	2104      	movs	r1, #4
 800e2de:	2200      	movs	r2, #0
 800e2e0:	f7ff ff94 	bl	800e20c <std>
 800e2e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e2e8:	2201      	movs	r2, #1
 800e2ea:	2109      	movs	r1, #9
 800e2ec:	f7ff ff8e 	bl	800e20c <std>
 800e2f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e2f4:	2202      	movs	r2, #2
 800e2f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2fa:	2112      	movs	r1, #18
 800e2fc:	f7ff bf86 	b.w	800e20c <std>
 800e300:	200019b8 	.word	0x200019b8
 800e304:	20001880 	.word	0x20001880
 800e308:	0800e279 	.word	0x0800e279

0800e30c <__sfp_lock_acquire>:
 800e30c:	4801      	ldr	r0, [pc, #4]	@ (800e314 <__sfp_lock_acquire+0x8>)
 800e30e:	f000 b920 	b.w	800e552 <__retarget_lock_acquire_recursive>
 800e312:	bf00      	nop
 800e314:	200019c1 	.word	0x200019c1

0800e318 <__sfp_lock_release>:
 800e318:	4801      	ldr	r0, [pc, #4]	@ (800e320 <__sfp_lock_release+0x8>)
 800e31a:	f000 b91b 	b.w	800e554 <__retarget_lock_release_recursive>
 800e31e:	bf00      	nop
 800e320:	200019c1 	.word	0x200019c1

0800e324 <__sinit>:
 800e324:	b510      	push	{r4, lr}
 800e326:	4604      	mov	r4, r0
 800e328:	f7ff fff0 	bl	800e30c <__sfp_lock_acquire>
 800e32c:	6a23      	ldr	r3, [r4, #32]
 800e32e:	b11b      	cbz	r3, 800e338 <__sinit+0x14>
 800e330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e334:	f7ff bff0 	b.w	800e318 <__sfp_lock_release>
 800e338:	4b04      	ldr	r3, [pc, #16]	@ (800e34c <__sinit+0x28>)
 800e33a:	6223      	str	r3, [r4, #32]
 800e33c:	4b04      	ldr	r3, [pc, #16]	@ (800e350 <__sinit+0x2c>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d1f5      	bne.n	800e330 <__sinit+0xc>
 800e344:	f7ff ffc4 	bl	800e2d0 <global_stdio_init.part.0>
 800e348:	e7f2      	b.n	800e330 <__sinit+0xc>
 800e34a:	bf00      	nop
 800e34c:	0800e291 	.word	0x0800e291
 800e350:	200019b8 	.word	0x200019b8

0800e354 <_fwalk_sglue>:
 800e354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e358:	4607      	mov	r7, r0
 800e35a:	4688      	mov	r8, r1
 800e35c:	4614      	mov	r4, r2
 800e35e:	2600      	movs	r6, #0
 800e360:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e364:	f1b9 0901 	subs.w	r9, r9, #1
 800e368:	d505      	bpl.n	800e376 <_fwalk_sglue+0x22>
 800e36a:	6824      	ldr	r4, [r4, #0]
 800e36c:	2c00      	cmp	r4, #0
 800e36e:	d1f7      	bne.n	800e360 <_fwalk_sglue+0xc>
 800e370:	4630      	mov	r0, r6
 800e372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e376:	89ab      	ldrh	r3, [r5, #12]
 800e378:	2b01      	cmp	r3, #1
 800e37a:	d907      	bls.n	800e38c <_fwalk_sglue+0x38>
 800e37c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e380:	3301      	adds	r3, #1
 800e382:	d003      	beq.n	800e38c <_fwalk_sglue+0x38>
 800e384:	4629      	mov	r1, r5
 800e386:	4638      	mov	r0, r7
 800e388:	47c0      	blx	r8
 800e38a:	4306      	orrs	r6, r0
 800e38c:	3568      	adds	r5, #104	@ 0x68
 800e38e:	e7e9      	b.n	800e364 <_fwalk_sglue+0x10>

0800e390 <siprintf>:
 800e390:	b40e      	push	{r1, r2, r3}
 800e392:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e396:	b500      	push	{lr}
 800e398:	b09c      	sub	sp, #112	@ 0x70
 800e39a:	ab1d      	add	r3, sp, #116	@ 0x74
 800e39c:	9002      	str	r0, [sp, #8]
 800e39e:	9006      	str	r0, [sp, #24]
 800e3a0:	9107      	str	r1, [sp, #28]
 800e3a2:	9104      	str	r1, [sp, #16]
 800e3a4:	4808      	ldr	r0, [pc, #32]	@ (800e3c8 <siprintf+0x38>)
 800e3a6:	4909      	ldr	r1, [pc, #36]	@ (800e3cc <siprintf+0x3c>)
 800e3a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3ac:	9105      	str	r1, [sp, #20]
 800e3ae:	6800      	ldr	r0, [r0, #0]
 800e3b0:	a902      	add	r1, sp, #8
 800e3b2:	9301      	str	r3, [sp, #4]
 800e3b4:	f002 fbb2 	bl	8010b1c <_svfiprintf_r>
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	9b02      	ldr	r3, [sp, #8]
 800e3bc:	701a      	strb	r2, [r3, #0]
 800e3be:	b01c      	add	sp, #112	@ 0x70
 800e3c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e3c4:	b003      	add	sp, #12
 800e3c6:	4770      	bx	lr
 800e3c8:	200001a8 	.word	0x200001a8
 800e3cc:	ffff0208 	.word	0xffff0208

0800e3d0 <__sread>:
 800e3d0:	b510      	push	{r4, lr}
 800e3d2:	460c      	mov	r4, r1
 800e3d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3d8:	f000 f86c 	bl	800e4b4 <_read_r>
 800e3dc:	2800      	cmp	r0, #0
 800e3de:	bfab      	itete	ge
 800e3e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e3e2:	89a3      	ldrhlt	r3, [r4, #12]
 800e3e4:	181b      	addge	r3, r3, r0
 800e3e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e3ea:	bfac      	ite	ge
 800e3ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e3ee:	81a3      	strhlt	r3, [r4, #12]
 800e3f0:	bd10      	pop	{r4, pc}

0800e3f2 <__swrite>:
 800e3f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3f6:	461f      	mov	r7, r3
 800e3f8:	898b      	ldrh	r3, [r1, #12]
 800e3fa:	4605      	mov	r5, r0
 800e3fc:	05db      	lsls	r3, r3, #23
 800e3fe:	460c      	mov	r4, r1
 800e400:	4616      	mov	r6, r2
 800e402:	d505      	bpl.n	800e410 <__swrite+0x1e>
 800e404:	2302      	movs	r3, #2
 800e406:	2200      	movs	r2, #0
 800e408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e40c:	f000 f840 	bl	800e490 <_lseek_r>
 800e410:	89a3      	ldrh	r3, [r4, #12]
 800e412:	4632      	mov	r2, r6
 800e414:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e418:	81a3      	strh	r3, [r4, #12]
 800e41a:	4628      	mov	r0, r5
 800e41c:	463b      	mov	r3, r7
 800e41e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e426:	f000 b857 	b.w	800e4d8 <_write_r>

0800e42a <__sseek>:
 800e42a:	b510      	push	{r4, lr}
 800e42c:	460c      	mov	r4, r1
 800e42e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e432:	f000 f82d 	bl	800e490 <_lseek_r>
 800e436:	1c43      	adds	r3, r0, #1
 800e438:	89a3      	ldrh	r3, [r4, #12]
 800e43a:	bf15      	itete	ne
 800e43c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e43e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e442:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e446:	81a3      	strheq	r3, [r4, #12]
 800e448:	bf18      	it	ne
 800e44a:	81a3      	strhne	r3, [r4, #12]
 800e44c:	bd10      	pop	{r4, pc}

0800e44e <__sclose>:
 800e44e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e452:	f000 b80d 	b.w	800e470 <_close_r>

0800e456 <memset>:
 800e456:	4603      	mov	r3, r0
 800e458:	4402      	add	r2, r0
 800e45a:	4293      	cmp	r3, r2
 800e45c:	d100      	bne.n	800e460 <memset+0xa>
 800e45e:	4770      	bx	lr
 800e460:	f803 1b01 	strb.w	r1, [r3], #1
 800e464:	e7f9      	b.n	800e45a <memset+0x4>
	...

0800e468 <_localeconv_r>:
 800e468:	4800      	ldr	r0, [pc, #0]	@ (800e46c <_localeconv_r+0x4>)
 800e46a:	4770      	bx	lr
 800e46c:	200002e8 	.word	0x200002e8

0800e470 <_close_r>:
 800e470:	b538      	push	{r3, r4, r5, lr}
 800e472:	2300      	movs	r3, #0
 800e474:	4d05      	ldr	r5, [pc, #20]	@ (800e48c <_close_r+0x1c>)
 800e476:	4604      	mov	r4, r0
 800e478:	4608      	mov	r0, r1
 800e47a:	602b      	str	r3, [r5, #0]
 800e47c:	f7f4 f847 	bl	800250e <_close>
 800e480:	1c43      	adds	r3, r0, #1
 800e482:	d102      	bne.n	800e48a <_close_r+0x1a>
 800e484:	682b      	ldr	r3, [r5, #0]
 800e486:	b103      	cbz	r3, 800e48a <_close_r+0x1a>
 800e488:	6023      	str	r3, [r4, #0]
 800e48a:	bd38      	pop	{r3, r4, r5, pc}
 800e48c:	200019bc 	.word	0x200019bc

0800e490 <_lseek_r>:
 800e490:	b538      	push	{r3, r4, r5, lr}
 800e492:	4604      	mov	r4, r0
 800e494:	4608      	mov	r0, r1
 800e496:	4611      	mov	r1, r2
 800e498:	2200      	movs	r2, #0
 800e49a:	4d05      	ldr	r5, [pc, #20]	@ (800e4b0 <_lseek_r+0x20>)
 800e49c:	602a      	str	r2, [r5, #0]
 800e49e:	461a      	mov	r2, r3
 800e4a0:	f7f4 f859 	bl	8002556 <_lseek>
 800e4a4:	1c43      	adds	r3, r0, #1
 800e4a6:	d102      	bne.n	800e4ae <_lseek_r+0x1e>
 800e4a8:	682b      	ldr	r3, [r5, #0]
 800e4aa:	b103      	cbz	r3, 800e4ae <_lseek_r+0x1e>
 800e4ac:	6023      	str	r3, [r4, #0]
 800e4ae:	bd38      	pop	{r3, r4, r5, pc}
 800e4b0:	200019bc 	.word	0x200019bc

0800e4b4 <_read_r>:
 800e4b4:	b538      	push	{r3, r4, r5, lr}
 800e4b6:	4604      	mov	r4, r0
 800e4b8:	4608      	mov	r0, r1
 800e4ba:	4611      	mov	r1, r2
 800e4bc:	2200      	movs	r2, #0
 800e4be:	4d05      	ldr	r5, [pc, #20]	@ (800e4d4 <_read_r+0x20>)
 800e4c0:	602a      	str	r2, [r5, #0]
 800e4c2:	461a      	mov	r2, r3
 800e4c4:	f7f4 f806 	bl	80024d4 <_read>
 800e4c8:	1c43      	adds	r3, r0, #1
 800e4ca:	d102      	bne.n	800e4d2 <_read_r+0x1e>
 800e4cc:	682b      	ldr	r3, [r5, #0]
 800e4ce:	b103      	cbz	r3, 800e4d2 <_read_r+0x1e>
 800e4d0:	6023      	str	r3, [r4, #0]
 800e4d2:	bd38      	pop	{r3, r4, r5, pc}
 800e4d4:	200019bc 	.word	0x200019bc

0800e4d8 <_write_r>:
 800e4d8:	b538      	push	{r3, r4, r5, lr}
 800e4da:	4604      	mov	r4, r0
 800e4dc:	4608      	mov	r0, r1
 800e4de:	4611      	mov	r1, r2
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	4d05      	ldr	r5, [pc, #20]	@ (800e4f8 <_write_r+0x20>)
 800e4e4:	602a      	str	r2, [r5, #0]
 800e4e6:	461a      	mov	r2, r3
 800e4e8:	f7f3 fd1e 	bl	8001f28 <_write>
 800e4ec:	1c43      	adds	r3, r0, #1
 800e4ee:	d102      	bne.n	800e4f6 <_write_r+0x1e>
 800e4f0:	682b      	ldr	r3, [r5, #0]
 800e4f2:	b103      	cbz	r3, 800e4f6 <_write_r+0x1e>
 800e4f4:	6023      	str	r3, [r4, #0]
 800e4f6:	bd38      	pop	{r3, r4, r5, pc}
 800e4f8:	200019bc 	.word	0x200019bc

0800e4fc <__errno>:
 800e4fc:	4b01      	ldr	r3, [pc, #4]	@ (800e504 <__errno+0x8>)
 800e4fe:	6818      	ldr	r0, [r3, #0]
 800e500:	4770      	bx	lr
 800e502:	bf00      	nop
 800e504:	200001a8 	.word	0x200001a8

0800e508 <__libc_init_array>:
 800e508:	b570      	push	{r4, r5, r6, lr}
 800e50a:	2600      	movs	r6, #0
 800e50c:	4d0c      	ldr	r5, [pc, #48]	@ (800e540 <__libc_init_array+0x38>)
 800e50e:	4c0d      	ldr	r4, [pc, #52]	@ (800e544 <__libc_init_array+0x3c>)
 800e510:	1b64      	subs	r4, r4, r5
 800e512:	10a4      	asrs	r4, r4, #2
 800e514:	42a6      	cmp	r6, r4
 800e516:	d109      	bne.n	800e52c <__libc_init_array+0x24>
 800e518:	f003 fb68 	bl	8011bec <_init>
 800e51c:	2600      	movs	r6, #0
 800e51e:	4d0a      	ldr	r5, [pc, #40]	@ (800e548 <__libc_init_array+0x40>)
 800e520:	4c0a      	ldr	r4, [pc, #40]	@ (800e54c <__libc_init_array+0x44>)
 800e522:	1b64      	subs	r4, r4, r5
 800e524:	10a4      	asrs	r4, r4, #2
 800e526:	42a6      	cmp	r6, r4
 800e528:	d105      	bne.n	800e536 <__libc_init_array+0x2e>
 800e52a:	bd70      	pop	{r4, r5, r6, pc}
 800e52c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e530:	4798      	blx	r3
 800e532:	3601      	adds	r6, #1
 800e534:	e7ee      	b.n	800e514 <__libc_init_array+0xc>
 800e536:	f855 3b04 	ldr.w	r3, [r5], #4
 800e53a:	4798      	blx	r3
 800e53c:	3601      	adds	r6, #1
 800e53e:	e7f2      	b.n	800e526 <__libc_init_array+0x1e>
 800e540:	080121b0 	.word	0x080121b0
 800e544:	080121b0 	.word	0x080121b0
 800e548:	080121b0 	.word	0x080121b0
 800e54c:	080121b4 	.word	0x080121b4

0800e550 <__retarget_lock_init_recursive>:
 800e550:	4770      	bx	lr

0800e552 <__retarget_lock_acquire_recursive>:
 800e552:	4770      	bx	lr

0800e554 <__retarget_lock_release_recursive>:
 800e554:	4770      	bx	lr

0800e556 <memchr>:
 800e556:	4603      	mov	r3, r0
 800e558:	b510      	push	{r4, lr}
 800e55a:	b2c9      	uxtb	r1, r1
 800e55c:	4402      	add	r2, r0
 800e55e:	4293      	cmp	r3, r2
 800e560:	4618      	mov	r0, r3
 800e562:	d101      	bne.n	800e568 <memchr+0x12>
 800e564:	2000      	movs	r0, #0
 800e566:	e003      	b.n	800e570 <memchr+0x1a>
 800e568:	7804      	ldrb	r4, [r0, #0]
 800e56a:	3301      	adds	r3, #1
 800e56c:	428c      	cmp	r4, r1
 800e56e:	d1f6      	bne.n	800e55e <memchr+0x8>
 800e570:	bd10      	pop	{r4, pc}
	...

0800e574 <nanf>:
 800e574:	4800      	ldr	r0, [pc, #0]	@ (800e578 <nanf+0x4>)
 800e576:	4770      	bx	lr
 800e578:	7fc00000 	.word	0x7fc00000

0800e57c <quorem>:
 800e57c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e580:	6903      	ldr	r3, [r0, #16]
 800e582:	690c      	ldr	r4, [r1, #16]
 800e584:	4607      	mov	r7, r0
 800e586:	42a3      	cmp	r3, r4
 800e588:	db7e      	blt.n	800e688 <quorem+0x10c>
 800e58a:	3c01      	subs	r4, #1
 800e58c:	00a3      	lsls	r3, r4, #2
 800e58e:	f100 0514 	add.w	r5, r0, #20
 800e592:	f101 0814 	add.w	r8, r1, #20
 800e596:	9300      	str	r3, [sp, #0]
 800e598:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e59c:	9301      	str	r3, [sp, #4]
 800e59e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e5a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e5a6:	3301      	adds	r3, #1
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	fbb2 f6f3 	udiv	r6, r2, r3
 800e5ae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e5b2:	d32e      	bcc.n	800e612 <quorem+0x96>
 800e5b4:	f04f 0a00 	mov.w	sl, #0
 800e5b8:	46c4      	mov	ip, r8
 800e5ba:	46ae      	mov	lr, r5
 800e5bc:	46d3      	mov	fp, sl
 800e5be:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e5c2:	b298      	uxth	r0, r3
 800e5c4:	fb06 a000 	mla	r0, r6, r0, sl
 800e5c8:	0c1b      	lsrs	r3, r3, #16
 800e5ca:	0c02      	lsrs	r2, r0, #16
 800e5cc:	fb06 2303 	mla	r3, r6, r3, r2
 800e5d0:	f8de 2000 	ldr.w	r2, [lr]
 800e5d4:	b280      	uxth	r0, r0
 800e5d6:	b292      	uxth	r2, r2
 800e5d8:	1a12      	subs	r2, r2, r0
 800e5da:	445a      	add	r2, fp
 800e5dc:	f8de 0000 	ldr.w	r0, [lr]
 800e5e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e5e4:	b29b      	uxth	r3, r3
 800e5e6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e5ea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e5ee:	b292      	uxth	r2, r2
 800e5f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e5f4:	45e1      	cmp	r9, ip
 800e5f6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e5fa:	f84e 2b04 	str.w	r2, [lr], #4
 800e5fe:	d2de      	bcs.n	800e5be <quorem+0x42>
 800e600:	9b00      	ldr	r3, [sp, #0]
 800e602:	58eb      	ldr	r3, [r5, r3]
 800e604:	b92b      	cbnz	r3, 800e612 <quorem+0x96>
 800e606:	9b01      	ldr	r3, [sp, #4]
 800e608:	3b04      	subs	r3, #4
 800e60a:	429d      	cmp	r5, r3
 800e60c:	461a      	mov	r2, r3
 800e60e:	d32f      	bcc.n	800e670 <quorem+0xf4>
 800e610:	613c      	str	r4, [r7, #16]
 800e612:	4638      	mov	r0, r7
 800e614:	f001 f9c4 	bl	800f9a0 <__mcmp>
 800e618:	2800      	cmp	r0, #0
 800e61a:	db25      	blt.n	800e668 <quorem+0xec>
 800e61c:	4629      	mov	r1, r5
 800e61e:	2000      	movs	r0, #0
 800e620:	f858 2b04 	ldr.w	r2, [r8], #4
 800e624:	f8d1 c000 	ldr.w	ip, [r1]
 800e628:	fa1f fe82 	uxth.w	lr, r2
 800e62c:	fa1f f38c 	uxth.w	r3, ip
 800e630:	eba3 030e 	sub.w	r3, r3, lr
 800e634:	4403      	add	r3, r0
 800e636:	0c12      	lsrs	r2, r2, #16
 800e638:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e63c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e640:	b29b      	uxth	r3, r3
 800e642:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e646:	45c1      	cmp	r9, r8
 800e648:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e64c:	f841 3b04 	str.w	r3, [r1], #4
 800e650:	d2e6      	bcs.n	800e620 <quorem+0xa4>
 800e652:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e656:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e65a:	b922      	cbnz	r2, 800e666 <quorem+0xea>
 800e65c:	3b04      	subs	r3, #4
 800e65e:	429d      	cmp	r5, r3
 800e660:	461a      	mov	r2, r3
 800e662:	d30b      	bcc.n	800e67c <quorem+0x100>
 800e664:	613c      	str	r4, [r7, #16]
 800e666:	3601      	adds	r6, #1
 800e668:	4630      	mov	r0, r6
 800e66a:	b003      	add	sp, #12
 800e66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e670:	6812      	ldr	r2, [r2, #0]
 800e672:	3b04      	subs	r3, #4
 800e674:	2a00      	cmp	r2, #0
 800e676:	d1cb      	bne.n	800e610 <quorem+0x94>
 800e678:	3c01      	subs	r4, #1
 800e67a:	e7c6      	b.n	800e60a <quorem+0x8e>
 800e67c:	6812      	ldr	r2, [r2, #0]
 800e67e:	3b04      	subs	r3, #4
 800e680:	2a00      	cmp	r2, #0
 800e682:	d1ef      	bne.n	800e664 <quorem+0xe8>
 800e684:	3c01      	subs	r4, #1
 800e686:	e7ea      	b.n	800e65e <quorem+0xe2>
 800e688:	2000      	movs	r0, #0
 800e68a:	e7ee      	b.n	800e66a <quorem+0xee>
 800e68c:	0000      	movs	r0, r0
	...

0800e690 <_dtoa_r>:
 800e690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e694:	4614      	mov	r4, r2
 800e696:	461d      	mov	r5, r3
 800e698:	69c7      	ldr	r7, [r0, #28]
 800e69a:	b097      	sub	sp, #92	@ 0x5c
 800e69c:	4683      	mov	fp, r0
 800e69e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800e6a2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800e6a4:	b97f      	cbnz	r7, 800e6c6 <_dtoa_r+0x36>
 800e6a6:	2010      	movs	r0, #16
 800e6a8:	f000 fe02 	bl	800f2b0 <malloc>
 800e6ac:	4602      	mov	r2, r0
 800e6ae:	f8cb 001c 	str.w	r0, [fp, #28]
 800e6b2:	b920      	cbnz	r0, 800e6be <_dtoa_r+0x2e>
 800e6b4:	21ef      	movs	r1, #239	@ 0xef
 800e6b6:	4ba8      	ldr	r3, [pc, #672]	@ (800e958 <_dtoa_r+0x2c8>)
 800e6b8:	48a8      	ldr	r0, [pc, #672]	@ (800e95c <_dtoa_r+0x2cc>)
 800e6ba:	f002 fc23 	bl	8010f04 <__assert_func>
 800e6be:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e6c2:	6007      	str	r7, [r0, #0]
 800e6c4:	60c7      	str	r7, [r0, #12]
 800e6c6:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e6ca:	6819      	ldr	r1, [r3, #0]
 800e6cc:	b159      	cbz	r1, 800e6e6 <_dtoa_r+0x56>
 800e6ce:	685a      	ldr	r2, [r3, #4]
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	4093      	lsls	r3, r2
 800e6d4:	604a      	str	r2, [r1, #4]
 800e6d6:	608b      	str	r3, [r1, #8]
 800e6d8:	4658      	mov	r0, fp
 800e6da:	f000 fedf 	bl	800f49c <_Bfree>
 800e6de:	2200      	movs	r2, #0
 800e6e0:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e6e4:	601a      	str	r2, [r3, #0]
 800e6e6:	1e2b      	subs	r3, r5, #0
 800e6e8:	bfaf      	iteee	ge
 800e6ea:	2300      	movge	r3, #0
 800e6ec:	2201      	movlt	r2, #1
 800e6ee:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e6f2:	9303      	strlt	r3, [sp, #12]
 800e6f4:	bfa8      	it	ge
 800e6f6:	6033      	strge	r3, [r6, #0]
 800e6f8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e6fc:	4b98      	ldr	r3, [pc, #608]	@ (800e960 <_dtoa_r+0x2d0>)
 800e6fe:	bfb8      	it	lt
 800e700:	6032      	strlt	r2, [r6, #0]
 800e702:	ea33 0308 	bics.w	r3, r3, r8
 800e706:	d112      	bne.n	800e72e <_dtoa_r+0x9e>
 800e708:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e70c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e70e:	6013      	str	r3, [r2, #0]
 800e710:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e714:	4323      	orrs	r3, r4
 800e716:	f000 8550 	beq.w	800f1ba <_dtoa_r+0xb2a>
 800e71a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e71c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800e964 <_dtoa_r+0x2d4>
 800e720:	2b00      	cmp	r3, #0
 800e722:	f000 8552 	beq.w	800f1ca <_dtoa_r+0xb3a>
 800e726:	f10a 0303 	add.w	r3, sl, #3
 800e72a:	f000 bd4c 	b.w	800f1c6 <_dtoa_r+0xb36>
 800e72e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e732:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e736:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e73a:	2200      	movs	r2, #0
 800e73c:	2300      	movs	r3, #0
 800e73e:	f7f2 f933 	bl	80009a8 <__aeabi_dcmpeq>
 800e742:	4607      	mov	r7, r0
 800e744:	b158      	cbz	r0, 800e75e <_dtoa_r+0xce>
 800e746:	2301      	movs	r3, #1
 800e748:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e74a:	6013      	str	r3, [r2, #0]
 800e74c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e74e:	b113      	cbz	r3, 800e756 <_dtoa_r+0xc6>
 800e750:	4b85      	ldr	r3, [pc, #532]	@ (800e968 <_dtoa_r+0x2d8>)
 800e752:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e754:	6013      	str	r3, [r2, #0]
 800e756:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800e96c <_dtoa_r+0x2dc>
 800e75a:	f000 bd36 	b.w	800f1ca <_dtoa_r+0xb3a>
 800e75e:	ab14      	add	r3, sp, #80	@ 0x50
 800e760:	9301      	str	r3, [sp, #4]
 800e762:	ab15      	add	r3, sp, #84	@ 0x54
 800e764:	9300      	str	r3, [sp, #0]
 800e766:	4658      	mov	r0, fp
 800e768:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e76c:	f001 fa30 	bl	800fbd0 <__d2b>
 800e770:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800e774:	4681      	mov	r9, r0
 800e776:	2e00      	cmp	r6, #0
 800e778:	d077      	beq.n	800e86a <_dtoa_r+0x1da>
 800e77a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e77e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e780:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e788:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e78c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e790:	9712      	str	r7, [sp, #72]	@ 0x48
 800e792:	4619      	mov	r1, r3
 800e794:	2200      	movs	r2, #0
 800e796:	4b76      	ldr	r3, [pc, #472]	@ (800e970 <_dtoa_r+0x2e0>)
 800e798:	f7f1 fce6 	bl	8000168 <__aeabi_dsub>
 800e79c:	a368      	add	r3, pc, #416	@ (adr r3, 800e940 <_dtoa_r+0x2b0>)
 800e79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7a2:	f7f1 fe99 	bl	80004d8 <__aeabi_dmul>
 800e7a6:	a368      	add	r3, pc, #416	@ (adr r3, 800e948 <_dtoa_r+0x2b8>)
 800e7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ac:	f7f1 fcde 	bl	800016c <__adddf3>
 800e7b0:	4604      	mov	r4, r0
 800e7b2:	4630      	mov	r0, r6
 800e7b4:	460d      	mov	r5, r1
 800e7b6:	f7f1 fe25 	bl	8000404 <__aeabi_i2d>
 800e7ba:	a365      	add	r3, pc, #404	@ (adr r3, 800e950 <_dtoa_r+0x2c0>)
 800e7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7c0:	f7f1 fe8a 	bl	80004d8 <__aeabi_dmul>
 800e7c4:	4602      	mov	r2, r0
 800e7c6:	460b      	mov	r3, r1
 800e7c8:	4620      	mov	r0, r4
 800e7ca:	4629      	mov	r1, r5
 800e7cc:	f7f1 fcce 	bl	800016c <__adddf3>
 800e7d0:	4604      	mov	r4, r0
 800e7d2:	460d      	mov	r5, r1
 800e7d4:	f7f2 f930 	bl	8000a38 <__aeabi_d2iz>
 800e7d8:	2200      	movs	r2, #0
 800e7da:	4607      	mov	r7, r0
 800e7dc:	2300      	movs	r3, #0
 800e7de:	4620      	mov	r0, r4
 800e7e0:	4629      	mov	r1, r5
 800e7e2:	f7f2 f8eb 	bl	80009bc <__aeabi_dcmplt>
 800e7e6:	b140      	cbz	r0, 800e7fa <_dtoa_r+0x16a>
 800e7e8:	4638      	mov	r0, r7
 800e7ea:	f7f1 fe0b 	bl	8000404 <__aeabi_i2d>
 800e7ee:	4622      	mov	r2, r4
 800e7f0:	462b      	mov	r3, r5
 800e7f2:	f7f2 f8d9 	bl	80009a8 <__aeabi_dcmpeq>
 800e7f6:	b900      	cbnz	r0, 800e7fa <_dtoa_r+0x16a>
 800e7f8:	3f01      	subs	r7, #1
 800e7fa:	2f16      	cmp	r7, #22
 800e7fc:	d853      	bhi.n	800e8a6 <_dtoa_r+0x216>
 800e7fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e802:	4b5c      	ldr	r3, [pc, #368]	@ (800e974 <_dtoa_r+0x2e4>)
 800e804:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e80c:	f7f2 f8d6 	bl	80009bc <__aeabi_dcmplt>
 800e810:	2800      	cmp	r0, #0
 800e812:	d04a      	beq.n	800e8aa <_dtoa_r+0x21a>
 800e814:	2300      	movs	r3, #0
 800e816:	3f01      	subs	r7, #1
 800e818:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e81a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e81c:	1b9b      	subs	r3, r3, r6
 800e81e:	1e5a      	subs	r2, r3, #1
 800e820:	bf46      	itte	mi
 800e822:	f1c3 0801 	rsbmi	r8, r3, #1
 800e826:	2300      	movmi	r3, #0
 800e828:	f04f 0800 	movpl.w	r8, #0
 800e82c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e82e:	bf48      	it	mi
 800e830:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800e832:	2f00      	cmp	r7, #0
 800e834:	db3b      	blt.n	800e8ae <_dtoa_r+0x21e>
 800e836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e838:	970e      	str	r7, [sp, #56]	@ 0x38
 800e83a:	443b      	add	r3, r7
 800e83c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e83e:	2300      	movs	r3, #0
 800e840:	930a      	str	r3, [sp, #40]	@ 0x28
 800e842:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e844:	2b09      	cmp	r3, #9
 800e846:	d866      	bhi.n	800e916 <_dtoa_r+0x286>
 800e848:	2b05      	cmp	r3, #5
 800e84a:	bfc4      	itt	gt
 800e84c:	3b04      	subgt	r3, #4
 800e84e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800e850:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e852:	bfc8      	it	gt
 800e854:	2400      	movgt	r4, #0
 800e856:	f1a3 0302 	sub.w	r3, r3, #2
 800e85a:	bfd8      	it	le
 800e85c:	2401      	movle	r4, #1
 800e85e:	2b03      	cmp	r3, #3
 800e860:	d864      	bhi.n	800e92c <_dtoa_r+0x29c>
 800e862:	e8df f003 	tbb	[pc, r3]
 800e866:	382b      	.short	0x382b
 800e868:	5636      	.short	0x5636
 800e86a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e86e:	441e      	add	r6, r3
 800e870:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e874:	2b20      	cmp	r3, #32
 800e876:	bfc1      	itttt	gt
 800e878:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e87c:	fa08 f803 	lslgt.w	r8, r8, r3
 800e880:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e884:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e888:	bfd6      	itet	le
 800e88a:	f1c3 0320 	rsble	r3, r3, #32
 800e88e:	ea48 0003 	orrgt.w	r0, r8, r3
 800e892:	fa04 f003 	lslle.w	r0, r4, r3
 800e896:	f7f1 fda5 	bl	80003e4 <__aeabi_ui2d>
 800e89a:	2201      	movs	r2, #1
 800e89c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e8a0:	3e01      	subs	r6, #1
 800e8a2:	9212      	str	r2, [sp, #72]	@ 0x48
 800e8a4:	e775      	b.n	800e792 <_dtoa_r+0x102>
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	e7b6      	b.n	800e818 <_dtoa_r+0x188>
 800e8aa:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e8ac:	e7b5      	b.n	800e81a <_dtoa_r+0x18a>
 800e8ae:	427b      	negs	r3, r7
 800e8b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	eba8 0807 	sub.w	r8, r8, r7
 800e8b8:	930e      	str	r3, [sp, #56]	@ 0x38
 800e8ba:	e7c2      	b.n	800e842 <_dtoa_r+0x1b2>
 800e8bc:	2300      	movs	r3, #0
 800e8be:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e8c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	dc35      	bgt.n	800e932 <_dtoa_r+0x2a2>
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800e8ce:	9221      	str	r2, [sp, #132]	@ 0x84
 800e8d0:	e00b      	b.n	800e8ea <_dtoa_r+0x25a>
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	e7f3      	b.n	800e8be <_dtoa_r+0x22e>
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e8da:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e8dc:	18fb      	adds	r3, r7, r3
 800e8de:	9308      	str	r3, [sp, #32]
 800e8e0:	3301      	adds	r3, #1
 800e8e2:	2b01      	cmp	r3, #1
 800e8e4:	9307      	str	r3, [sp, #28]
 800e8e6:	bfb8      	it	lt
 800e8e8:	2301      	movlt	r3, #1
 800e8ea:	2100      	movs	r1, #0
 800e8ec:	2204      	movs	r2, #4
 800e8ee:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e8f2:	f102 0514 	add.w	r5, r2, #20
 800e8f6:	429d      	cmp	r5, r3
 800e8f8:	d91f      	bls.n	800e93a <_dtoa_r+0x2aa>
 800e8fa:	6041      	str	r1, [r0, #4]
 800e8fc:	4658      	mov	r0, fp
 800e8fe:	f000 fd8d 	bl	800f41c <_Balloc>
 800e902:	4682      	mov	sl, r0
 800e904:	2800      	cmp	r0, #0
 800e906:	d139      	bne.n	800e97c <_dtoa_r+0x2ec>
 800e908:	4602      	mov	r2, r0
 800e90a:	f240 11af 	movw	r1, #431	@ 0x1af
 800e90e:	4b1a      	ldr	r3, [pc, #104]	@ (800e978 <_dtoa_r+0x2e8>)
 800e910:	e6d2      	b.n	800e6b8 <_dtoa_r+0x28>
 800e912:	2301      	movs	r3, #1
 800e914:	e7e0      	b.n	800e8d8 <_dtoa_r+0x248>
 800e916:	2401      	movs	r4, #1
 800e918:	2300      	movs	r3, #0
 800e91a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e91c:	9320      	str	r3, [sp, #128]	@ 0x80
 800e91e:	f04f 33ff 	mov.w	r3, #4294967295
 800e922:	2200      	movs	r2, #0
 800e924:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800e928:	2312      	movs	r3, #18
 800e92a:	e7d0      	b.n	800e8ce <_dtoa_r+0x23e>
 800e92c:	2301      	movs	r3, #1
 800e92e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e930:	e7f5      	b.n	800e91e <_dtoa_r+0x28e>
 800e932:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e934:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800e938:	e7d7      	b.n	800e8ea <_dtoa_r+0x25a>
 800e93a:	3101      	adds	r1, #1
 800e93c:	0052      	lsls	r2, r2, #1
 800e93e:	e7d8      	b.n	800e8f2 <_dtoa_r+0x262>
 800e940:	636f4361 	.word	0x636f4361
 800e944:	3fd287a7 	.word	0x3fd287a7
 800e948:	8b60c8b3 	.word	0x8b60c8b3
 800e94c:	3fc68a28 	.word	0x3fc68a28
 800e950:	509f79fb 	.word	0x509f79fb
 800e954:	3fd34413 	.word	0x3fd34413
 800e958:	08011dc0 	.word	0x08011dc0
 800e95c:	08011dd7 	.word	0x08011dd7
 800e960:	7ff00000 	.word	0x7ff00000
 800e964:	08011dbc 	.word	0x08011dbc
 800e968:	08011d8b 	.word	0x08011d8b
 800e96c:	08011d8a 	.word	0x08011d8a
 800e970:	3ff80000 	.word	0x3ff80000
 800e974:	08011ed0 	.word	0x08011ed0
 800e978:	08011e2f 	.word	0x08011e2f
 800e97c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e980:	6018      	str	r0, [r3, #0]
 800e982:	9b07      	ldr	r3, [sp, #28]
 800e984:	2b0e      	cmp	r3, #14
 800e986:	f200 80a4 	bhi.w	800ead2 <_dtoa_r+0x442>
 800e98a:	2c00      	cmp	r4, #0
 800e98c:	f000 80a1 	beq.w	800ead2 <_dtoa_r+0x442>
 800e990:	2f00      	cmp	r7, #0
 800e992:	dd33      	ble.n	800e9fc <_dtoa_r+0x36c>
 800e994:	4b86      	ldr	r3, [pc, #536]	@ (800ebb0 <_dtoa_r+0x520>)
 800e996:	f007 020f 	and.w	r2, r7, #15
 800e99a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e99e:	05f8      	lsls	r0, r7, #23
 800e9a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e9a4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e9a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e9ac:	d516      	bpl.n	800e9dc <_dtoa_r+0x34c>
 800e9ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e9b2:	4b80      	ldr	r3, [pc, #512]	@ (800ebb4 <_dtoa_r+0x524>)
 800e9b4:	2603      	movs	r6, #3
 800e9b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e9ba:	f7f1 feb7 	bl	800072c <__aeabi_ddiv>
 800e9be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9c2:	f004 040f 	and.w	r4, r4, #15
 800e9c6:	4d7b      	ldr	r5, [pc, #492]	@ (800ebb4 <_dtoa_r+0x524>)
 800e9c8:	b954      	cbnz	r4, 800e9e0 <_dtoa_r+0x350>
 800e9ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e9ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9d2:	f7f1 feab 	bl	800072c <__aeabi_ddiv>
 800e9d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9da:	e028      	b.n	800ea2e <_dtoa_r+0x39e>
 800e9dc:	2602      	movs	r6, #2
 800e9de:	e7f2      	b.n	800e9c6 <_dtoa_r+0x336>
 800e9e0:	07e1      	lsls	r1, r4, #31
 800e9e2:	d508      	bpl.n	800e9f6 <_dtoa_r+0x366>
 800e9e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e9e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e9ec:	f7f1 fd74 	bl	80004d8 <__aeabi_dmul>
 800e9f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e9f4:	3601      	adds	r6, #1
 800e9f6:	1064      	asrs	r4, r4, #1
 800e9f8:	3508      	adds	r5, #8
 800e9fa:	e7e5      	b.n	800e9c8 <_dtoa_r+0x338>
 800e9fc:	f000 80d2 	beq.w	800eba4 <_dtoa_r+0x514>
 800ea00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ea04:	427c      	negs	r4, r7
 800ea06:	4b6a      	ldr	r3, [pc, #424]	@ (800ebb0 <_dtoa_r+0x520>)
 800ea08:	f004 020f 	and.w	r2, r4, #15
 800ea0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea14:	f7f1 fd60 	bl	80004d8 <__aeabi_dmul>
 800ea18:	2602      	movs	r6, #2
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea20:	4d64      	ldr	r5, [pc, #400]	@ (800ebb4 <_dtoa_r+0x524>)
 800ea22:	1124      	asrs	r4, r4, #4
 800ea24:	2c00      	cmp	r4, #0
 800ea26:	f040 80b2 	bne.w	800eb8e <_dtoa_r+0x4fe>
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d1d3      	bne.n	800e9d6 <_dtoa_r+0x346>
 800ea2e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ea32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	f000 80b7 	beq.w	800eba8 <_dtoa_r+0x518>
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	4620      	mov	r0, r4
 800ea3e:	4629      	mov	r1, r5
 800ea40:	4b5d      	ldr	r3, [pc, #372]	@ (800ebb8 <_dtoa_r+0x528>)
 800ea42:	f7f1 ffbb 	bl	80009bc <__aeabi_dcmplt>
 800ea46:	2800      	cmp	r0, #0
 800ea48:	f000 80ae 	beq.w	800eba8 <_dtoa_r+0x518>
 800ea4c:	9b07      	ldr	r3, [sp, #28]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	f000 80aa 	beq.w	800eba8 <_dtoa_r+0x518>
 800ea54:	9b08      	ldr	r3, [sp, #32]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	dd37      	ble.n	800eaca <_dtoa_r+0x43a>
 800ea5a:	1e7b      	subs	r3, r7, #1
 800ea5c:	4620      	mov	r0, r4
 800ea5e:	9304      	str	r3, [sp, #16]
 800ea60:	2200      	movs	r2, #0
 800ea62:	4629      	mov	r1, r5
 800ea64:	4b55      	ldr	r3, [pc, #340]	@ (800ebbc <_dtoa_r+0x52c>)
 800ea66:	f7f1 fd37 	bl	80004d8 <__aeabi_dmul>
 800ea6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea6e:	9c08      	ldr	r4, [sp, #32]
 800ea70:	3601      	adds	r6, #1
 800ea72:	4630      	mov	r0, r6
 800ea74:	f7f1 fcc6 	bl	8000404 <__aeabi_i2d>
 800ea78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ea7c:	f7f1 fd2c 	bl	80004d8 <__aeabi_dmul>
 800ea80:	2200      	movs	r2, #0
 800ea82:	4b4f      	ldr	r3, [pc, #316]	@ (800ebc0 <_dtoa_r+0x530>)
 800ea84:	f7f1 fb72 	bl	800016c <__adddf3>
 800ea88:	4605      	mov	r5, r0
 800ea8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ea8e:	2c00      	cmp	r4, #0
 800ea90:	f040 809a 	bne.w	800ebc8 <_dtoa_r+0x538>
 800ea94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea98:	2200      	movs	r2, #0
 800ea9a:	4b4a      	ldr	r3, [pc, #296]	@ (800ebc4 <_dtoa_r+0x534>)
 800ea9c:	f7f1 fb64 	bl	8000168 <__aeabi_dsub>
 800eaa0:	4602      	mov	r2, r0
 800eaa2:	460b      	mov	r3, r1
 800eaa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eaa8:	462a      	mov	r2, r5
 800eaaa:	4633      	mov	r3, r6
 800eaac:	f7f1 ffa4 	bl	80009f8 <__aeabi_dcmpgt>
 800eab0:	2800      	cmp	r0, #0
 800eab2:	f040 828e 	bne.w	800efd2 <_dtoa_r+0x942>
 800eab6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eaba:	462a      	mov	r2, r5
 800eabc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800eac0:	f7f1 ff7c 	bl	80009bc <__aeabi_dcmplt>
 800eac4:	2800      	cmp	r0, #0
 800eac6:	f040 8127 	bne.w	800ed18 <_dtoa_r+0x688>
 800eaca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800eace:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ead2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	f2c0 8163 	blt.w	800eda0 <_dtoa_r+0x710>
 800eada:	2f0e      	cmp	r7, #14
 800eadc:	f300 8160 	bgt.w	800eda0 <_dtoa_r+0x710>
 800eae0:	4b33      	ldr	r3, [pc, #204]	@ (800ebb0 <_dtoa_r+0x520>)
 800eae2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800eae6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800eaea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800eaee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	da03      	bge.n	800eafc <_dtoa_r+0x46c>
 800eaf4:	9b07      	ldr	r3, [sp, #28]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	f340 8100 	ble.w	800ecfc <_dtoa_r+0x66c>
 800eafc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800eb00:	4656      	mov	r6, sl
 800eb02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb06:	4620      	mov	r0, r4
 800eb08:	4629      	mov	r1, r5
 800eb0a:	f7f1 fe0f 	bl	800072c <__aeabi_ddiv>
 800eb0e:	f7f1 ff93 	bl	8000a38 <__aeabi_d2iz>
 800eb12:	4680      	mov	r8, r0
 800eb14:	f7f1 fc76 	bl	8000404 <__aeabi_i2d>
 800eb18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb1c:	f7f1 fcdc 	bl	80004d8 <__aeabi_dmul>
 800eb20:	4602      	mov	r2, r0
 800eb22:	460b      	mov	r3, r1
 800eb24:	4620      	mov	r0, r4
 800eb26:	4629      	mov	r1, r5
 800eb28:	f7f1 fb1e 	bl	8000168 <__aeabi_dsub>
 800eb2c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800eb30:	9d07      	ldr	r5, [sp, #28]
 800eb32:	f806 4b01 	strb.w	r4, [r6], #1
 800eb36:	eba6 040a 	sub.w	r4, r6, sl
 800eb3a:	42a5      	cmp	r5, r4
 800eb3c:	4602      	mov	r2, r0
 800eb3e:	460b      	mov	r3, r1
 800eb40:	f040 8116 	bne.w	800ed70 <_dtoa_r+0x6e0>
 800eb44:	f7f1 fb12 	bl	800016c <__adddf3>
 800eb48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb4c:	4604      	mov	r4, r0
 800eb4e:	460d      	mov	r5, r1
 800eb50:	f7f1 ff52 	bl	80009f8 <__aeabi_dcmpgt>
 800eb54:	2800      	cmp	r0, #0
 800eb56:	f040 80f8 	bne.w	800ed4a <_dtoa_r+0x6ba>
 800eb5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb5e:	4620      	mov	r0, r4
 800eb60:	4629      	mov	r1, r5
 800eb62:	f7f1 ff21 	bl	80009a8 <__aeabi_dcmpeq>
 800eb66:	b118      	cbz	r0, 800eb70 <_dtoa_r+0x4e0>
 800eb68:	f018 0f01 	tst.w	r8, #1
 800eb6c:	f040 80ed 	bne.w	800ed4a <_dtoa_r+0x6ba>
 800eb70:	4649      	mov	r1, r9
 800eb72:	4658      	mov	r0, fp
 800eb74:	f000 fc92 	bl	800f49c <_Bfree>
 800eb78:	2300      	movs	r3, #0
 800eb7a:	7033      	strb	r3, [r6, #0]
 800eb7c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800eb7e:	3701      	adds	r7, #1
 800eb80:	601f      	str	r7, [r3, #0]
 800eb82:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	f000 8320 	beq.w	800f1ca <_dtoa_r+0xb3a>
 800eb8a:	601e      	str	r6, [r3, #0]
 800eb8c:	e31d      	b.n	800f1ca <_dtoa_r+0xb3a>
 800eb8e:	07e2      	lsls	r2, r4, #31
 800eb90:	d505      	bpl.n	800eb9e <_dtoa_r+0x50e>
 800eb92:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eb96:	f7f1 fc9f 	bl	80004d8 <__aeabi_dmul>
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	3601      	adds	r6, #1
 800eb9e:	1064      	asrs	r4, r4, #1
 800eba0:	3508      	adds	r5, #8
 800eba2:	e73f      	b.n	800ea24 <_dtoa_r+0x394>
 800eba4:	2602      	movs	r6, #2
 800eba6:	e742      	b.n	800ea2e <_dtoa_r+0x39e>
 800eba8:	9c07      	ldr	r4, [sp, #28]
 800ebaa:	9704      	str	r7, [sp, #16]
 800ebac:	e761      	b.n	800ea72 <_dtoa_r+0x3e2>
 800ebae:	bf00      	nop
 800ebb0:	08011ed0 	.word	0x08011ed0
 800ebb4:	08011ea8 	.word	0x08011ea8
 800ebb8:	3ff00000 	.word	0x3ff00000
 800ebbc:	40240000 	.word	0x40240000
 800ebc0:	401c0000 	.word	0x401c0000
 800ebc4:	40140000 	.word	0x40140000
 800ebc8:	4b70      	ldr	r3, [pc, #448]	@ (800ed8c <_dtoa_r+0x6fc>)
 800ebca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ebcc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ebd0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ebd4:	4454      	add	r4, sl
 800ebd6:	2900      	cmp	r1, #0
 800ebd8:	d045      	beq.n	800ec66 <_dtoa_r+0x5d6>
 800ebda:	2000      	movs	r0, #0
 800ebdc:	496c      	ldr	r1, [pc, #432]	@ (800ed90 <_dtoa_r+0x700>)
 800ebde:	f7f1 fda5 	bl	800072c <__aeabi_ddiv>
 800ebe2:	4633      	mov	r3, r6
 800ebe4:	462a      	mov	r2, r5
 800ebe6:	f7f1 fabf 	bl	8000168 <__aeabi_dsub>
 800ebea:	4656      	mov	r6, sl
 800ebec:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ebf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebf4:	f7f1 ff20 	bl	8000a38 <__aeabi_d2iz>
 800ebf8:	4605      	mov	r5, r0
 800ebfa:	f7f1 fc03 	bl	8000404 <__aeabi_i2d>
 800ebfe:	4602      	mov	r2, r0
 800ec00:	460b      	mov	r3, r1
 800ec02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec06:	f7f1 faaf 	bl	8000168 <__aeabi_dsub>
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	3530      	adds	r5, #48	@ 0x30
 800ec10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ec14:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ec18:	f806 5b01 	strb.w	r5, [r6], #1
 800ec1c:	f7f1 fece 	bl	80009bc <__aeabi_dcmplt>
 800ec20:	2800      	cmp	r0, #0
 800ec22:	d163      	bne.n	800ecec <_dtoa_r+0x65c>
 800ec24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec28:	2000      	movs	r0, #0
 800ec2a:	495a      	ldr	r1, [pc, #360]	@ (800ed94 <_dtoa_r+0x704>)
 800ec2c:	f7f1 fa9c 	bl	8000168 <__aeabi_dsub>
 800ec30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ec34:	f7f1 fec2 	bl	80009bc <__aeabi_dcmplt>
 800ec38:	2800      	cmp	r0, #0
 800ec3a:	f040 8087 	bne.w	800ed4c <_dtoa_r+0x6bc>
 800ec3e:	42a6      	cmp	r6, r4
 800ec40:	f43f af43 	beq.w	800eaca <_dtoa_r+0x43a>
 800ec44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ec48:	2200      	movs	r2, #0
 800ec4a:	4b53      	ldr	r3, [pc, #332]	@ (800ed98 <_dtoa_r+0x708>)
 800ec4c:	f7f1 fc44 	bl	80004d8 <__aeabi_dmul>
 800ec50:	2200      	movs	r2, #0
 800ec52:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ec56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec5a:	4b4f      	ldr	r3, [pc, #316]	@ (800ed98 <_dtoa_r+0x708>)
 800ec5c:	f7f1 fc3c 	bl	80004d8 <__aeabi_dmul>
 800ec60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec64:	e7c4      	b.n	800ebf0 <_dtoa_r+0x560>
 800ec66:	4631      	mov	r1, r6
 800ec68:	4628      	mov	r0, r5
 800ec6a:	f7f1 fc35 	bl	80004d8 <__aeabi_dmul>
 800ec6e:	4656      	mov	r6, sl
 800ec70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ec74:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ec76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec7a:	f7f1 fedd 	bl	8000a38 <__aeabi_d2iz>
 800ec7e:	4605      	mov	r5, r0
 800ec80:	f7f1 fbc0 	bl	8000404 <__aeabi_i2d>
 800ec84:	4602      	mov	r2, r0
 800ec86:	460b      	mov	r3, r1
 800ec88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec8c:	f7f1 fa6c 	bl	8000168 <__aeabi_dsub>
 800ec90:	4602      	mov	r2, r0
 800ec92:	460b      	mov	r3, r1
 800ec94:	3530      	adds	r5, #48	@ 0x30
 800ec96:	f806 5b01 	strb.w	r5, [r6], #1
 800ec9a:	42a6      	cmp	r6, r4
 800ec9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eca0:	f04f 0200 	mov.w	r2, #0
 800eca4:	d124      	bne.n	800ecf0 <_dtoa_r+0x660>
 800eca6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ecaa:	4b39      	ldr	r3, [pc, #228]	@ (800ed90 <_dtoa_r+0x700>)
 800ecac:	f7f1 fa5e 	bl	800016c <__adddf3>
 800ecb0:	4602      	mov	r2, r0
 800ecb2:	460b      	mov	r3, r1
 800ecb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ecb8:	f7f1 fe9e 	bl	80009f8 <__aeabi_dcmpgt>
 800ecbc:	2800      	cmp	r0, #0
 800ecbe:	d145      	bne.n	800ed4c <_dtoa_r+0x6bc>
 800ecc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ecc4:	2000      	movs	r0, #0
 800ecc6:	4932      	ldr	r1, [pc, #200]	@ (800ed90 <_dtoa_r+0x700>)
 800ecc8:	f7f1 fa4e 	bl	8000168 <__aeabi_dsub>
 800eccc:	4602      	mov	r2, r0
 800ecce:	460b      	mov	r3, r1
 800ecd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ecd4:	f7f1 fe72 	bl	80009bc <__aeabi_dcmplt>
 800ecd8:	2800      	cmp	r0, #0
 800ecda:	f43f aef6 	beq.w	800eaca <_dtoa_r+0x43a>
 800ecde:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ece0:	1e73      	subs	r3, r6, #1
 800ece2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ece4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ece8:	2b30      	cmp	r3, #48	@ 0x30
 800ecea:	d0f8      	beq.n	800ecde <_dtoa_r+0x64e>
 800ecec:	9f04      	ldr	r7, [sp, #16]
 800ecee:	e73f      	b.n	800eb70 <_dtoa_r+0x4e0>
 800ecf0:	4b29      	ldr	r3, [pc, #164]	@ (800ed98 <_dtoa_r+0x708>)
 800ecf2:	f7f1 fbf1 	bl	80004d8 <__aeabi_dmul>
 800ecf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ecfa:	e7bc      	b.n	800ec76 <_dtoa_r+0x5e6>
 800ecfc:	d10c      	bne.n	800ed18 <_dtoa_r+0x688>
 800ecfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ed02:	2200      	movs	r2, #0
 800ed04:	4b25      	ldr	r3, [pc, #148]	@ (800ed9c <_dtoa_r+0x70c>)
 800ed06:	f7f1 fbe7 	bl	80004d8 <__aeabi_dmul>
 800ed0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed0e:	f7f1 fe69 	bl	80009e4 <__aeabi_dcmpge>
 800ed12:	2800      	cmp	r0, #0
 800ed14:	f000 815b 	beq.w	800efce <_dtoa_r+0x93e>
 800ed18:	2400      	movs	r4, #0
 800ed1a:	4625      	mov	r5, r4
 800ed1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ed1e:	4656      	mov	r6, sl
 800ed20:	43db      	mvns	r3, r3
 800ed22:	9304      	str	r3, [sp, #16]
 800ed24:	2700      	movs	r7, #0
 800ed26:	4621      	mov	r1, r4
 800ed28:	4658      	mov	r0, fp
 800ed2a:	f000 fbb7 	bl	800f49c <_Bfree>
 800ed2e:	2d00      	cmp	r5, #0
 800ed30:	d0dc      	beq.n	800ecec <_dtoa_r+0x65c>
 800ed32:	b12f      	cbz	r7, 800ed40 <_dtoa_r+0x6b0>
 800ed34:	42af      	cmp	r7, r5
 800ed36:	d003      	beq.n	800ed40 <_dtoa_r+0x6b0>
 800ed38:	4639      	mov	r1, r7
 800ed3a:	4658      	mov	r0, fp
 800ed3c:	f000 fbae 	bl	800f49c <_Bfree>
 800ed40:	4629      	mov	r1, r5
 800ed42:	4658      	mov	r0, fp
 800ed44:	f000 fbaa 	bl	800f49c <_Bfree>
 800ed48:	e7d0      	b.n	800ecec <_dtoa_r+0x65c>
 800ed4a:	9704      	str	r7, [sp, #16]
 800ed4c:	4633      	mov	r3, r6
 800ed4e:	461e      	mov	r6, r3
 800ed50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ed54:	2a39      	cmp	r2, #57	@ 0x39
 800ed56:	d107      	bne.n	800ed68 <_dtoa_r+0x6d8>
 800ed58:	459a      	cmp	sl, r3
 800ed5a:	d1f8      	bne.n	800ed4e <_dtoa_r+0x6be>
 800ed5c:	9a04      	ldr	r2, [sp, #16]
 800ed5e:	3201      	adds	r2, #1
 800ed60:	9204      	str	r2, [sp, #16]
 800ed62:	2230      	movs	r2, #48	@ 0x30
 800ed64:	f88a 2000 	strb.w	r2, [sl]
 800ed68:	781a      	ldrb	r2, [r3, #0]
 800ed6a:	3201      	adds	r2, #1
 800ed6c:	701a      	strb	r2, [r3, #0]
 800ed6e:	e7bd      	b.n	800ecec <_dtoa_r+0x65c>
 800ed70:	2200      	movs	r2, #0
 800ed72:	4b09      	ldr	r3, [pc, #36]	@ (800ed98 <_dtoa_r+0x708>)
 800ed74:	f7f1 fbb0 	bl	80004d8 <__aeabi_dmul>
 800ed78:	2200      	movs	r2, #0
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	4604      	mov	r4, r0
 800ed7e:	460d      	mov	r5, r1
 800ed80:	f7f1 fe12 	bl	80009a8 <__aeabi_dcmpeq>
 800ed84:	2800      	cmp	r0, #0
 800ed86:	f43f aebc 	beq.w	800eb02 <_dtoa_r+0x472>
 800ed8a:	e6f1      	b.n	800eb70 <_dtoa_r+0x4e0>
 800ed8c:	08011ed0 	.word	0x08011ed0
 800ed90:	3fe00000 	.word	0x3fe00000
 800ed94:	3ff00000 	.word	0x3ff00000
 800ed98:	40240000 	.word	0x40240000
 800ed9c:	40140000 	.word	0x40140000
 800eda0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800eda2:	2a00      	cmp	r2, #0
 800eda4:	f000 80db 	beq.w	800ef5e <_dtoa_r+0x8ce>
 800eda8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800edaa:	2a01      	cmp	r2, #1
 800edac:	f300 80bf 	bgt.w	800ef2e <_dtoa_r+0x89e>
 800edb0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800edb2:	2a00      	cmp	r2, #0
 800edb4:	f000 80b7 	beq.w	800ef26 <_dtoa_r+0x896>
 800edb8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800edbc:	4646      	mov	r6, r8
 800edbe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800edc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800edc2:	2101      	movs	r1, #1
 800edc4:	441a      	add	r2, r3
 800edc6:	4658      	mov	r0, fp
 800edc8:	4498      	add	r8, r3
 800edca:	9209      	str	r2, [sp, #36]	@ 0x24
 800edcc:	f000 fc64 	bl	800f698 <__i2b>
 800edd0:	4605      	mov	r5, r0
 800edd2:	b15e      	cbz	r6, 800edec <_dtoa_r+0x75c>
 800edd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	dd08      	ble.n	800edec <_dtoa_r+0x75c>
 800edda:	42b3      	cmp	r3, r6
 800eddc:	bfa8      	it	ge
 800edde:	4633      	movge	r3, r6
 800ede0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ede2:	eba8 0803 	sub.w	r8, r8, r3
 800ede6:	1af6      	subs	r6, r6, r3
 800ede8:	1ad3      	subs	r3, r2, r3
 800edea:	9309      	str	r3, [sp, #36]	@ 0x24
 800edec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800edee:	b1f3      	cbz	r3, 800ee2e <_dtoa_r+0x79e>
 800edf0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	f000 80b7 	beq.w	800ef66 <_dtoa_r+0x8d6>
 800edf8:	b18c      	cbz	r4, 800ee1e <_dtoa_r+0x78e>
 800edfa:	4629      	mov	r1, r5
 800edfc:	4622      	mov	r2, r4
 800edfe:	4658      	mov	r0, fp
 800ee00:	f000 fd08 	bl	800f814 <__pow5mult>
 800ee04:	464a      	mov	r2, r9
 800ee06:	4601      	mov	r1, r0
 800ee08:	4605      	mov	r5, r0
 800ee0a:	4658      	mov	r0, fp
 800ee0c:	f000 fc5a 	bl	800f6c4 <__multiply>
 800ee10:	4649      	mov	r1, r9
 800ee12:	9004      	str	r0, [sp, #16]
 800ee14:	4658      	mov	r0, fp
 800ee16:	f000 fb41 	bl	800f49c <_Bfree>
 800ee1a:	9b04      	ldr	r3, [sp, #16]
 800ee1c:	4699      	mov	r9, r3
 800ee1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee20:	1b1a      	subs	r2, r3, r4
 800ee22:	d004      	beq.n	800ee2e <_dtoa_r+0x79e>
 800ee24:	4649      	mov	r1, r9
 800ee26:	4658      	mov	r0, fp
 800ee28:	f000 fcf4 	bl	800f814 <__pow5mult>
 800ee2c:	4681      	mov	r9, r0
 800ee2e:	2101      	movs	r1, #1
 800ee30:	4658      	mov	r0, fp
 800ee32:	f000 fc31 	bl	800f698 <__i2b>
 800ee36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee38:	4604      	mov	r4, r0
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	f000 81c9 	beq.w	800f1d2 <_dtoa_r+0xb42>
 800ee40:	461a      	mov	r2, r3
 800ee42:	4601      	mov	r1, r0
 800ee44:	4658      	mov	r0, fp
 800ee46:	f000 fce5 	bl	800f814 <__pow5mult>
 800ee4a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ee4c:	4604      	mov	r4, r0
 800ee4e:	2b01      	cmp	r3, #1
 800ee50:	f300 808f 	bgt.w	800ef72 <_dtoa_r+0x8e2>
 800ee54:	9b02      	ldr	r3, [sp, #8]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	f040 8087 	bne.w	800ef6a <_dtoa_r+0x8da>
 800ee5c:	9b03      	ldr	r3, [sp, #12]
 800ee5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	f040 8083 	bne.w	800ef6e <_dtoa_r+0x8de>
 800ee68:	9b03      	ldr	r3, [sp, #12]
 800ee6a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ee6e:	0d1b      	lsrs	r3, r3, #20
 800ee70:	051b      	lsls	r3, r3, #20
 800ee72:	b12b      	cbz	r3, 800ee80 <_dtoa_r+0x7f0>
 800ee74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee76:	f108 0801 	add.w	r8, r8, #1
 800ee7a:	3301      	adds	r3, #1
 800ee7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee7e:	2301      	movs	r3, #1
 800ee80:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	f000 81aa 	beq.w	800f1de <_dtoa_r+0xb4e>
 800ee8a:	6923      	ldr	r3, [r4, #16]
 800ee8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ee90:	6918      	ldr	r0, [r3, #16]
 800ee92:	f000 fbb5 	bl	800f600 <__hi0bits>
 800ee96:	f1c0 0020 	rsb	r0, r0, #32
 800ee9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee9c:	4418      	add	r0, r3
 800ee9e:	f010 001f 	ands.w	r0, r0, #31
 800eea2:	d071      	beq.n	800ef88 <_dtoa_r+0x8f8>
 800eea4:	f1c0 0320 	rsb	r3, r0, #32
 800eea8:	2b04      	cmp	r3, #4
 800eeaa:	dd65      	ble.n	800ef78 <_dtoa_r+0x8e8>
 800eeac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eeae:	f1c0 001c 	rsb	r0, r0, #28
 800eeb2:	4403      	add	r3, r0
 800eeb4:	4480      	add	r8, r0
 800eeb6:	4406      	add	r6, r0
 800eeb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800eeba:	f1b8 0f00 	cmp.w	r8, #0
 800eebe:	dd05      	ble.n	800eecc <_dtoa_r+0x83c>
 800eec0:	4649      	mov	r1, r9
 800eec2:	4642      	mov	r2, r8
 800eec4:	4658      	mov	r0, fp
 800eec6:	f000 fcff 	bl	800f8c8 <__lshift>
 800eeca:	4681      	mov	r9, r0
 800eecc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eece:	2b00      	cmp	r3, #0
 800eed0:	dd05      	ble.n	800eede <_dtoa_r+0x84e>
 800eed2:	4621      	mov	r1, r4
 800eed4:	461a      	mov	r2, r3
 800eed6:	4658      	mov	r0, fp
 800eed8:	f000 fcf6 	bl	800f8c8 <__lshift>
 800eedc:	4604      	mov	r4, r0
 800eede:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d053      	beq.n	800ef8c <_dtoa_r+0x8fc>
 800eee4:	4621      	mov	r1, r4
 800eee6:	4648      	mov	r0, r9
 800eee8:	f000 fd5a 	bl	800f9a0 <__mcmp>
 800eeec:	2800      	cmp	r0, #0
 800eeee:	da4d      	bge.n	800ef8c <_dtoa_r+0x8fc>
 800eef0:	1e7b      	subs	r3, r7, #1
 800eef2:	4649      	mov	r1, r9
 800eef4:	9304      	str	r3, [sp, #16]
 800eef6:	220a      	movs	r2, #10
 800eef8:	2300      	movs	r3, #0
 800eefa:	4658      	mov	r0, fp
 800eefc:	f000 faf0 	bl	800f4e0 <__multadd>
 800ef00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef02:	4681      	mov	r9, r0
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	f000 816c 	beq.w	800f1e2 <_dtoa_r+0xb52>
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	4629      	mov	r1, r5
 800ef0e:	220a      	movs	r2, #10
 800ef10:	4658      	mov	r0, fp
 800ef12:	f000 fae5 	bl	800f4e0 <__multadd>
 800ef16:	9b08      	ldr	r3, [sp, #32]
 800ef18:	4605      	mov	r5, r0
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	dc61      	bgt.n	800efe2 <_dtoa_r+0x952>
 800ef1e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ef20:	2b02      	cmp	r3, #2
 800ef22:	dc3b      	bgt.n	800ef9c <_dtoa_r+0x90c>
 800ef24:	e05d      	b.n	800efe2 <_dtoa_r+0x952>
 800ef26:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ef28:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ef2c:	e746      	b.n	800edbc <_dtoa_r+0x72c>
 800ef2e:	9b07      	ldr	r3, [sp, #28]
 800ef30:	1e5c      	subs	r4, r3, #1
 800ef32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef34:	42a3      	cmp	r3, r4
 800ef36:	bfbf      	itttt	lt
 800ef38:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ef3a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800ef3c:	1ae3      	sublt	r3, r4, r3
 800ef3e:	18d2      	addlt	r2, r2, r3
 800ef40:	bfa8      	it	ge
 800ef42:	1b1c      	subge	r4, r3, r4
 800ef44:	9b07      	ldr	r3, [sp, #28]
 800ef46:	bfbe      	ittt	lt
 800ef48:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ef4a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800ef4c:	2400      	movlt	r4, #0
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	bfb5      	itete	lt
 800ef52:	eba8 0603 	sublt.w	r6, r8, r3
 800ef56:	4646      	movge	r6, r8
 800ef58:	2300      	movlt	r3, #0
 800ef5a:	9b07      	ldrge	r3, [sp, #28]
 800ef5c:	e730      	b.n	800edc0 <_dtoa_r+0x730>
 800ef5e:	4646      	mov	r6, r8
 800ef60:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ef62:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ef64:	e735      	b.n	800edd2 <_dtoa_r+0x742>
 800ef66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ef68:	e75c      	b.n	800ee24 <_dtoa_r+0x794>
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	e788      	b.n	800ee80 <_dtoa_r+0x7f0>
 800ef6e:	9b02      	ldr	r3, [sp, #8]
 800ef70:	e786      	b.n	800ee80 <_dtoa_r+0x7f0>
 800ef72:	2300      	movs	r3, #0
 800ef74:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef76:	e788      	b.n	800ee8a <_dtoa_r+0x7fa>
 800ef78:	d09f      	beq.n	800eeba <_dtoa_r+0x82a>
 800ef7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef7c:	331c      	adds	r3, #28
 800ef7e:	441a      	add	r2, r3
 800ef80:	4498      	add	r8, r3
 800ef82:	441e      	add	r6, r3
 800ef84:	9209      	str	r2, [sp, #36]	@ 0x24
 800ef86:	e798      	b.n	800eeba <_dtoa_r+0x82a>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	e7f6      	b.n	800ef7a <_dtoa_r+0x8ea>
 800ef8c:	9b07      	ldr	r3, [sp, #28]
 800ef8e:	9704      	str	r7, [sp, #16]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	dc20      	bgt.n	800efd6 <_dtoa_r+0x946>
 800ef94:	9308      	str	r3, [sp, #32]
 800ef96:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ef98:	2b02      	cmp	r3, #2
 800ef9a:	dd1e      	ble.n	800efda <_dtoa_r+0x94a>
 800ef9c:	9b08      	ldr	r3, [sp, #32]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	f47f aebc 	bne.w	800ed1c <_dtoa_r+0x68c>
 800efa4:	4621      	mov	r1, r4
 800efa6:	2205      	movs	r2, #5
 800efa8:	4658      	mov	r0, fp
 800efaa:	f000 fa99 	bl	800f4e0 <__multadd>
 800efae:	4601      	mov	r1, r0
 800efb0:	4604      	mov	r4, r0
 800efb2:	4648      	mov	r0, r9
 800efb4:	f000 fcf4 	bl	800f9a0 <__mcmp>
 800efb8:	2800      	cmp	r0, #0
 800efba:	f77f aeaf 	ble.w	800ed1c <_dtoa_r+0x68c>
 800efbe:	2331      	movs	r3, #49	@ 0x31
 800efc0:	4656      	mov	r6, sl
 800efc2:	f806 3b01 	strb.w	r3, [r6], #1
 800efc6:	9b04      	ldr	r3, [sp, #16]
 800efc8:	3301      	adds	r3, #1
 800efca:	9304      	str	r3, [sp, #16]
 800efcc:	e6aa      	b.n	800ed24 <_dtoa_r+0x694>
 800efce:	9c07      	ldr	r4, [sp, #28]
 800efd0:	9704      	str	r7, [sp, #16]
 800efd2:	4625      	mov	r5, r4
 800efd4:	e7f3      	b.n	800efbe <_dtoa_r+0x92e>
 800efd6:	9b07      	ldr	r3, [sp, #28]
 800efd8:	9308      	str	r3, [sp, #32]
 800efda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800efdc:	2b00      	cmp	r3, #0
 800efde:	f000 8104 	beq.w	800f1ea <_dtoa_r+0xb5a>
 800efe2:	2e00      	cmp	r6, #0
 800efe4:	dd05      	ble.n	800eff2 <_dtoa_r+0x962>
 800efe6:	4629      	mov	r1, r5
 800efe8:	4632      	mov	r2, r6
 800efea:	4658      	mov	r0, fp
 800efec:	f000 fc6c 	bl	800f8c8 <__lshift>
 800eff0:	4605      	mov	r5, r0
 800eff2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d05a      	beq.n	800f0ae <_dtoa_r+0xa1e>
 800eff8:	4658      	mov	r0, fp
 800effa:	6869      	ldr	r1, [r5, #4]
 800effc:	f000 fa0e 	bl	800f41c <_Balloc>
 800f000:	4606      	mov	r6, r0
 800f002:	b928      	cbnz	r0, 800f010 <_dtoa_r+0x980>
 800f004:	4602      	mov	r2, r0
 800f006:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f00a:	4b83      	ldr	r3, [pc, #524]	@ (800f218 <_dtoa_r+0xb88>)
 800f00c:	f7ff bb54 	b.w	800e6b8 <_dtoa_r+0x28>
 800f010:	692a      	ldr	r2, [r5, #16]
 800f012:	f105 010c 	add.w	r1, r5, #12
 800f016:	3202      	adds	r2, #2
 800f018:	0092      	lsls	r2, r2, #2
 800f01a:	300c      	adds	r0, #12
 800f01c:	f001 ff5e 	bl	8010edc <memcpy>
 800f020:	2201      	movs	r2, #1
 800f022:	4631      	mov	r1, r6
 800f024:	4658      	mov	r0, fp
 800f026:	f000 fc4f 	bl	800f8c8 <__lshift>
 800f02a:	462f      	mov	r7, r5
 800f02c:	4605      	mov	r5, r0
 800f02e:	f10a 0301 	add.w	r3, sl, #1
 800f032:	9307      	str	r3, [sp, #28]
 800f034:	9b08      	ldr	r3, [sp, #32]
 800f036:	4453      	add	r3, sl
 800f038:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f03a:	9b02      	ldr	r3, [sp, #8]
 800f03c:	f003 0301 	and.w	r3, r3, #1
 800f040:	930a      	str	r3, [sp, #40]	@ 0x28
 800f042:	9b07      	ldr	r3, [sp, #28]
 800f044:	4621      	mov	r1, r4
 800f046:	3b01      	subs	r3, #1
 800f048:	4648      	mov	r0, r9
 800f04a:	9302      	str	r3, [sp, #8]
 800f04c:	f7ff fa96 	bl	800e57c <quorem>
 800f050:	4639      	mov	r1, r7
 800f052:	9008      	str	r0, [sp, #32]
 800f054:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f058:	4648      	mov	r0, r9
 800f05a:	f000 fca1 	bl	800f9a0 <__mcmp>
 800f05e:	462a      	mov	r2, r5
 800f060:	9009      	str	r0, [sp, #36]	@ 0x24
 800f062:	4621      	mov	r1, r4
 800f064:	4658      	mov	r0, fp
 800f066:	f000 fcb7 	bl	800f9d8 <__mdiff>
 800f06a:	68c2      	ldr	r2, [r0, #12]
 800f06c:	4606      	mov	r6, r0
 800f06e:	bb02      	cbnz	r2, 800f0b2 <_dtoa_r+0xa22>
 800f070:	4601      	mov	r1, r0
 800f072:	4648      	mov	r0, r9
 800f074:	f000 fc94 	bl	800f9a0 <__mcmp>
 800f078:	4602      	mov	r2, r0
 800f07a:	4631      	mov	r1, r6
 800f07c:	4658      	mov	r0, fp
 800f07e:	920c      	str	r2, [sp, #48]	@ 0x30
 800f080:	f000 fa0c 	bl	800f49c <_Bfree>
 800f084:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f086:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f088:	9e07      	ldr	r6, [sp, #28]
 800f08a:	ea43 0102 	orr.w	r1, r3, r2
 800f08e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f090:	4319      	orrs	r1, r3
 800f092:	d110      	bne.n	800f0b6 <_dtoa_r+0xa26>
 800f094:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f098:	d029      	beq.n	800f0ee <_dtoa_r+0xa5e>
 800f09a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	dd02      	ble.n	800f0a6 <_dtoa_r+0xa16>
 800f0a0:	9b08      	ldr	r3, [sp, #32]
 800f0a2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f0a6:	9b02      	ldr	r3, [sp, #8]
 800f0a8:	f883 8000 	strb.w	r8, [r3]
 800f0ac:	e63b      	b.n	800ed26 <_dtoa_r+0x696>
 800f0ae:	4628      	mov	r0, r5
 800f0b0:	e7bb      	b.n	800f02a <_dtoa_r+0x99a>
 800f0b2:	2201      	movs	r2, #1
 800f0b4:	e7e1      	b.n	800f07a <_dtoa_r+0x9ea>
 800f0b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	db04      	blt.n	800f0c6 <_dtoa_r+0xa36>
 800f0bc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800f0be:	430b      	orrs	r3, r1
 800f0c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f0c2:	430b      	orrs	r3, r1
 800f0c4:	d120      	bne.n	800f108 <_dtoa_r+0xa78>
 800f0c6:	2a00      	cmp	r2, #0
 800f0c8:	dded      	ble.n	800f0a6 <_dtoa_r+0xa16>
 800f0ca:	4649      	mov	r1, r9
 800f0cc:	2201      	movs	r2, #1
 800f0ce:	4658      	mov	r0, fp
 800f0d0:	f000 fbfa 	bl	800f8c8 <__lshift>
 800f0d4:	4621      	mov	r1, r4
 800f0d6:	4681      	mov	r9, r0
 800f0d8:	f000 fc62 	bl	800f9a0 <__mcmp>
 800f0dc:	2800      	cmp	r0, #0
 800f0de:	dc03      	bgt.n	800f0e8 <_dtoa_r+0xa58>
 800f0e0:	d1e1      	bne.n	800f0a6 <_dtoa_r+0xa16>
 800f0e2:	f018 0f01 	tst.w	r8, #1
 800f0e6:	d0de      	beq.n	800f0a6 <_dtoa_r+0xa16>
 800f0e8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f0ec:	d1d8      	bne.n	800f0a0 <_dtoa_r+0xa10>
 800f0ee:	2339      	movs	r3, #57	@ 0x39
 800f0f0:	9a02      	ldr	r2, [sp, #8]
 800f0f2:	7013      	strb	r3, [r2, #0]
 800f0f4:	4633      	mov	r3, r6
 800f0f6:	461e      	mov	r6, r3
 800f0f8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f0fc:	3b01      	subs	r3, #1
 800f0fe:	2a39      	cmp	r2, #57	@ 0x39
 800f100:	d052      	beq.n	800f1a8 <_dtoa_r+0xb18>
 800f102:	3201      	adds	r2, #1
 800f104:	701a      	strb	r2, [r3, #0]
 800f106:	e60e      	b.n	800ed26 <_dtoa_r+0x696>
 800f108:	2a00      	cmp	r2, #0
 800f10a:	dd07      	ble.n	800f11c <_dtoa_r+0xa8c>
 800f10c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f110:	d0ed      	beq.n	800f0ee <_dtoa_r+0xa5e>
 800f112:	9a02      	ldr	r2, [sp, #8]
 800f114:	f108 0301 	add.w	r3, r8, #1
 800f118:	7013      	strb	r3, [r2, #0]
 800f11a:	e604      	b.n	800ed26 <_dtoa_r+0x696>
 800f11c:	9b07      	ldr	r3, [sp, #28]
 800f11e:	9a07      	ldr	r2, [sp, #28]
 800f120:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f124:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f126:	4293      	cmp	r3, r2
 800f128:	d028      	beq.n	800f17c <_dtoa_r+0xaec>
 800f12a:	4649      	mov	r1, r9
 800f12c:	2300      	movs	r3, #0
 800f12e:	220a      	movs	r2, #10
 800f130:	4658      	mov	r0, fp
 800f132:	f000 f9d5 	bl	800f4e0 <__multadd>
 800f136:	42af      	cmp	r7, r5
 800f138:	4681      	mov	r9, r0
 800f13a:	f04f 0300 	mov.w	r3, #0
 800f13e:	f04f 020a 	mov.w	r2, #10
 800f142:	4639      	mov	r1, r7
 800f144:	4658      	mov	r0, fp
 800f146:	d107      	bne.n	800f158 <_dtoa_r+0xac8>
 800f148:	f000 f9ca 	bl	800f4e0 <__multadd>
 800f14c:	4607      	mov	r7, r0
 800f14e:	4605      	mov	r5, r0
 800f150:	9b07      	ldr	r3, [sp, #28]
 800f152:	3301      	adds	r3, #1
 800f154:	9307      	str	r3, [sp, #28]
 800f156:	e774      	b.n	800f042 <_dtoa_r+0x9b2>
 800f158:	f000 f9c2 	bl	800f4e0 <__multadd>
 800f15c:	4629      	mov	r1, r5
 800f15e:	4607      	mov	r7, r0
 800f160:	2300      	movs	r3, #0
 800f162:	220a      	movs	r2, #10
 800f164:	4658      	mov	r0, fp
 800f166:	f000 f9bb 	bl	800f4e0 <__multadd>
 800f16a:	4605      	mov	r5, r0
 800f16c:	e7f0      	b.n	800f150 <_dtoa_r+0xac0>
 800f16e:	9b08      	ldr	r3, [sp, #32]
 800f170:	2700      	movs	r7, #0
 800f172:	2b00      	cmp	r3, #0
 800f174:	bfcc      	ite	gt
 800f176:	461e      	movgt	r6, r3
 800f178:	2601      	movle	r6, #1
 800f17a:	4456      	add	r6, sl
 800f17c:	4649      	mov	r1, r9
 800f17e:	2201      	movs	r2, #1
 800f180:	4658      	mov	r0, fp
 800f182:	f000 fba1 	bl	800f8c8 <__lshift>
 800f186:	4621      	mov	r1, r4
 800f188:	4681      	mov	r9, r0
 800f18a:	f000 fc09 	bl	800f9a0 <__mcmp>
 800f18e:	2800      	cmp	r0, #0
 800f190:	dcb0      	bgt.n	800f0f4 <_dtoa_r+0xa64>
 800f192:	d102      	bne.n	800f19a <_dtoa_r+0xb0a>
 800f194:	f018 0f01 	tst.w	r8, #1
 800f198:	d1ac      	bne.n	800f0f4 <_dtoa_r+0xa64>
 800f19a:	4633      	mov	r3, r6
 800f19c:	461e      	mov	r6, r3
 800f19e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f1a2:	2a30      	cmp	r2, #48	@ 0x30
 800f1a4:	d0fa      	beq.n	800f19c <_dtoa_r+0xb0c>
 800f1a6:	e5be      	b.n	800ed26 <_dtoa_r+0x696>
 800f1a8:	459a      	cmp	sl, r3
 800f1aa:	d1a4      	bne.n	800f0f6 <_dtoa_r+0xa66>
 800f1ac:	9b04      	ldr	r3, [sp, #16]
 800f1ae:	3301      	adds	r3, #1
 800f1b0:	9304      	str	r3, [sp, #16]
 800f1b2:	2331      	movs	r3, #49	@ 0x31
 800f1b4:	f88a 3000 	strb.w	r3, [sl]
 800f1b8:	e5b5      	b.n	800ed26 <_dtoa_r+0x696>
 800f1ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800f1bc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f21c <_dtoa_r+0xb8c>
 800f1c0:	b11b      	cbz	r3, 800f1ca <_dtoa_r+0xb3a>
 800f1c2:	f10a 0308 	add.w	r3, sl, #8
 800f1c6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800f1c8:	6013      	str	r3, [r2, #0]
 800f1ca:	4650      	mov	r0, sl
 800f1cc:	b017      	add	sp, #92	@ 0x5c
 800f1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f1d4:	2b01      	cmp	r3, #1
 800f1d6:	f77f ae3d 	ble.w	800ee54 <_dtoa_r+0x7c4>
 800f1da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1dc:	930a      	str	r3, [sp, #40]	@ 0x28
 800f1de:	2001      	movs	r0, #1
 800f1e0:	e65b      	b.n	800ee9a <_dtoa_r+0x80a>
 800f1e2:	9b08      	ldr	r3, [sp, #32]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	f77f aed6 	ble.w	800ef96 <_dtoa_r+0x906>
 800f1ea:	4656      	mov	r6, sl
 800f1ec:	4621      	mov	r1, r4
 800f1ee:	4648      	mov	r0, r9
 800f1f0:	f7ff f9c4 	bl	800e57c <quorem>
 800f1f4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f1f8:	9b08      	ldr	r3, [sp, #32]
 800f1fa:	f806 8b01 	strb.w	r8, [r6], #1
 800f1fe:	eba6 020a 	sub.w	r2, r6, sl
 800f202:	4293      	cmp	r3, r2
 800f204:	ddb3      	ble.n	800f16e <_dtoa_r+0xade>
 800f206:	4649      	mov	r1, r9
 800f208:	2300      	movs	r3, #0
 800f20a:	220a      	movs	r2, #10
 800f20c:	4658      	mov	r0, fp
 800f20e:	f000 f967 	bl	800f4e0 <__multadd>
 800f212:	4681      	mov	r9, r0
 800f214:	e7ea      	b.n	800f1ec <_dtoa_r+0xb5c>
 800f216:	bf00      	nop
 800f218:	08011e2f 	.word	0x08011e2f
 800f21c:	08011db3 	.word	0x08011db3

0800f220 <_free_r>:
 800f220:	b538      	push	{r3, r4, r5, lr}
 800f222:	4605      	mov	r5, r0
 800f224:	2900      	cmp	r1, #0
 800f226:	d040      	beq.n	800f2aa <_free_r+0x8a>
 800f228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f22c:	1f0c      	subs	r4, r1, #4
 800f22e:	2b00      	cmp	r3, #0
 800f230:	bfb8      	it	lt
 800f232:	18e4      	addlt	r4, r4, r3
 800f234:	f000 f8e6 	bl	800f404 <__malloc_lock>
 800f238:	4a1c      	ldr	r2, [pc, #112]	@ (800f2ac <_free_r+0x8c>)
 800f23a:	6813      	ldr	r3, [r2, #0]
 800f23c:	b933      	cbnz	r3, 800f24c <_free_r+0x2c>
 800f23e:	6063      	str	r3, [r4, #4]
 800f240:	6014      	str	r4, [r2, #0]
 800f242:	4628      	mov	r0, r5
 800f244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f248:	f000 b8e2 	b.w	800f410 <__malloc_unlock>
 800f24c:	42a3      	cmp	r3, r4
 800f24e:	d908      	bls.n	800f262 <_free_r+0x42>
 800f250:	6820      	ldr	r0, [r4, #0]
 800f252:	1821      	adds	r1, r4, r0
 800f254:	428b      	cmp	r3, r1
 800f256:	bf01      	itttt	eq
 800f258:	6819      	ldreq	r1, [r3, #0]
 800f25a:	685b      	ldreq	r3, [r3, #4]
 800f25c:	1809      	addeq	r1, r1, r0
 800f25e:	6021      	streq	r1, [r4, #0]
 800f260:	e7ed      	b.n	800f23e <_free_r+0x1e>
 800f262:	461a      	mov	r2, r3
 800f264:	685b      	ldr	r3, [r3, #4]
 800f266:	b10b      	cbz	r3, 800f26c <_free_r+0x4c>
 800f268:	42a3      	cmp	r3, r4
 800f26a:	d9fa      	bls.n	800f262 <_free_r+0x42>
 800f26c:	6811      	ldr	r1, [r2, #0]
 800f26e:	1850      	adds	r0, r2, r1
 800f270:	42a0      	cmp	r0, r4
 800f272:	d10b      	bne.n	800f28c <_free_r+0x6c>
 800f274:	6820      	ldr	r0, [r4, #0]
 800f276:	4401      	add	r1, r0
 800f278:	1850      	adds	r0, r2, r1
 800f27a:	4283      	cmp	r3, r0
 800f27c:	6011      	str	r1, [r2, #0]
 800f27e:	d1e0      	bne.n	800f242 <_free_r+0x22>
 800f280:	6818      	ldr	r0, [r3, #0]
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	4408      	add	r0, r1
 800f286:	6010      	str	r0, [r2, #0]
 800f288:	6053      	str	r3, [r2, #4]
 800f28a:	e7da      	b.n	800f242 <_free_r+0x22>
 800f28c:	d902      	bls.n	800f294 <_free_r+0x74>
 800f28e:	230c      	movs	r3, #12
 800f290:	602b      	str	r3, [r5, #0]
 800f292:	e7d6      	b.n	800f242 <_free_r+0x22>
 800f294:	6820      	ldr	r0, [r4, #0]
 800f296:	1821      	adds	r1, r4, r0
 800f298:	428b      	cmp	r3, r1
 800f29a:	bf01      	itttt	eq
 800f29c:	6819      	ldreq	r1, [r3, #0]
 800f29e:	685b      	ldreq	r3, [r3, #4]
 800f2a0:	1809      	addeq	r1, r1, r0
 800f2a2:	6021      	streq	r1, [r4, #0]
 800f2a4:	6063      	str	r3, [r4, #4]
 800f2a6:	6054      	str	r4, [r2, #4]
 800f2a8:	e7cb      	b.n	800f242 <_free_r+0x22>
 800f2aa:	bd38      	pop	{r3, r4, r5, pc}
 800f2ac:	200019c8 	.word	0x200019c8

0800f2b0 <malloc>:
 800f2b0:	4b02      	ldr	r3, [pc, #8]	@ (800f2bc <malloc+0xc>)
 800f2b2:	4601      	mov	r1, r0
 800f2b4:	6818      	ldr	r0, [r3, #0]
 800f2b6:	f000 b825 	b.w	800f304 <_malloc_r>
 800f2ba:	bf00      	nop
 800f2bc:	200001a8 	.word	0x200001a8

0800f2c0 <sbrk_aligned>:
 800f2c0:	b570      	push	{r4, r5, r6, lr}
 800f2c2:	4e0f      	ldr	r6, [pc, #60]	@ (800f300 <sbrk_aligned+0x40>)
 800f2c4:	460c      	mov	r4, r1
 800f2c6:	6831      	ldr	r1, [r6, #0]
 800f2c8:	4605      	mov	r5, r0
 800f2ca:	b911      	cbnz	r1, 800f2d2 <sbrk_aligned+0x12>
 800f2cc:	f001 fdf6 	bl	8010ebc <_sbrk_r>
 800f2d0:	6030      	str	r0, [r6, #0]
 800f2d2:	4621      	mov	r1, r4
 800f2d4:	4628      	mov	r0, r5
 800f2d6:	f001 fdf1 	bl	8010ebc <_sbrk_r>
 800f2da:	1c43      	adds	r3, r0, #1
 800f2dc:	d103      	bne.n	800f2e6 <sbrk_aligned+0x26>
 800f2de:	f04f 34ff 	mov.w	r4, #4294967295
 800f2e2:	4620      	mov	r0, r4
 800f2e4:	bd70      	pop	{r4, r5, r6, pc}
 800f2e6:	1cc4      	adds	r4, r0, #3
 800f2e8:	f024 0403 	bic.w	r4, r4, #3
 800f2ec:	42a0      	cmp	r0, r4
 800f2ee:	d0f8      	beq.n	800f2e2 <sbrk_aligned+0x22>
 800f2f0:	1a21      	subs	r1, r4, r0
 800f2f2:	4628      	mov	r0, r5
 800f2f4:	f001 fde2 	bl	8010ebc <_sbrk_r>
 800f2f8:	3001      	adds	r0, #1
 800f2fa:	d1f2      	bne.n	800f2e2 <sbrk_aligned+0x22>
 800f2fc:	e7ef      	b.n	800f2de <sbrk_aligned+0x1e>
 800f2fe:	bf00      	nop
 800f300:	200019c4 	.word	0x200019c4

0800f304 <_malloc_r>:
 800f304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f308:	1ccd      	adds	r5, r1, #3
 800f30a:	f025 0503 	bic.w	r5, r5, #3
 800f30e:	3508      	adds	r5, #8
 800f310:	2d0c      	cmp	r5, #12
 800f312:	bf38      	it	cc
 800f314:	250c      	movcc	r5, #12
 800f316:	2d00      	cmp	r5, #0
 800f318:	4606      	mov	r6, r0
 800f31a:	db01      	blt.n	800f320 <_malloc_r+0x1c>
 800f31c:	42a9      	cmp	r1, r5
 800f31e:	d904      	bls.n	800f32a <_malloc_r+0x26>
 800f320:	230c      	movs	r3, #12
 800f322:	6033      	str	r3, [r6, #0]
 800f324:	2000      	movs	r0, #0
 800f326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f32a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f400 <_malloc_r+0xfc>
 800f32e:	f000 f869 	bl	800f404 <__malloc_lock>
 800f332:	f8d8 3000 	ldr.w	r3, [r8]
 800f336:	461c      	mov	r4, r3
 800f338:	bb44      	cbnz	r4, 800f38c <_malloc_r+0x88>
 800f33a:	4629      	mov	r1, r5
 800f33c:	4630      	mov	r0, r6
 800f33e:	f7ff ffbf 	bl	800f2c0 <sbrk_aligned>
 800f342:	1c43      	adds	r3, r0, #1
 800f344:	4604      	mov	r4, r0
 800f346:	d158      	bne.n	800f3fa <_malloc_r+0xf6>
 800f348:	f8d8 4000 	ldr.w	r4, [r8]
 800f34c:	4627      	mov	r7, r4
 800f34e:	2f00      	cmp	r7, #0
 800f350:	d143      	bne.n	800f3da <_malloc_r+0xd6>
 800f352:	2c00      	cmp	r4, #0
 800f354:	d04b      	beq.n	800f3ee <_malloc_r+0xea>
 800f356:	6823      	ldr	r3, [r4, #0]
 800f358:	4639      	mov	r1, r7
 800f35a:	4630      	mov	r0, r6
 800f35c:	eb04 0903 	add.w	r9, r4, r3
 800f360:	f001 fdac 	bl	8010ebc <_sbrk_r>
 800f364:	4581      	cmp	r9, r0
 800f366:	d142      	bne.n	800f3ee <_malloc_r+0xea>
 800f368:	6821      	ldr	r1, [r4, #0]
 800f36a:	4630      	mov	r0, r6
 800f36c:	1a6d      	subs	r5, r5, r1
 800f36e:	4629      	mov	r1, r5
 800f370:	f7ff ffa6 	bl	800f2c0 <sbrk_aligned>
 800f374:	3001      	adds	r0, #1
 800f376:	d03a      	beq.n	800f3ee <_malloc_r+0xea>
 800f378:	6823      	ldr	r3, [r4, #0]
 800f37a:	442b      	add	r3, r5
 800f37c:	6023      	str	r3, [r4, #0]
 800f37e:	f8d8 3000 	ldr.w	r3, [r8]
 800f382:	685a      	ldr	r2, [r3, #4]
 800f384:	bb62      	cbnz	r2, 800f3e0 <_malloc_r+0xdc>
 800f386:	f8c8 7000 	str.w	r7, [r8]
 800f38a:	e00f      	b.n	800f3ac <_malloc_r+0xa8>
 800f38c:	6822      	ldr	r2, [r4, #0]
 800f38e:	1b52      	subs	r2, r2, r5
 800f390:	d420      	bmi.n	800f3d4 <_malloc_r+0xd0>
 800f392:	2a0b      	cmp	r2, #11
 800f394:	d917      	bls.n	800f3c6 <_malloc_r+0xc2>
 800f396:	1961      	adds	r1, r4, r5
 800f398:	42a3      	cmp	r3, r4
 800f39a:	6025      	str	r5, [r4, #0]
 800f39c:	bf18      	it	ne
 800f39e:	6059      	strne	r1, [r3, #4]
 800f3a0:	6863      	ldr	r3, [r4, #4]
 800f3a2:	bf08      	it	eq
 800f3a4:	f8c8 1000 	streq.w	r1, [r8]
 800f3a8:	5162      	str	r2, [r4, r5]
 800f3aa:	604b      	str	r3, [r1, #4]
 800f3ac:	4630      	mov	r0, r6
 800f3ae:	f000 f82f 	bl	800f410 <__malloc_unlock>
 800f3b2:	f104 000b 	add.w	r0, r4, #11
 800f3b6:	1d23      	adds	r3, r4, #4
 800f3b8:	f020 0007 	bic.w	r0, r0, #7
 800f3bc:	1ac2      	subs	r2, r0, r3
 800f3be:	bf1c      	itt	ne
 800f3c0:	1a1b      	subne	r3, r3, r0
 800f3c2:	50a3      	strne	r3, [r4, r2]
 800f3c4:	e7af      	b.n	800f326 <_malloc_r+0x22>
 800f3c6:	6862      	ldr	r2, [r4, #4]
 800f3c8:	42a3      	cmp	r3, r4
 800f3ca:	bf0c      	ite	eq
 800f3cc:	f8c8 2000 	streq.w	r2, [r8]
 800f3d0:	605a      	strne	r2, [r3, #4]
 800f3d2:	e7eb      	b.n	800f3ac <_malloc_r+0xa8>
 800f3d4:	4623      	mov	r3, r4
 800f3d6:	6864      	ldr	r4, [r4, #4]
 800f3d8:	e7ae      	b.n	800f338 <_malloc_r+0x34>
 800f3da:	463c      	mov	r4, r7
 800f3dc:	687f      	ldr	r7, [r7, #4]
 800f3de:	e7b6      	b.n	800f34e <_malloc_r+0x4a>
 800f3e0:	461a      	mov	r2, r3
 800f3e2:	685b      	ldr	r3, [r3, #4]
 800f3e4:	42a3      	cmp	r3, r4
 800f3e6:	d1fb      	bne.n	800f3e0 <_malloc_r+0xdc>
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	6053      	str	r3, [r2, #4]
 800f3ec:	e7de      	b.n	800f3ac <_malloc_r+0xa8>
 800f3ee:	230c      	movs	r3, #12
 800f3f0:	4630      	mov	r0, r6
 800f3f2:	6033      	str	r3, [r6, #0]
 800f3f4:	f000 f80c 	bl	800f410 <__malloc_unlock>
 800f3f8:	e794      	b.n	800f324 <_malloc_r+0x20>
 800f3fa:	6005      	str	r5, [r0, #0]
 800f3fc:	e7d6      	b.n	800f3ac <_malloc_r+0xa8>
 800f3fe:	bf00      	nop
 800f400:	200019c8 	.word	0x200019c8

0800f404 <__malloc_lock>:
 800f404:	4801      	ldr	r0, [pc, #4]	@ (800f40c <__malloc_lock+0x8>)
 800f406:	f7ff b8a4 	b.w	800e552 <__retarget_lock_acquire_recursive>
 800f40a:	bf00      	nop
 800f40c:	200019c0 	.word	0x200019c0

0800f410 <__malloc_unlock>:
 800f410:	4801      	ldr	r0, [pc, #4]	@ (800f418 <__malloc_unlock+0x8>)
 800f412:	f7ff b89f 	b.w	800e554 <__retarget_lock_release_recursive>
 800f416:	bf00      	nop
 800f418:	200019c0 	.word	0x200019c0

0800f41c <_Balloc>:
 800f41c:	b570      	push	{r4, r5, r6, lr}
 800f41e:	69c6      	ldr	r6, [r0, #28]
 800f420:	4604      	mov	r4, r0
 800f422:	460d      	mov	r5, r1
 800f424:	b976      	cbnz	r6, 800f444 <_Balloc+0x28>
 800f426:	2010      	movs	r0, #16
 800f428:	f7ff ff42 	bl	800f2b0 <malloc>
 800f42c:	4602      	mov	r2, r0
 800f42e:	61e0      	str	r0, [r4, #28]
 800f430:	b920      	cbnz	r0, 800f43c <_Balloc+0x20>
 800f432:	216b      	movs	r1, #107	@ 0x6b
 800f434:	4b17      	ldr	r3, [pc, #92]	@ (800f494 <_Balloc+0x78>)
 800f436:	4818      	ldr	r0, [pc, #96]	@ (800f498 <_Balloc+0x7c>)
 800f438:	f001 fd64 	bl	8010f04 <__assert_func>
 800f43c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f440:	6006      	str	r6, [r0, #0]
 800f442:	60c6      	str	r6, [r0, #12]
 800f444:	69e6      	ldr	r6, [r4, #28]
 800f446:	68f3      	ldr	r3, [r6, #12]
 800f448:	b183      	cbz	r3, 800f46c <_Balloc+0x50>
 800f44a:	69e3      	ldr	r3, [r4, #28]
 800f44c:	68db      	ldr	r3, [r3, #12]
 800f44e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f452:	b9b8      	cbnz	r0, 800f484 <_Balloc+0x68>
 800f454:	2101      	movs	r1, #1
 800f456:	fa01 f605 	lsl.w	r6, r1, r5
 800f45a:	1d72      	adds	r2, r6, #5
 800f45c:	4620      	mov	r0, r4
 800f45e:	0092      	lsls	r2, r2, #2
 800f460:	f001 fd6e 	bl	8010f40 <_calloc_r>
 800f464:	b160      	cbz	r0, 800f480 <_Balloc+0x64>
 800f466:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f46a:	e00e      	b.n	800f48a <_Balloc+0x6e>
 800f46c:	2221      	movs	r2, #33	@ 0x21
 800f46e:	2104      	movs	r1, #4
 800f470:	4620      	mov	r0, r4
 800f472:	f001 fd65 	bl	8010f40 <_calloc_r>
 800f476:	69e3      	ldr	r3, [r4, #28]
 800f478:	60f0      	str	r0, [r6, #12]
 800f47a:	68db      	ldr	r3, [r3, #12]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d1e4      	bne.n	800f44a <_Balloc+0x2e>
 800f480:	2000      	movs	r0, #0
 800f482:	bd70      	pop	{r4, r5, r6, pc}
 800f484:	6802      	ldr	r2, [r0, #0]
 800f486:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f48a:	2300      	movs	r3, #0
 800f48c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f490:	e7f7      	b.n	800f482 <_Balloc+0x66>
 800f492:	bf00      	nop
 800f494:	08011dc0 	.word	0x08011dc0
 800f498:	08011e40 	.word	0x08011e40

0800f49c <_Bfree>:
 800f49c:	b570      	push	{r4, r5, r6, lr}
 800f49e:	69c6      	ldr	r6, [r0, #28]
 800f4a0:	4605      	mov	r5, r0
 800f4a2:	460c      	mov	r4, r1
 800f4a4:	b976      	cbnz	r6, 800f4c4 <_Bfree+0x28>
 800f4a6:	2010      	movs	r0, #16
 800f4a8:	f7ff ff02 	bl	800f2b0 <malloc>
 800f4ac:	4602      	mov	r2, r0
 800f4ae:	61e8      	str	r0, [r5, #28]
 800f4b0:	b920      	cbnz	r0, 800f4bc <_Bfree+0x20>
 800f4b2:	218f      	movs	r1, #143	@ 0x8f
 800f4b4:	4b08      	ldr	r3, [pc, #32]	@ (800f4d8 <_Bfree+0x3c>)
 800f4b6:	4809      	ldr	r0, [pc, #36]	@ (800f4dc <_Bfree+0x40>)
 800f4b8:	f001 fd24 	bl	8010f04 <__assert_func>
 800f4bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f4c0:	6006      	str	r6, [r0, #0]
 800f4c2:	60c6      	str	r6, [r0, #12]
 800f4c4:	b13c      	cbz	r4, 800f4d6 <_Bfree+0x3a>
 800f4c6:	69eb      	ldr	r3, [r5, #28]
 800f4c8:	6862      	ldr	r2, [r4, #4]
 800f4ca:	68db      	ldr	r3, [r3, #12]
 800f4cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f4d0:	6021      	str	r1, [r4, #0]
 800f4d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f4d6:	bd70      	pop	{r4, r5, r6, pc}
 800f4d8:	08011dc0 	.word	0x08011dc0
 800f4dc:	08011e40 	.word	0x08011e40

0800f4e0 <__multadd>:
 800f4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4e4:	4607      	mov	r7, r0
 800f4e6:	460c      	mov	r4, r1
 800f4e8:	461e      	mov	r6, r3
 800f4ea:	2000      	movs	r0, #0
 800f4ec:	690d      	ldr	r5, [r1, #16]
 800f4ee:	f101 0c14 	add.w	ip, r1, #20
 800f4f2:	f8dc 3000 	ldr.w	r3, [ip]
 800f4f6:	3001      	adds	r0, #1
 800f4f8:	b299      	uxth	r1, r3
 800f4fa:	fb02 6101 	mla	r1, r2, r1, r6
 800f4fe:	0c1e      	lsrs	r6, r3, #16
 800f500:	0c0b      	lsrs	r3, r1, #16
 800f502:	fb02 3306 	mla	r3, r2, r6, r3
 800f506:	b289      	uxth	r1, r1
 800f508:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f50c:	4285      	cmp	r5, r0
 800f50e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f512:	f84c 1b04 	str.w	r1, [ip], #4
 800f516:	dcec      	bgt.n	800f4f2 <__multadd+0x12>
 800f518:	b30e      	cbz	r6, 800f55e <__multadd+0x7e>
 800f51a:	68a3      	ldr	r3, [r4, #8]
 800f51c:	42ab      	cmp	r3, r5
 800f51e:	dc19      	bgt.n	800f554 <__multadd+0x74>
 800f520:	6861      	ldr	r1, [r4, #4]
 800f522:	4638      	mov	r0, r7
 800f524:	3101      	adds	r1, #1
 800f526:	f7ff ff79 	bl	800f41c <_Balloc>
 800f52a:	4680      	mov	r8, r0
 800f52c:	b928      	cbnz	r0, 800f53a <__multadd+0x5a>
 800f52e:	4602      	mov	r2, r0
 800f530:	21ba      	movs	r1, #186	@ 0xba
 800f532:	4b0c      	ldr	r3, [pc, #48]	@ (800f564 <__multadd+0x84>)
 800f534:	480c      	ldr	r0, [pc, #48]	@ (800f568 <__multadd+0x88>)
 800f536:	f001 fce5 	bl	8010f04 <__assert_func>
 800f53a:	6922      	ldr	r2, [r4, #16]
 800f53c:	f104 010c 	add.w	r1, r4, #12
 800f540:	3202      	adds	r2, #2
 800f542:	0092      	lsls	r2, r2, #2
 800f544:	300c      	adds	r0, #12
 800f546:	f001 fcc9 	bl	8010edc <memcpy>
 800f54a:	4621      	mov	r1, r4
 800f54c:	4638      	mov	r0, r7
 800f54e:	f7ff ffa5 	bl	800f49c <_Bfree>
 800f552:	4644      	mov	r4, r8
 800f554:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f558:	3501      	adds	r5, #1
 800f55a:	615e      	str	r6, [r3, #20]
 800f55c:	6125      	str	r5, [r4, #16]
 800f55e:	4620      	mov	r0, r4
 800f560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f564:	08011e2f 	.word	0x08011e2f
 800f568:	08011e40 	.word	0x08011e40

0800f56c <__s2b>:
 800f56c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f570:	4615      	mov	r5, r2
 800f572:	2209      	movs	r2, #9
 800f574:	461f      	mov	r7, r3
 800f576:	3308      	adds	r3, #8
 800f578:	460c      	mov	r4, r1
 800f57a:	fb93 f3f2 	sdiv	r3, r3, r2
 800f57e:	4606      	mov	r6, r0
 800f580:	2201      	movs	r2, #1
 800f582:	2100      	movs	r1, #0
 800f584:	429a      	cmp	r2, r3
 800f586:	db09      	blt.n	800f59c <__s2b+0x30>
 800f588:	4630      	mov	r0, r6
 800f58a:	f7ff ff47 	bl	800f41c <_Balloc>
 800f58e:	b940      	cbnz	r0, 800f5a2 <__s2b+0x36>
 800f590:	4602      	mov	r2, r0
 800f592:	21d3      	movs	r1, #211	@ 0xd3
 800f594:	4b18      	ldr	r3, [pc, #96]	@ (800f5f8 <__s2b+0x8c>)
 800f596:	4819      	ldr	r0, [pc, #100]	@ (800f5fc <__s2b+0x90>)
 800f598:	f001 fcb4 	bl	8010f04 <__assert_func>
 800f59c:	0052      	lsls	r2, r2, #1
 800f59e:	3101      	adds	r1, #1
 800f5a0:	e7f0      	b.n	800f584 <__s2b+0x18>
 800f5a2:	9b08      	ldr	r3, [sp, #32]
 800f5a4:	2d09      	cmp	r5, #9
 800f5a6:	6143      	str	r3, [r0, #20]
 800f5a8:	f04f 0301 	mov.w	r3, #1
 800f5ac:	6103      	str	r3, [r0, #16]
 800f5ae:	dd16      	ble.n	800f5de <__s2b+0x72>
 800f5b0:	f104 0909 	add.w	r9, r4, #9
 800f5b4:	46c8      	mov	r8, r9
 800f5b6:	442c      	add	r4, r5
 800f5b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f5bc:	4601      	mov	r1, r0
 800f5be:	220a      	movs	r2, #10
 800f5c0:	4630      	mov	r0, r6
 800f5c2:	3b30      	subs	r3, #48	@ 0x30
 800f5c4:	f7ff ff8c 	bl	800f4e0 <__multadd>
 800f5c8:	45a0      	cmp	r8, r4
 800f5ca:	d1f5      	bne.n	800f5b8 <__s2b+0x4c>
 800f5cc:	f1a5 0408 	sub.w	r4, r5, #8
 800f5d0:	444c      	add	r4, r9
 800f5d2:	1b2d      	subs	r5, r5, r4
 800f5d4:	1963      	adds	r3, r4, r5
 800f5d6:	42bb      	cmp	r3, r7
 800f5d8:	db04      	blt.n	800f5e4 <__s2b+0x78>
 800f5da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5de:	2509      	movs	r5, #9
 800f5e0:	340a      	adds	r4, #10
 800f5e2:	e7f6      	b.n	800f5d2 <__s2b+0x66>
 800f5e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f5e8:	4601      	mov	r1, r0
 800f5ea:	220a      	movs	r2, #10
 800f5ec:	4630      	mov	r0, r6
 800f5ee:	3b30      	subs	r3, #48	@ 0x30
 800f5f0:	f7ff ff76 	bl	800f4e0 <__multadd>
 800f5f4:	e7ee      	b.n	800f5d4 <__s2b+0x68>
 800f5f6:	bf00      	nop
 800f5f8:	08011e2f 	.word	0x08011e2f
 800f5fc:	08011e40 	.word	0x08011e40

0800f600 <__hi0bits>:
 800f600:	4603      	mov	r3, r0
 800f602:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f606:	bf3a      	itte	cc
 800f608:	0403      	lslcc	r3, r0, #16
 800f60a:	2010      	movcc	r0, #16
 800f60c:	2000      	movcs	r0, #0
 800f60e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f612:	bf3c      	itt	cc
 800f614:	021b      	lslcc	r3, r3, #8
 800f616:	3008      	addcc	r0, #8
 800f618:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f61c:	bf3c      	itt	cc
 800f61e:	011b      	lslcc	r3, r3, #4
 800f620:	3004      	addcc	r0, #4
 800f622:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f626:	bf3c      	itt	cc
 800f628:	009b      	lslcc	r3, r3, #2
 800f62a:	3002      	addcc	r0, #2
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	db05      	blt.n	800f63c <__hi0bits+0x3c>
 800f630:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f634:	f100 0001 	add.w	r0, r0, #1
 800f638:	bf08      	it	eq
 800f63a:	2020      	moveq	r0, #32
 800f63c:	4770      	bx	lr

0800f63e <__lo0bits>:
 800f63e:	6803      	ldr	r3, [r0, #0]
 800f640:	4602      	mov	r2, r0
 800f642:	f013 0007 	ands.w	r0, r3, #7
 800f646:	d00b      	beq.n	800f660 <__lo0bits+0x22>
 800f648:	07d9      	lsls	r1, r3, #31
 800f64a:	d421      	bmi.n	800f690 <__lo0bits+0x52>
 800f64c:	0798      	lsls	r0, r3, #30
 800f64e:	bf49      	itett	mi
 800f650:	085b      	lsrmi	r3, r3, #1
 800f652:	089b      	lsrpl	r3, r3, #2
 800f654:	2001      	movmi	r0, #1
 800f656:	6013      	strmi	r3, [r2, #0]
 800f658:	bf5c      	itt	pl
 800f65a:	2002      	movpl	r0, #2
 800f65c:	6013      	strpl	r3, [r2, #0]
 800f65e:	4770      	bx	lr
 800f660:	b299      	uxth	r1, r3
 800f662:	b909      	cbnz	r1, 800f668 <__lo0bits+0x2a>
 800f664:	2010      	movs	r0, #16
 800f666:	0c1b      	lsrs	r3, r3, #16
 800f668:	b2d9      	uxtb	r1, r3
 800f66a:	b909      	cbnz	r1, 800f670 <__lo0bits+0x32>
 800f66c:	3008      	adds	r0, #8
 800f66e:	0a1b      	lsrs	r3, r3, #8
 800f670:	0719      	lsls	r1, r3, #28
 800f672:	bf04      	itt	eq
 800f674:	091b      	lsreq	r3, r3, #4
 800f676:	3004      	addeq	r0, #4
 800f678:	0799      	lsls	r1, r3, #30
 800f67a:	bf04      	itt	eq
 800f67c:	089b      	lsreq	r3, r3, #2
 800f67e:	3002      	addeq	r0, #2
 800f680:	07d9      	lsls	r1, r3, #31
 800f682:	d403      	bmi.n	800f68c <__lo0bits+0x4e>
 800f684:	085b      	lsrs	r3, r3, #1
 800f686:	f100 0001 	add.w	r0, r0, #1
 800f68a:	d003      	beq.n	800f694 <__lo0bits+0x56>
 800f68c:	6013      	str	r3, [r2, #0]
 800f68e:	4770      	bx	lr
 800f690:	2000      	movs	r0, #0
 800f692:	4770      	bx	lr
 800f694:	2020      	movs	r0, #32
 800f696:	4770      	bx	lr

0800f698 <__i2b>:
 800f698:	b510      	push	{r4, lr}
 800f69a:	460c      	mov	r4, r1
 800f69c:	2101      	movs	r1, #1
 800f69e:	f7ff febd 	bl	800f41c <_Balloc>
 800f6a2:	4602      	mov	r2, r0
 800f6a4:	b928      	cbnz	r0, 800f6b2 <__i2b+0x1a>
 800f6a6:	f240 1145 	movw	r1, #325	@ 0x145
 800f6aa:	4b04      	ldr	r3, [pc, #16]	@ (800f6bc <__i2b+0x24>)
 800f6ac:	4804      	ldr	r0, [pc, #16]	@ (800f6c0 <__i2b+0x28>)
 800f6ae:	f001 fc29 	bl	8010f04 <__assert_func>
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	6144      	str	r4, [r0, #20]
 800f6b6:	6103      	str	r3, [r0, #16]
 800f6b8:	bd10      	pop	{r4, pc}
 800f6ba:	bf00      	nop
 800f6bc:	08011e2f 	.word	0x08011e2f
 800f6c0:	08011e40 	.word	0x08011e40

0800f6c4 <__multiply>:
 800f6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6c8:	4614      	mov	r4, r2
 800f6ca:	690a      	ldr	r2, [r1, #16]
 800f6cc:	6923      	ldr	r3, [r4, #16]
 800f6ce:	460f      	mov	r7, r1
 800f6d0:	429a      	cmp	r2, r3
 800f6d2:	bfa2      	ittt	ge
 800f6d4:	4623      	movge	r3, r4
 800f6d6:	460c      	movge	r4, r1
 800f6d8:	461f      	movge	r7, r3
 800f6da:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f6de:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f6e2:	68a3      	ldr	r3, [r4, #8]
 800f6e4:	6861      	ldr	r1, [r4, #4]
 800f6e6:	eb0a 0609 	add.w	r6, sl, r9
 800f6ea:	42b3      	cmp	r3, r6
 800f6ec:	b085      	sub	sp, #20
 800f6ee:	bfb8      	it	lt
 800f6f0:	3101      	addlt	r1, #1
 800f6f2:	f7ff fe93 	bl	800f41c <_Balloc>
 800f6f6:	b930      	cbnz	r0, 800f706 <__multiply+0x42>
 800f6f8:	4602      	mov	r2, r0
 800f6fa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f6fe:	4b43      	ldr	r3, [pc, #268]	@ (800f80c <__multiply+0x148>)
 800f700:	4843      	ldr	r0, [pc, #268]	@ (800f810 <__multiply+0x14c>)
 800f702:	f001 fbff 	bl	8010f04 <__assert_func>
 800f706:	f100 0514 	add.w	r5, r0, #20
 800f70a:	462b      	mov	r3, r5
 800f70c:	2200      	movs	r2, #0
 800f70e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f712:	4543      	cmp	r3, r8
 800f714:	d321      	bcc.n	800f75a <__multiply+0x96>
 800f716:	f107 0114 	add.w	r1, r7, #20
 800f71a:	f104 0214 	add.w	r2, r4, #20
 800f71e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f722:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f726:	9302      	str	r3, [sp, #8]
 800f728:	1b13      	subs	r3, r2, r4
 800f72a:	3b15      	subs	r3, #21
 800f72c:	f023 0303 	bic.w	r3, r3, #3
 800f730:	3304      	adds	r3, #4
 800f732:	f104 0715 	add.w	r7, r4, #21
 800f736:	42ba      	cmp	r2, r7
 800f738:	bf38      	it	cc
 800f73a:	2304      	movcc	r3, #4
 800f73c:	9301      	str	r3, [sp, #4]
 800f73e:	9b02      	ldr	r3, [sp, #8]
 800f740:	9103      	str	r1, [sp, #12]
 800f742:	428b      	cmp	r3, r1
 800f744:	d80c      	bhi.n	800f760 <__multiply+0x9c>
 800f746:	2e00      	cmp	r6, #0
 800f748:	dd03      	ble.n	800f752 <__multiply+0x8e>
 800f74a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d05a      	beq.n	800f808 <__multiply+0x144>
 800f752:	6106      	str	r6, [r0, #16]
 800f754:	b005      	add	sp, #20
 800f756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f75a:	f843 2b04 	str.w	r2, [r3], #4
 800f75e:	e7d8      	b.n	800f712 <__multiply+0x4e>
 800f760:	f8b1 a000 	ldrh.w	sl, [r1]
 800f764:	f1ba 0f00 	cmp.w	sl, #0
 800f768:	d023      	beq.n	800f7b2 <__multiply+0xee>
 800f76a:	46a9      	mov	r9, r5
 800f76c:	f04f 0c00 	mov.w	ip, #0
 800f770:	f104 0e14 	add.w	lr, r4, #20
 800f774:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f778:	f8d9 3000 	ldr.w	r3, [r9]
 800f77c:	fa1f fb87 	uxth.w	fp, r7
 800f780:	b29b      	uxth	r3, r3
 800f782:	fb0a 330b 	mla	r3, sl, fp, r3
 800f786:	4463      	add	r3, ip
 800f788:	f8d9 c000 	ldr.w	ip, [r9]
 800f78c:	0c3f      	lsrs	r7, r7, #16
 800f78e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800f792:	fb0a c707 	mla	r7, sl, r7, ip
 800f796:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f79a:	b29b      	uxth	r3, r3
 800f79c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f7a0:	4572      	cmp	r2, lr
 800f7a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f7a6:	f849 3b04 	str.w	r3, [r9], #4
 800f7aa:	d8e3      	bhi.n	800f774 <__multiply+0xb0>
 800f7ac:	9b01      	ldr	r3, [sp, #4]
 800f7ae:	f845 c003 	str.w	ip, [r5, r3]
 800f7b2:	9b03      	ldr	r3, [sp, #12]
 800f7b4:	3104      	adds	r1, #4
 800f7b6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f7ba:	f1b9 0f00 	cmp.w	r9, #0
 800f7be:	d021      	beq.n	800f804 <__multiply+0x140>
 800f7c0:	46ae      	mov	lr, r5
 800f7c2:	f04f 0a00 	mov.w	sl, #0
 800f7c6:	682b      	ldr	r3, [r5, #0]
 800f7c8:	f104 0c14 	add.w	ip, r4, #20
 800f7cc:	f8bc b000 	ldrh.w	fp, [ip]
 800f7d0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f7d4:	b29b      	uxth	r3, r3
 800f7d6:	fb09 770b 	mla	r7, r9, fp, r7
 800f7da:	4457      	add	r7, sl
 800f7dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f7e0:	f84e 3b04 	str.w	r3, [lr], #4
 800f7e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f7e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f7ec:	f8be 3000 	ldrh.w	r3, [lr]
 800f7f0:	4562      	cmp	r2, ip
 800f7f2:	fb09 330a 	mla	r3, r9, sl, r3
 800f7f6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f7fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f7fe:	d8e5      	bhi.n	800f7cc <__multiply+0x108>
 800f800:	9f01      	ldr	r7, [sp, #4]
 800f802:	51eb      	str	r3, [r5, r7]
 800f804:	3504      	adds	r5, #4
 800f806:	e79a      	b.n	800f73e <__multiply+0x7a>
 800f808:	3e01      	subs	r6, #1
 800f80a:	e79c      	b.n	800f746 <__multiply+0x82>
 800f80c:	08011e2f 	.word	0x08011e2f
 800f810:	08011e40 	.word	0x08011e40

0800f814 <__pow5mult>:
 800f814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f818:	4615      	mov	r5, r2
 800f81a:	f012 0203 	ands.w	r2, r2, #3
 800f81e:	4607      	mov	r7, r0
 800f820:	460e      	mov	r6, r1
 800f822:	d007      	beq.n	800f834 <__pow5mult+0x20>
 800f824:	4c25      	ldr	r4, [pc, #148]	@ (800f8bc <__pow5mult+0xa8>)
 800f826:	3a01      	subs	r2, #1
 800f828:	2300      	movs	r3, #0
 800f82a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f82e:	f7ff fe57 	bl	800f4e0 <__multadd>
 800f832:	4606      	mov	r6, r0
 800f834:	10ad      	asrs	r5, r5, #2
 800f836:	d03d      	beq.n	800f8b4 <__pow5mult+0xa0>
 800f838:	69fc      	ldr	r4, [r7, #28]
 800f83a:	b97c      	cbnz	r4, 800f85c <__pow5mult+0x48>
 800f83c:	2010      	movs	r0, #16
 800f83e:	f7ff fd37 	bl	800f2b0 <malloc>
 800f842:	4602      	mov	r2, r0
 800f844:	61f8      	str	r0, [r7, #28]
 800f846:	b928      	cbnz	r0, 800f854 <__pow5mult+0x40>
 800f848:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f84c:	4b1c      	ldr	r3, [pc, #112]	@ (800f8c0 <__pow5mult+0xac>)
 800f84e:	481d      	ldr	r0, [pc, #116]	@ (800f8c4 <__pow5mult+0xb0>)
 800f850:	f001 fb58 	bl	8010f04 <__assert_func>
 800f854:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f858:	6004      	str	r4, [r0, #0]
 800f85a:	60c4      	str	r4, [r0, #12]
 800f85c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f860:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f864:	b94c      	cbnz	r4, 800f87a <__pow5mult+0x66>
 800f866:	f240 2171 	movw	r1, #625	@ 0x271
 800f86a:	4638      	mov	r0, r7
 800f86c:	f7ff ff14 	bl	800f698 <__i2b>
 800f870:	2300      	movs	r3, #0
 800f872:	4604      	mov	r4, r0
 800f874:	f8c8 0008 	str.w	r0, [r8, #8]
 800f878:	6003      	str	r3, [r0, #0]
 800f87a:	f04f 0900 	mov.w	r9, #0
 800f87e:	07eb      	lsls	r3, r5, #31
 800f880:	d50a      	bpl.n	800f898 <__pow5mult+0x84>
 800f882:	4631      	mov	r1, r6
 800f884:	4622      	mov	r2, r4
 800f886:	4638      	mov	r0, r7
 800f888:	f7ff ff1c 	bl	800f6c4 <__multiply>
 800f88c:	4680      	mov	r8, r0
 800f88e:	4631      	mov	r1, r6
 800f890:	4638      	mov	r0, r7
 800f892:	f7ff fe03 	bl	800f49c <_Bfree>
 800f896:	4646      	mov	r6, r8
 800f898:	106d      	asrs	r5, r5, #1
 800f89a:	d00b      	beq.n	800f8b4 <__pow5mult+0xa0>
 800f89c:	6820      	ldr	r0, [r4, #0]
 800f89e:	b938      	cbnz	r0, 800f8b0 <__pow5mult+0x9c>
 800f8a0:	4622      	mov	r2, r4
 800f8a2:	4621      	mov	r1, r4
 800f8a4:	4638      	mov	r0, r7
 800f8a6:	f7ff ff0d 	bl	800f6c4 <__multiply>
 800f8aa:	6020      	str	r0, [r4, #0]
 800f8ac:	f8c0 9000 	str.w	r9, [r0]
 800f8b0:	4604      	mov	r4, r0
 800f8b2:	e7e4      	b.n	800f87e <__pow5mult+0x6a>
 800f8b4:	4630      	mov	r0, r6
 800f8b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8ba:	bf00      	nop
 800f8bc:	08011e9c 	.word	0x08011e9c
 800f8c0:	08011dc0 	.word	0x08011dc0
 800f8c4:	08011e40 	.word	0x08011e40

0800f8c8 <__lshift>:
 800f8c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8cc:	460c      	mov	r4, r1
 800f8ce:	4607      	mov	r7, r0
 800f8d0:	4691      	mov	r9, r2
 800f8d2:	6923      	ldr	r3, [r4, #16]
 800f8d4:	6849      	ldr	r1, [r1, #4]
 800f8d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f8da:	68a3      	ldr	r3, [r4, #8]
 800f8dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f8e0:	f108 0601 	add.w	r6, r8, #1
 800f8e4:	42b3      	cmp	r3, r6
 800f8e6:	db0b      	blt.n	800f900 <__lshift+0x38>
 800f8e8:	4638      	mov	r0, r7
 800f8ea:	f7ff fd97 	bl	800f41c <_Balloc>
 800f8ee:	4605      	mov	r5, r0
 800f8f0:	b948      	cbnz	r0, 800f906 <__lshift+0x3e>
 800f8f2:	4602      	mov	r2, r0
 800f8f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f8f8:	4b27      	ldr	r3, [pc, #156]	@ (800f998 <__lshift+0xd0>)
 800f8fa:	4828      	ldr	r0, [pc, #160]	@ (800f99c <__lshift+0xd4>)
 800f8fc:	f001 fb02 	bl	8010f04 <__assert_func>
 800f900:	3101      	adds	r1, #1
 800f902:	005b      	lsls	r3, r3, #1
 800f904:	e7ee      	b.n	800f8e4 <__lshift+0x1c>
 800f906:	2300      	movs	r3, #0
 800f908:	f100 0114 	add.w	r1, r0, #20
 800f90c:	f100 0210 	add.w	r2, r0, #16
 800f910:	4618      	mov	r0, r3
 800f912:	4553      	cmp	r3, sl
 800f914:	db33      	blt.n	800f97e <__lshift+0xb6>
 800f916:	6920      	ldr	r0, [r4, #16]
 800f918:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f91c:	f104 0314 	add.w	r3, r4, #20
 800f920:	f019 091f 	ands.w	r9, r9, #31
 800f924:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f928:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f92c:	d02b      	beq.n	800f986 <__lshift+0xbe>
 800f92e:	468a      	mov	sl, r1
 800f930:	2200      	movs	r2, #0
 800f932:	f1c9 0e20 	rsb	lr, r9, #32
 800f936:	6818      	ldr	r0, [r3, #0]
 800f938:	fa00 f009 	lsl.w	r0, r0, r9
 800f93c:	4310      	orrs	r0, r2
 800f93e:	f84a 0b04 	str.w	r0, [sl], #4
 800f942:	f853 2b04 	ldr.w	r2, [r3], #4
 800f946:	459c      	cmp	ip, r3
 800f948:	fa22 f20e 	lsr.w	r2, r2, lr
 800f94c:	d8f3      	bhi.n	800f936 <__lshift+0x6e>
 800f94e:	ebac 0304 	sub.w	r3, ip, r4
 800f952:	3b15      	subs	r3, #21
 800f954:	f023 0303 	bic.w	r3, r3, #3
 800f958:	3304      	adds	r3, #4
 800f95a:	f104 0015 	add.w	r0, r4, #21
 800f95e:	4584      	cmp	ip, r0
 800f960:	bf38      	it	cc
 800f962:	2304      	movcc	r3, #4
 800f964:	50ca      	str	r2, [r1, r3]
 800f966:	b10a      	cbz	r2, 800f96c <__lshift+0xa4>
 800f968:	f108 0602 	add.w	r6, r8, #2
 800f96c:	3e01      	subs	r6, #1
 800f96e:	4638      	mov	r0, r7
 800f970:	4621      	mov	r1, r4
 800f972:	612e      	str	r6, [r5, #16]
 800f974:	f7ff fd92 	bl	800f49c <_Bfree>
 800f978:	4628      	mov	r0, r5
 800f97a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f97e:	f842 0f04 	str.w	r0, [r2, #4]!
 800f982:	3301      	adds	r3, #1
 800f984:	e7c5      	b.n	800f912 <__lshift+0x4a>
 800f986:	3904      	subs	r1, #4
 800f988:	f853 2b04 	ldr.w	r2, [r3], #4
 800f98c:	459c      	cmp	ip, r3
 800f98e:	f841 2f04 	str.w	r2, [r1, #4]!
 800f992:	d8f9      	bhi.n	800f988 <__lshift+0xc0>
 800f994:	e7ea      	b.n	800f96c <__lshift+0xa4>
 800f996:	bf00      	nop
 800f998:	08011e2f 	.word	0x08011e2f
 800f99c:	08011e40 	.word	0x08011e40

0800f9a0 <__mcmp>:
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	690a      	ldr	r2, [r1, #16]
 800f9a4:	6900      	ldr	r0, [r0, #16]
 800f9a6:	b530      	push	{r4, r5, lr}
 800f9a8:	1a80      	subs	r0, r0, r2
 800f9aa:	d10e      	bne.n	800f9ca <__mcmp+0x2a>
 800f9ac:	3314      	adds	r3, #20
 800f9ae:	3114      	adds	r1, #20
 800f9b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f9b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f9b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f9bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f9c0:	4295      	cmp	r5, r2
 800f9c2:	d003      	beq.n	800f9cc <__mcmp+0x2c>
 800f9c4:	d205      	bcs.n	800f9d2 <__mcmp+0x32>
 800f9c6:	f04f 30ff 	mov.w	r0, #4294967295
 800f9ca:	bd30      	pop	{r4, r5, pc}
 800f9cc:	42a3      	cmp	r3, r4
 800f9ce:	d3f3      	bcc.n	800f9b8 <__mcmp+0x18>
 800f9d0:	e7fb      	b.n	800f9ca <__mcmp+0x2a>
 800f9d2:	2001      	movs	r0, #1
 800f9d4:	e7f9      	b.n	800f9ca <__mcmp+0x2a>
	...

0800f9d8 <__mdiff>:
 800f9d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9dc:	4689      	mov	r9, r1
 800f9de:	4606      	mov	r6, r0
 800f9e0:	4611      	mov	r1, r2
 800f9e2:	4648      	mov	r0, r9
 800f9e4:	4614      	mov	r4, r2
 800f9e6:	f7ff ffdb 	bl	800f9a0 <__mcmp>
 800f9ea:	1e05      	subs	r5, r0, #0
 800f9ec:	d112      	bne.n	800fa14 <__mdiff+0x3c>
 800f9ee:	4629      	mov	r1, r5
 800f9f0:	4630      	mov	r0, r6
 800f9f2:	f7ff fd13 	bl	800f41c <_Balloc>
 800f9f6:	4602      	mov	r2, r0
 800f9f8:	b928      	cbnz	r0, 800fa06 <__mdiff+0x2e>
 800f9fa:	f240 2137 	movw	r1, #567	@ 0x237
 800f9fe:	4b3e      	ldr	r3, [pc, #248]	@ (800faf8 <__mdiff+0x120>)
 800fa00:	483e      	ldr	r0, [pc, #248]	@ (800fafc <__mdiff+0x124>)
 800fa02:	f001 fa7f 	bl	8010f04 <__assert_func>
 800fa06:	2301      	movs	r3, #1
 800fa08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fa0c:	4610      	mov	r0, r2
 800fa0e:	b003      	add	sp, #12
 800fa10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa14:	bfbc      	itt	lt
 800fa16:	464b      	movlt	r3, r9
 800fa18:	46a1      	movlt	r9, r4
 800fa1a:	4630      	mov	r0, r6
 800fa1c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fa20:	bfba      	itte	lt
 800fa22:	461c      	movlt	r4, r3
 800fa24:	2501      	movlt	r5, #1
 800fa26:	2500      	movge	r5, #0
 800fa28:	f7ff fcf8 	bl	800f41c <_Balloc>
 800fa2c:	4602      	mov	r2, r0
 800fa2e:	b918      	cbnz	r0, 800fa38 <__mdiff+0x60>
 800fa30:	f240 2145 	movw	r1, #581	@ 0x245
 800fa34:	4b30      	ldr	r3, [pc, #192]	@ (800faf8 <__mdiff+0x120>)
 800fa36:	e7e3      	b.n	800fa00 <__mdiff+0x28>
 800fa38:	f100 0b14 	add.w	fp, r0, #20
 800fa3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fa40:	f109 0310 	add.w	r3, r9, #16
 800fa44:	60c5      	str	r5, [r0, #12]
 800fa46:	f04f 0c00 	mov.w	ip, #0
 800fa4a:	f109 0514 	add.w	r5, r9, #20
 800fa4e:	46d9      	mov	r9, fp
 800fa50:	6926      	ldr	r6, [r4, #16]
 800fa52:	f104 0e14 	add.w	lr, r4, #20
 800fa56:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fa5a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fa5e:	9301      	str	r3, [sp, #4]
 800fa60:	9b01      	ldr	r3, [sp, #4]
 800fa62:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fa66:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fa6a:	b281      	uxth	r1, r0
 800fa6c:	9301      	str	r3, [sp, #4]
 800fa6e:	fa1f f38a 	uxth.w	r3, sl
 800fa72:	1a5b      	subs	r3, r3, r1
 800fa74:	0c00      	lsrs	r0, r0, #16
 800fa76:	4463      	add	r3, ip
 800fa78:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fa7c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fa80:	b29b      	uxth	r3, r3
 800fa82:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fa86:	4576      	cmp	r6, lr
 800fa88:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fa8c:	f849 3b04 	str.w	r3, [r9], #4
 800fa90:	d8e6      	bhi.n	800fa60 <__mdiff+0x88>
 800fa92:	1b33      	subs	r3, r6, r4
 800fa94:	3b15      	subs	r3, #21
 800fa96:	f023 0303 	bic.w	r3, r3, #3
 800fa9a:	3415      	adds	r4, #21
 800fa9c:	3304      	adds	r3, #4
 800fa9e:	42a6      	cmp	r6, r4
 800faa0:	bf38      	it	cc
 800faa2:	2304      	movcc	r3, #4
 800faa4:	441d      	add	r5, r3
 800faa6:	445b      	add	r3, fp
 800faa8:	461e      	mov	r6, r3
 800faaa:	462c      	mov	r4, r5
 800faac:	4544      	cmp	r4, r8
 800faae:	d30e      	bcc.n	800face <__mdiff+0xf6>
 800fab0:	f108 0103 	add.w	r1, r8, #3
 800fab4:	1b49      	subs	r1, r1, r5
 800fab6:	f021 0103 	bic.w	r1, r1, #3
 800faba:	3d03      	subs	r5, #3
 800fabc:	45a8      	cmp	r8, r5
 800fabe:	bf38      	it	cc
 800fac0:	2100      	movcc	r1, #0
 800fac2:	440b      	add	r3, r1
 800fac4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fac8:	b199      	cbz	r1, 800faf2 <__mdiff+0x11a>
 800faca:	6117      	str	r7, [r2, #16]
 800facc:	e79e      	b.n	800fa0c <__mdiff+0x34>
 800face:	46e6      	mov	lr, ip
 800fad0:	f854 1b04 	ldr.w	r1, [r4], #4
 800fad4:	fa1f fc81 	uxth.w	ip, r1
 800fad8:	44f4      	add	ip, lr
 800fada:	0c08      	lsrs	r0, r1, #16
 800fadc:	4471      	add	r1, lr
 800fade:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fae2:	b289      	uxth	r1, r1
 800fae4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fae8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800faec:	f846 1b04 	str.w	r1, [r6], #4
 800faf0:	e7dc      	b.n	800faac <__mdiff+0xd4>
 800faf2:	3f01      	subs	r7, #1
 800faf4:	e7e6      	b.n	800fac4 <__mdiff+0xec>
 800faf6:	bf00      	nop
 800faf8:	08011e2f 	.word	0x08011e2f
 800fafc:	08011e40 	.word	0x08011e40

0800fb00 <__ulp>:
 800fb00:	4b0e      	ldr	r3, [pc, #56]	@ (800fb3c <__ulp+0x3c>)
 800fb02:	400b      	ands	r3, r1
 800fb04:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	dc08      	bgt.n	800fb1e <__ulp+0x1e>
 800fb0c:	425b      	negs	r3, r3
 800fb0e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800fb12:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fb16:	da04      	bge.n	800fb22 <__ulp+0x22>
 800fb18:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fb1c:	4113      	asrs	r3, r2
 800fb1e:	2200      	movs	r2, #0
 800fb20:	e008      	b.n	800fb34 <__ulp+0x34>
 800fb22:	f1a2 0314 	sub.w	r3, r2, #20
 800fb26:	2b1e      	cmp	r3, #30
 800fb28:	bfd6      	itet	le
 800fb2a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800fb2e:	2201      	movgt	r2, #1
 800fb30:	40da      	lsrle	r2, r3
 800fb32:	2300      	movs	r3, #0
 800fb34:	4619      	mov	r1, r3
 800fb36:	4610      	mov	r0, r2
 800fb38:	4770      	bx	lr
 800fb3a:	bf00      	nop
 800fb3c:	7ff00000 	.word	0x7ff00000

0800fb40 <__b2d>:
 800fb40:	6902      	ldr	r2, [r0, #16]
 800fb42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb44:	f100 0614 	add.w	r6, r0, #20
 800fb48:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800fb4c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800fb50:	4f1e      	ldr	r7, [pc, #120]	@ (800fbcc <__b2d+0x8c>)
 800fb52:	4620      	mov	r0, r4
 800fb54:	f7ff fd54 	bl	800f600 <__hi0bits>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	f1c0 0020 	rsb	r0, r0, #32
 800fb5e:	2b0a      	cmp	r3, #10
 800fb60:	f1a2 0504 	sub.w	r5, r2, #4
 800fb64:	6008      	str	r0, [r1, #0]
 800fb66:	dc12      	bgt.n	800fb8e <__b2d+0x4e>
 800fb68:	42ae      	cmp	r6, r5
 800fb6a:	bf2c      	ite	cs
 800fb6c:	2200      	movcs	r2, #0
 800fb6e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800fb72:	f1c3 0c0b 	rsb	ip, r3, #11
 800fb76:	3315      	adds	r3, #21
 800fb78:	fa24 fe0c 	lsr.w	lr, r4, ip
 800fb7c:	fa04 f303 	lsl.w	r3, r4, r3
 800fb80:	fa22 f20c 	lsr.w	r2, r2, ip
 800fb84:	ea4e 0107 	orr.w	r1, lr, r7
 800fb88:	431a      	orrs	r2, r3
 800fb8a:	4610      	mov	r0, r2
 800fb8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb8e:	42ae      	cmp	r6, r5
 800fb90:	bf36      	itet	cc
 800fb92:	f1a2 0508 	subcc.w	r5, r2, #8
 800fb96:	2200      	movcs	r2, #0
 800fb98:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800fb9c:	3b0b      	subs	r3, #11
 800fb9e:	d012      	beq.n	800fbc6 <__b2d+0x86>
 800fba0:	f1c3 0720 	rsb	r7, r3, #32
 800fba4:	fa22 f107 	lsr.w	r1, r2, r7
 800fba8:	409c      	lsls	r4, r3
 800fbaa:	430c      	orrs	r4, r1
 800fbac:	42b5      	cmp	r5, r6
 800fbae:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800fbb2:	bf94      	ite	ls
 800fbb4:	2400      	movls	r4, #0
 800fbb6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800fbba:	409a      	lsls	r2, r3
 800fbbc:	40fc      	lsrs	r4, r7
 800fbbe:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800fbc2:	4322      	orrs	r2, r4
 800fbc4:	e7e1      	b.n	800fb8a <__b2d+0x4a>
 800fbc6:	ea44 0107 	orr.w	r1, r4, r7
 800fbca:	e7de      	b.n	800fb8a <__b2d+0x4a>
 800fbcc:	3ff00000 	.word	0x3ff00000

0800fbd0 <__d2b>:
 800fbd0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800fbd4:	2101      	movs	r1, #1
 800fbd6:	4690      	mov	r8, r2
 800fbd8:	4699      	mov	r9, r3
 800fbda:	9e08      	ldr	r6, [sp, #32]
 800fbdc:	f7ff fc1e 	bl	800f41c <_Balloc>
 800fbe0:	4604      	mov	r4, r0
 800fbe2:	b930      	cbnz	r0, 800fbf2 <__d2b+0x22>
 800fbe4:	4602      	mov	r2, r0
 800fbe6:	f240 310f 	movw	r1, #783	@ 0x30f
 800fbea:	4b23      	ldr	r3, [pc, #140]	@ (800fc78 <__d2b+0xa8>)
 800fbec:	4823      	ldr	r0, [pc, #140]	@ (800fc7c <__d2b+0xac>)
 800fbee:	f001 f989 	bl	8010f04 <__assert_func>
 800fbf2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fbf6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fbfa:	b10d      	cbz	r5, 800fc00 <__d2b+0x30>
 800fbfc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fc00:	9301      	str	r3, [sp, #4]
 800fc02:	f1b8 0300 	subs.w	r3, r8, #0
 800fc06:	d024      	beq.n	800fc52 <__d2b+0x82>
 800fc08:	4668      	mov	r0, sp
 800fc0a:	9300      	str	r3, [sp, #0]
 800fc0c:	f7ff fd17 	bl	800f63e <__lo0bits>
 800fc10:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fc14:	b1d8      	cbz	r0, 800fc4e <__d2b+0x7e>
 800fc16:	f1c0 0320 	rsb	r3, r0, #32
 800fc1a:	fa02 f303 	lsl.w	r3, r2, r3
 800fc1e:	430b      	orrs	r3, r1
 800fc20:	40c2      	lsrs	r2, r0
 800fc22:	6163      	str	r3, [r4, #20]
 800fc24:	9201      	str	r2, [sp, #4]
 800fc26:	9b01      	ldr	r3, [sp, #4]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	bf0c      	ite	eq
 800fc2c:	2201      	moveq	r2, #1
 800fc2e:	2202      	movne	r2, #2
 800fc30:	61a3      	str	r3, [r4, #24]
 800fc32:	6122      	str	r2, [r4, #16]
 800fc34:	b1ad      	cbz	r5, 800fc62 <__d2b+0x92>
 800fc36:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fc3a:	4405      	add	r5, r0
 800fc3c:	6035      	str	r5, [r6, #0]
 800fc3e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fc42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc44:	6018      	str	r0, [r3, #0]
 800fc46:	4620      	mov	r0, r4
 800fc48:	b002      	add	sp, #8
 800fc4a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800fc4e:	6161      	str	r1, [r4, #20]
 800fc50:	e7e9      	b.n	800fc26 <__d2b+0x56>
 800fc52:	a801      	add	r0, sp, #4
 800fc54:	f7ff fcf3 	bl	800f63e <__lo0bits>
 800fc58:	9b01      	ldr	r3, [sp, #4]
 800fc5a:	2201      	movs	r2, #1
 800fc5c:	6163      	str	r3, [r4, #20]
 800fc5e:	3020      	adds	r0, #32
 800fc60:	e7e7      	b.n	800fc32 <__d2b+0x62>
 800fc62:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fc66:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fc6a:	6030      	str	r0, [r6, #0]
 800fc6c:	6918      	ldr	r0, [r3, #16]
 800fc6e:	f7ff fcc7 	bl	800f600 <__hi0bits>
 800fc72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fc76:	e7e4      	b.n	800fc42 <__d2b+0x72>
 800fc78:	08011e2f 	.word	0x08011e2f
 800fc7c:	08011e40 	.word	0x08011e40

0800fc80 <__ratio>:
 800fc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc84:	b085      	sub	sp, #20
 800fc86:	e9cd 1000 	strd	r1, r0, [sp]
 800fc8a:	a902      	add	r1, sp, #8
 800fc8c:	f7ff ff58 	bl	800fb40 <__b2d>
 800fc90:	468b      	mov	fp, r1
 800fc92:	4606      	mov	r6, r0
 800fc94:	460f      	mov	r7, r1
 800fc96:	9800      	ldr	r0, [sp, #0]
 800fc98:	a903      	add	r1, sp, #12
 800fc9a:	f7ff ff51 	bl	800fb40 <__b2d>
 800fc9e:	460d      	mov	r5, r1
 800fca0:	9b01      	ldr	r3, [sp, #4]
 800fca2:	4689      	mov	r9, r1
 800fca4:	6919      	ldr	r1, [r3, #16]
 800fca6:	9b00      	ldr	r3, [sp, #0]
 800fca8:	4604      	mov	r4, r0
 800fcaa:	691b      	ldr	r3, [r3, #16]
 800fcac:	4630      	mov	r0, r6
 800fcae:	1ac9      	subs	r1, r1, r3
 800fcb0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fcb4:	1a9b      	subs	r3, r3, r2
 800fcb6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	bfcd      	iteet	gt
 800fcbe:	463a      	movgt	r2, r7
 800fcc0:	462a      	movle	r2, r5
 800fcc2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fcc6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800fcca:	bfd8      	it	le
 800fccc:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800fcd0:	464b      	mov	r3, r9
 800fcd2:	4622      	mov	r2, r4
 800fcd4:	4659      	mov	r1, fp
 800fcd6:	f7f0 fd29 	bl	800072c <__aeabi_ddiv>
 800fcda:	b005      	add	sp, #20
 800fcdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fce0 <__copybits>:
 800fce0:	3901      	subs	r1, #1
 800fce2:	b570      	push	{r4, r5, r6, lr}
 800fce4:	1149      	asrs	r1, r1, #5
 800fce6:	6914      	ldr	r4, [r2, #16]
 800fce8:	3101      	adds	r1, #1
 800fcea:	f102 0314 	add.w	r3, r2, #20
 800fcee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fcf2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fcf6:	1f05      	subs	r5, r0, #4
 800fcf8:	42a3      	cmp	r3, r4
 800fcfa:	d30c      	bcc.n	800fd16 <__copybits+0x36>
 800fcfc:	1aa3      	subs	r3, r4, r2
 800fcfe:	3b11      	subs	r3, #17
 800fd00:	f023 0303 	bic.w	r3, r3, #3
 800fd04:	3211      	adds	r2, #17
 800fd06:	42a2      	cmp	r2, r4
 800fd08:	bf88      	it	hi
 800fd0a:	2300      	movhi	r3, #0
 800fd0c:	4418      	add	r0, r3
 800fd0e:	2300      	movs	r3, #0
 800fd10:	4288      	cmp	r0, r1
 800fd12:	d305      	bcc.n	800fd20 <__copybits+0x40>
 800fd14:	bd70      	pop	{r4, r5, r6, pc}
 800fd16:	f853 6b04 	ldr.w	r6, [r3], #4
 800fd1a:	f845 6f04 	str.w	r6, [r5, #4]!
 800fd1e:	e7eb      	b.n	800fcf8 <__copybits+0x18>
 800fd20:	f840 3b04 	str.w	r3, [r0], #4
 800fd24:	e7f4      	b.n	800fd10 <__copybits+0x30>

0800fd26 <__any_on>:
 800fd26:	f100 0214 	add.w	r2, r0, #20
 800fd2a:	6900      	ldr	r0, [r0, #16]
 800fd2c:	114b      	asrs	r3, r1, #5
 800fd2e:	4298      	cmp	r0, r3
 800fd30:	b510      	push	{r4, lr}
 800fd32:	db11      	blt.n	800fd58 <__any_on+0x32>
 800fd34:	dd0a      	ble.n	800fd4c <__any_on+0x26>
 800fd36:	f011 011f 	ands.w	r1, r1, #31
 800fd3a:	d007      	beq.n	800fd4c <__any_on+0x26>
 800fd3c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fd40:	fa24 f001 	lsr.w	r0, r4, r1
 800fd44:	fa00 f101 	lsl.w	r1, r0, r1
 800fd48:	428c      	cmp	r4, r1
 800fd4a:	d10b      	bne.n	800fd64 <__any_on+0x3e>
 800fd4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fd50:	4293      	cmp	r3, r2
 800fd52:	d803      	bhi.n	800fd5c <__any_on+0x36>
 800fd54:	2000      	movs	r0, #0
 800fd56:	bd10      	pop	{r4, pc}
 800fd58:	4603      	mov	r3, r0
 800fd5a:	e7f7      	b.n	800fd4c <__any_on+0x26>
 800fd5c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fd60:	2900      	cmp	r1, #0
 800fd62:	d0f5      	beq.n	800fd50 <__any_on+0x2a>
 800fd64:	2001      	movs	r0, #1
 800fd66:	e7f6      	b.n	800fd56 <__any_on+0x30>

0800fd68 <sulp>:
 800fd68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd6c:	460f      	mov	r7, r1
 800fd6e:	4690      	mov	r8, r2
 800fd70:	f7ff fec6 	bl	800fb00 <__ulp>
 800fd74:	4604      	mov	r4, r0
 800fd76:	460d      	mov	r5, r1
 800fd78:	f1b8 0f00 	cmp.w	r8, #0
 800fd7c:	d011      	beq.n	800fda2 <sulp+0x3a>
 800fd7e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800fd82:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	dd0b      	ble.n	800fda2 <sulp+0x3a>
 800fd8a:	2400      	movs	r4, #0
 800fd8c:	051b      	lsls	r3, r3, #20
 800fd8e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800fd92:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800fd96:	4622      	mov	r2, r4
 800fd98:	462b      	mov	r3, r5
 800fd9a:	f7f0 fb9d 	bl	80004d8 <__aeabi_dmul>
 800fd9e:	4604      	mov	r4, r0
 800fda0:	460d      	mov	r5, r1
 800fda2:	4620      	mov	r0, r4
 800fda4:	4629      	mov	r1, r5
 800fda6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdaa:	0000      	movs	r0, r0
 800fdac:	0000      	movs	r0, r0
	...

0800fdb0 <_strtod_l>:
 800fdb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdb4:	b09f      	sub	sp, #124	@ 0x7c
 800fdb6:	9217      	str	r2, [sp, #92]	@ 0x5c
 800fdb8:	2200      	movs	r2, #0
 800fdba:	460c      	mov	r4, r1
 800fdbc:	921a      	str	r2, [sp, #104]	@ 0x68
 800fdbe:	f04f 0a00 	mov.w	sl, #0
 800fdc2:	f04f 0b00 	mov.w	fp, #0
 800fdc6:	460a      	mov	r2, r1
 800fdc8:	9005      	str	r0, [sp, #20]
 800fdca:	9219      	str	r2, [sp, #100]	@ 0x64
 800fdcc:	7811      	ldrb	r1, [r2, #0]
 800fdce:	292b      	cmp	r1, #43	@ 0x2b
 800fdd0:	d048      	beq.n	800fe64 <_strtod_l+0xb4>
 800fdd2:	d836      	bhi.n	800fe42 <_strtod_l+0x92>
 800fdd4:	290d      	cmp	r1, #13
 800fdd6:	d830      	bhi.n	800fe3a <_strtod_l+0x8a>
 800fdd8:	2908      	cmp	r1, #8
 800fdda:	d830      	bhi.n	800fe3e <_strtod_l+0x8e>
 800fddc:	2900      	cmp	r1, #0
 800fdde:	d039      	beq.n	800fe54 <_strtod_l+0xa4>
 800fde0:	2200      	movs	r2, #0
 800fde2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800fde4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800fde6:	782a      	ldrb	r2, [r5, #0]
 800fde8:	2a30      	cmp	r2, #48	@ 0x30
 800fdea:	f040 80b1 	bne.w	800ff50 <_strtod_l+0x1a0>
 800fdee:	786a      	ldrb	r2, [r5, #1]
 800fdf0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fdf4:	2a58      	cmp	r2, #88	@ 0x58
 800fdf6:	d16c      	bne.n	800fed2 <_strtod_l+0x122>
 800fdf8:	9302      	str	r3, [sp, #8]
 800fdfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fdfc:	4a8e      	ldr	r2, [pc, #568]	@ (8010038 <_strtod_l+0x288>)
 800fdfe:	9301      	str	r3, [sp, #4]
 800fe00:	ab1a      	add	r3, sp, #104	@ 0x68
 800fe02:	9300      	str	r3, [sp, #0]
 800fe04:	9805      	ldr	r0, [sp, #20]
 800fe06:	ab1b      	add	r3, sp, #108	@ 0x6c
 800fe08:	a919      	add	r1, sp, #100	@ 0x64
 800fe0a:	f001 f915 	bl	8011038 <__gethex>
 800fe0e:	f010 060f 	ands.w	r6, r0, #15
 800fe12:	4604      	mov	r4, r0
 800fe14:	d005      	beq.n	800fe22 <_strtod_l+0x72>
 800fe16:	2e06      	cmp	r6, #6
 800fe18:	d126      	bne.n	800fe68 <_strtod_l+0xb8>
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	3501      	adds	r5, #1
 800fe1e:	9519      	str	r5, [sp, #100]	@ 0x64
 800fe20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fe22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	f040 8584 	bne.w	8010932 <_strtod_l+0xb82>
 800fe2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fe2c:	b1bb      	cbz	r3, 800fe5e <_strtod_l+0xae>
 800fe2e:	4650      	mov	r0, sl
 800fe30:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800fe34:	b01f      	add	sp, #124	@ 0x7c
 800fe36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe3a:	2920      	cmp	r1, #32
 800fe3c:	d1d0      	bne.n	800fde0 <_strtod_l+0x30>
 800fe3e:	3201      	adds	r2, #1
 800fe40:	e7c3      	b.n	800fdca <_strtod_l+0x1a>
 800fe42:	292d      	cmp	r1, #45	@ 0x2d
 800fe44:	d1cc      	bne.n	800fde0 <_strtod_l+0x30>
 800fe46:	2101      	movs	r1, #1
 800fe48:	910b      	str	r1, [sp, #44]	@ 0x2c
 800fe4a:	1c51      	adds	r1, r2, #1
 800fe4c:	9119      	str	r1, [sp, #100]	@ 0x64
 800fe4e:	7852      	ldrb	r2, [r2, #1]
 800fe50:	2a00      	cmp	r2, #0
 800fe52:	d1c7      	bne.n	800fde4 <_strtod_l+0x34>
 800fe54:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fe56:	9419      	str	r4, [sp, #100]	@ 0x64
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	f040 8568 	bne.w	801092e <_strtod_l+0xb7e>
 800fe5e:	4650      	mov	r0, sl
 800fe60:	4659      	mov	r1, fp
 800fe62:	e7e7      	b.n	800fe34 <_strtod_l+0x84>
 800fe64:	2100      	movs	r1, #0
 800fe66:	e7ef      	b.n	800fe48 <_strtod_l+0x98>
 800fe68:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fe6a:	b13a      	cbz	r2, 800fe7c <_strtod_l+0xcc>
 800fe6c:	2135      	movs	r1, #53	@ 0x35
 800fe6e:	a81c      	add	r0, sp, #112	@ 0x70
 800fe70:	f7ff ff36 	bl	800fce0 <__copybits>
 800fe74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fe76:	9805      	ldr	r0, [sp, #20]
 800fe78:	f7ff fb10 	bl	800f49c <_Bfree>
 800fe7c:	3e01      	subs	r6, #1
 800fe7e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800fe80:	2e04      	cmp	r6, #4
 800fe82:	d806      	bhi.n	800fe92 <_strtod_l+0xe2>
 800fe84:	e8df f006 	tbb	[pc, r6]
 800fe88:	201d0314 	.word	0x201d0314
 800fe8c:	14          	.byte	0x14
 800fe8d:	00          	.byte	0x00
 800fe8e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800fe92:	05e1      	lsls	r1, r4, #23
 800fe94:	bf48      	it	mi
 800fe96:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800fe9a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fe9e:	0d1b      	lsrs	r3, r3, #20
 800fea0:	051b      	lsls	r3, r3, #20
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d1bd      	bne.n	800fe22 <_strtod_l+0x72>
 800fea6:	f7fe fb29 	bl	800e4fc <__errno>
 800feaa:	2322      	movs	r3, #34	@ 0x22
 800feac:	6003      	str	r3, [r0, #0]
 800feae:	e7b8      	b.n	800fe22 <_strtod_l+0x72>
 800feb0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800feb4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800feb8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800febc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fec0:	e7e7      	b.n	800fe92 <_strtod_l+0xe2>
 800fec2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 801003c <_strtod_l+0x28c>
 800fec6:	e7e4      	b.n	800fe92 <_strtod_l+0xe2>
 800fec8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800fecc:	f04f 3aff 	mov.w	sl, #4294967295
 800fed0:	e7df      	b.n	800fe92 <_strtod_l+0xe2>
 800fed2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fed4:	1c5a      	adds	r2, r3, #1
 800fed6:	9219      	str	r2, [sp, #100]	@ 0x64
 800fed8:	785b      	ldrb	r3, [r3, #1]
 800feda:	2b30      	cmp	r3, #48	@ 0x30
 800fedc:	d0f9      	beq.n	800fed2 <_strtod_l+0x122>
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d09f      	beq.n	800fe22 <_strtod_l+0x72>
 800fee2:	2301      	movs	r3, #1
 800fee4:	9309      	str	r3, [sp, #36]	@ 0x24
 800fee6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fee8:	220a      	movs	r2, #10
 800feea:	930c      	str	r3, [sp, #48]	@ 0x30
 800feec:	2300      	movs	r3, #0
 800feee:	461f      	mov	r7, r3
 800fef0:	9308      	str	r3, [sp, #32]
 800fef2:	930a      	str	r3, [sp, #40]	@ 0x28
 800fef4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800fef6:	7805      	ldrb	r5, [r0, #0]
 800fef8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800fefc:	b2d9      	uxtb	r1, r3
 800fefe:	2909      	cmp	r1, #9
 800ff00:	d928      	bls.n	800ff54 <_strtod_l+0x1a4>
 800ff02:	2201      	movs	r2, #1
 800ff04:	494e      	ldr	r1, [pc, #312]	@ (8010040 <_strtod_l+0x290>)
 800ff06:	f000 ffc7 	bl	8010e98 <strncmp>
 800ff0a:	2800      	cmp	r0, #0
 800ff0c:	d032      	beq.n	800ff74 <_strtod_l+0x1c4>
 800ff0e:	2000      	movs	r0, #0
 800ff10:	462a      	mov	r2, r5
 800ff12:	4681      	mov	r9, r0
 800ff14:	463d      	mov	r5, r7
 800ff16:	4603      	mov	r3, r0
 800ff18:	2a65      	cmp	r2, #101	@ 0x65
 800ff1a:	d001      	beq.n	800ff20 <_strtod_l+0x170>
 800ff1c:	2a45      	cmp	r2, #69	@ 0x45
 800ff1e:	d114      	bne.n	800ff4a <_strtod_l+0x19a>
 800ff20:	b91d      	cbnz	r5, 800ff2a <_strtod_l+0x17a>
 800ff22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ff24:	4302      	orrs	r2, r0
 800ff26:	d095      	beq.n	800fe54 <_strtod_l+0xa4>
 800ff28:	2500      	movs	r5, #0
 800ff2a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ff2c:	1c62      	adds	r2, r4, #1
 800ff2e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ff30:	7862      	ldrb	r2, [r4, #1]
 800ff32:	2a2b      	cmp	r2, #43	@ 0x2b
 800ff34:	d077      	beq.n	8010026 <_strtod_l+0x276>
 800ff36:	2a2d      	cmp	r2, #45	@ 0x2d
 800ff38:	d07b      	beq.n	8010032 <_strtod_l+0x282>
 800ff3a:	f04f 0c00 	mov.w	ip, #0
 800ff3e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ff42:	2909      	cmp	r1, #9
 800ff44:	f240 8082 	bls.w	801004c <_strtod_l+0x29c>
 800ff48:	9419      	str	r4, [sp, #100]	@ 0x64
 800ff4a:	f04f 0800 	mov.w	r8, #0
 800ff4e:	e0a2      	b.n	8010096 <_strtod_l+0x2e6>
 800ff50:	2300      	movs	r3, #0
 800ff52:	e7c7      	b.n	800fee4 <_strtod_l+0x134>
 800ff54:	2f08      	cmp	r7, #8
 800ff56:	bfd5      	itete	le
 800ff58:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ff5a:	9908      	ldrgt	r1, [sp, #32]
 800ff5c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ff60:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ff64:	f100 0001 	add.w	r0, r0, #1
 800ff68:	bfd4      	ite	le
 800ff6a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ff6c:	9308      	strgt	r3, [sp, #32]
 800ff6e:	3701      	adds	r7, #1
 800ff70:	9019      	str	r0, [sp, #100]	@ 0x64
 800ff72:	e7bf      	b.n	800fef4 <_strtod_l+0x144>
 800ff74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ff76:	1c5a      	adds	r2, r3, #1
 800ff78:	9219      	str	r2, [sp, #100]	@ 0x64
 800ff7a:	785a      	ldrb	r2, [r3, #1]
 800ff7c:	b37f      	cbz	r7, 800ffde <_strtod_l+0x22e>
 800ff7e:	4681      	mov	r9, r0
 800ff80:	463d      	mov	r5, r7
 800ff82:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ff86:	2b09      	cmp	r3, #9
 800ff88:	d912      	bls.n	800ffb0 <_strtod_l+0x200>
 800ff8a:	2301      	movs	r3, #1
 800ff8c:	e7c4      	b.n	800ff18 <_strtod_l+0x168>
 800ff8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ff90:	3001      	adds	r0, #1
 800ff92:	1c5a      	adds	r2, r3, #1
 800ff94:	9219      	str	r2, [sp, #100]	@ 0x64
 800ff96:	785a      	ldrb	r2, [r3, #1]
 800ff98:	2a30      	cmp	r2, #48	@ 0x30
 800ff9a:	d0f8      	beq.n	800ff8e <_strtod_l+0x1de>
 800ff9c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ffa0:	2b08      	cmp	r3, #8
 800ffa2:	f200 84cb 	bhi.w	801093c <_strtod_l+0xb8c>
 800ffa6:	4681      	mov	r9, r0
 800ffa8:	2000      	movs	r0, #0
 800ffaa:	4605      	mov	r5, r0
 800ffac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ffae:	930c      	str	r3, [sp, #48]	@ 0x30
 800ffb0:	3a30      	subs	r2, #48	@ 0x30
 800ffb2:	f100 0301 	add.w	r3, r0, #1
 800ffb6:	d02a      	beq.n	801000e <_strtod_l+0x25e>
 800ffb8:	4499      	add	r9, r3
 800ffba:	210a      	movs	r1, #10
 800ffbc:	462b      	mov	r3, r5
 800ffbe:	eb00 0c05 	add.w	ip, r0, r5
 800ffc2:	4563      	cmp	r3, ip
 800ffc4:	d10d      	bne.n	800ffe2 <_strtod_l+0x232>
 800ffc6:	1c69      	adds	r1, r5, #1
 800ffc8:	4401      	add	r1, r0
 800ffca:	4428      	add	r0, r5
 800ffcc:	2808      	cmp	r0, #8
 800ffce:	dc16      	bgt.n	800fffe <_strtod_l+0x24e>
 800ffd0:	230a      	movs	r3, #10
 800ffd2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ffd4:	fb03 2300 	mla	r3, r3, r0, r2
 800ffd8:	930a      	str	r3, [sp, #40]	@ 0x28
 800ffda:	2300      	movs	r3, #0
 800ffdc:	e018      	b.n	8010010 <_strtod_l+0x260>
 800ffde:	4638      	mov	r0, r7
 800ffe0:	e7da      	b.n	800ff98 <_strtod_l+0x1e8>
 800ffe2:	2b08      	cmp	r3, #8
 800ffe4:	f103 0301 	add.w	r3, r3, #1
 800ffe8:	dc03      	bgt.n	800fff2 <_strtod_l+0x242>
 800ffea:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ffec:	434e      	muls	r6, r1
 800ffee:	960a      	str	r6, [sp, #40]	@ 0x28
 800fff0:	e7e7      	b.n	800ffc2 <_strtod_l+0x212>
 800fff2:	2b10      	cmp	r3, #16
 800fff4:	bfde      	ittt	le
 800fff6:	9e08      	ldrle	r6, [sp, #32]
 800fff8:	434e      	mulle	r6, r1
 800fffa:	9608      	strle	r6, [sp, #32]
 800fffc:	e7e1      	b.n	800ffc2 <_strtod_l+0x212>
 800fffe:	280f      	cmp	r0, #15
 8010000:	dceb      	bgt.n	800ffda <_strtod_l+0x22a>
 8010002:	230a      	movs	r3, #10
 8010004:	9808      	ldr	r0, [sp, #32]
 8010006:	fb03 2300 	mla	r3, r3, r0, r2
 801000a:	9308      	str	r3, [sp, #32]
 801000c:	e7e5      	b.n	800ffda <_strtod_l+0x22a>
 801000e:	4629      	mov	r1, r5
 8010010:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010012:	460d      	mov	r5, r1
 8010014:	1c50      	adds	r0, r2, #1
 8010016:	9019      	str	r0, [sp, #100]	@ 0x64
 8010018:	7852      	ldrb	r2, [r2, #1]
 801001a:	4618      	mov	r0, r3
 801001c:	e7b1      	b.n	800ff82 <_strtod_l+0x1d2>
 801001e:	f04f 0900 	mov.w	r9, #0
 8010022:	2301      	movs	r3, #1
 8010024:	e77d      	b.n	800ff22 <_strtod_l+0x172>
 8010026:	f04f 0c00 	mov.w	ip, #0
 801002a:	1ca2      	adds	r2, r4, #2
 801002c:	9219      	str	r2, [sp, #100]	@ 0x64
 801002e:	78a2      	ldrb	r2, [r4, #2]
 8010030:	e785      	b.n	800ff3e <_strtod_l+0x18e>
 8010032:	f04f 0c01 	mov.w	ip, #1
 8010036:	e7f8      	b.n	801002a <_strtod_l+0x27a>
 8010038:	08011fb0 	.word	0x08011fb0
 801003c:	7ff00000 	.word	0x7ff00000
 8010040:	08011f98 	.word	0x08011f98
 8010044:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010046:	1c51      	adds	r1, r2, #1
 8010048:	9119      	str	r1, [sp, #100]	@ 0x64
 801004a:	7852      	ldrb	r2, [r2, #1]
 801004c:	2a30      	cmp	r2, #48	@ 0x30
 801004e:	d0f9      	beq.n	8010044 <_strtod_l+0x294>
 8010050:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8010054:	2908      	cmp	r1, #8
 8010056:	f63f af78 	bhi.w	800ff4a <_strtod_l+0x19a>
 801005a:	f04f 080a 	mov.w	r8, #10
 801005e:	3a30      	subs	r2, #48	@ 0x30
 8010060:	920e      	str	r2, [sp, #56]	@ 0x38
 8010062:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010064:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010066:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010068:	1c56      	adds	r6, r2, #1
 801006a:	9619      	str	r6, [sp, #100]	@ 0x64
 801006c:	7852      	ldrb	r2, [r2, #1]
 801006e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8010072:	f1be 0f09 	cmp.w	lr, #9
 8010076:	d939      	bls.n	80100ec <_strtod_l+0x33c>
 8010078:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801007a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801007e:	1a76      	subs	r6, r6, r1
 8010080:	2e08      	cmp	r6, #8
 8010082:	dc03      	bgt.n	801008c <_strtod_l+0x2dc>
 8010084:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010086:	4588      	cmp	r8, r1
 8010088:	bfa8      	it	ge
 801008a:	4688      	movge	r8, r1
 801008c:	f1bc 0f00 	cmp.w	ip, #0
 8010090:	d001      	beq.n	8010096 <_strtod_l+0x2e6>
 8010092:	f1c8 0800 	rsb	r8, r8, #0
 8010096:	2d00      	cmp	r5, #0
 8010098:	d14e      	bne.n	8010138 <_strtod_l+0x388>
 801009a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801009c:	4308      	orrs	r0, r1
 801009e:	f47f aec0 	bne.w	800fe22 <_strtod_l+0x72>
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	f47f aed6 	bne.w	800fe54 <_strtod_l+0xa4>
 80100a8:	2a69      	cmp	r2, #105	@ 0x69
 80100aa:	d028      	beq.n	80100fe <_strtod_l+0x34e>
 80100ac:	dc25      	bgt.n	80100fa <_strtod_l+0x34a>
 80100ae:	2a49      	cmp	r2, #73	@ 0x49
 80100b0:	d025      	beq.n	80100fe <_strtod_l+0x34e>
 80100b2:	2a4e      	cmp	r2, #78	@ 0x4e
 80100b4:	f47f aece 	bne.w	800fe54 <_strtod_l+0xa4>
 80100b8:	499a      	ldr	r1, [pc, #616]	@ (8010324 <_strtod_l+0x574>)
 80100ba:	a819      	add	r0, sp, #100	@ 0x64
 80100bc:	f001 f9de 	bl	801147c <__match>
 80100c0:	2800      	cmp	r0, #0
 80100c2:	f43f aec7 	beq.w	800fe54 <_strtod_l+0xa4>
 80100c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80100c8:	781b      	ldrb	r3, [r3, #0]
 80100ca:	2b28      	cmp	r3, #40	@ 0x28
 80100cc:	d12e      	bne.n	801012c <_strtod_l+0x37c>
 80100ce:	4996      	ldr	r1, [pc, #600]	@ (8010328 <_strtod_l+0x578>)
 80100d0:	aa1c      	add	r2, sp, #112	@ 0x70
 80100d2:	a819      	add	r0, sp, #100	@ 0x64
 80100d4:	f001 f9e6 	bl	80114a4 <__hexnan>
 80100d8:	2805      	cmp	r0, #5
 80100da:	d127      	bne.n	801012c <_strtod_l+0x37c>
 80100dc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80100de:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80100e2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80100e6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80100ea:	e69a      	b.n	800fe22 <_strtod_l+0x72>
 80100ec:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80100ee:	fb08 2101 	mla	r1, r8, r1, r2
 80100f2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80100f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80100f8:	e7b5      	b.n	8010066 <_strtod_l+0x2b6>
 80100fa:	2a6e      	cmp	r2, #110	@ 0x6e
 80100fc:	e7da      	b.n	80100b4 <_strtod_l+0x304>
 80100fe:	498b      	ldr	r1, [pc, #556]	@ (801032c <_strtod_l+0x57c>)
 8010100:	a819      	add	r0, sp, #100	@ 0x64
 8010102:	f001 f9bb 	bl	801147c <__match>
 8010106:	2800      	cmp	r0, #0
 8010108:	f43f aea4 	beq.w	800fe54 <_strtod_l+0xa4>
 801010c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801010e:	4988      	ldr	r1, [pc, #544]	@ (8010330 <_strtod_l+0x580>)
 8010110:	3b01      	subs	r3, #1
 8010112:	a819      	add	r0, sp, #100	@ 0x64
 8010114:	9319      	str	r3, [sp, #100]	@ 0x64
 8010116:	f001 f9b1 	bl	801147c <__match>
 801011a:	b910      	cbnz	r0, 8010122 <_strtod_l+0x372>
 801011c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801011e:	3301      	adds	r3, #1
 8010120:	9319      	str	r3, [sp, #100]	@ 0x64
 8010122:	f04f 0a00 	mov.w	sl, #0
 8010126:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8010334 <_strtod_l+0x584>
 801012a:	e67a      	b.n	800fe22 <_strtod_l+0x72>
 801012c:	4882      	ldr	r0, [pc, #520]	@ (8010338 <_strtod_l+0x588>)
 801012e:	f000 fee3 	bl	8010ef8 <nan>
 8010132:	4682      	mov	sl, r0
 8010134:	468b      	mov	fp, r1
 8010136:	e674      	b.n	800fe22 <_strtod_l+0x72>
 8010138:	eba8 0309 	sub.w	r3, r8, r9
 801013c:	2f00      	cmp	r7, #0
 801013e:	bf08      	it	eq
 8010140:	462f      	moveq	r7, r5
 8010142:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010144:	2d10      	cmp	r5, #16
 8010146:	462c      	mov	r4, r5
 8010148:	9309      	str	r3, [sp, #36]	@ 0x24
 801014a:	bfa8      	it	ge
 801014c:	2410      	movge	r4, #16
 801014e:	f7f0 f949 	bl	80003e4 <__aeabi_ui2d>
 8010152:	2d09      	cmp	r5, #9
 8010154:	4682      	mov	sl, r0
 8010156:	468b      	mov	fp, r1
 8010158:	dc11      	bgt.n	801017e <_strtod_l+0x3ce>
 801015a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801015c:	2b00      	cmp	r3, #0
 801015e:	f43f ae60 	beq.w	800fe22 <_strtod_l+0x72>
 8010162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010164:	dd76      	ble.n	8010254 <_strtod_l+0x4a4>
 8010166:	2b16      	cmp	r3, #22
 8010168:	dc5d      	bgt.n	8010226 <_strtod_l+0x476>
 801016a:	4974      	ldr	r1, [pc, #464]	@ (801033c <_strtod_l+0x58c>)
 801016c:	4652      	mov	r2, sl
 801016e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010172:	465b      	mov	r3, fp
 8010174:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010178:	f7f0 f9ae 	bl	80004d8 <__aeabi_dmul>
 801017c:	e7d9      	b.n	8010132 <_strtod_l+0x382>
 801017e:	4b6f      	ldr	r3, [pc, #444]	@ (801033c <_strtod_l+0x58c>)
 8010180:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010184:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010188:	f7f0 f9a6 	bl	80004d8 <__aeabi_dmul>
 801018c:	4682      	mov	sl, r0
 801018e:	9808      	ldr	r0, [sp, #32]
 8010190:	468b      	mov	fp, r1
 8010192:	f7f0 f927 	bl	80003e4 <__aeabi_ui2d>
 8010196:	4602      	mov	r2, r0
 8010198:	460b      	mov	r3, r1
 801019a:	4650      	mov	r0, sl
 801019c:	4659      	mov	r1, fp
 801019e:	f7ef ffe5 	bl	800016c <__adddf3>
 80101a2:	2d0f      	cmp	r5, #15
 80101a4:	4682      	mov	sl, r0
 80101a6:	468b      	mov	fp, r1
 80101a8:	ddd7      	ble.n	801015a <_strtod_l+0x3aa>
 80101aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101ac:	1b2c      	subs	r4, r5, r4
 80101ae:	441c      	add	r4, r3
 80101b0:	2c00      	cmp	r4, #0
 80101b2:	f340 8096 	ble.w	80102e2 <_strtod_l+0x532>
 80101b6:	f014 030f 	ands.w	r3, r4, #15
 80101ba:	d00a      	beq.n	80101d2 <_strtod_l+0x422>
 80101bc:	495f      	ldr	r1, [pc, #380]	@ (801033c <_strtod_l+0x58c>)
 80101be:	4652      	mov	r2, sl
 80101c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80101c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80101c8:	465b      	mov	r3, fp
 80101ca:	f7f0 f985 	bl	80004d8 <__aeabi_dmul>
 80101ce:	4682      	mov	sl, r0
 80101d0:	468b      	mov	fp, r1
 80101d2:	f034 040f 	bics.w	r4, r4, #15
 80101d6:	d073      	beq.n	80102c0 <_strtod_l+0x510>
 80101d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80101dc:	dd48      	ble.n	8010270 <_strtod_l+0x4c0>
 80101de:	2400      	movs	r4, #0
 80101e0:	46a0      	mov	r8, r4
 80101e2:	46a1      	mov	r9, r4
 80101e4:	940a      	str	r4, [sp, #40]	@ 0x28
 80101e6:	2322      	movs	r3, #34	@ 0x22
 80101e8:	f04f 0a00 	mov.w	sl, #0
 80101ec:	9a05      	ldr	r2, [sp, #20]
 80101ee:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8010334 <_strtod_l+0x584>
 80101f2:	6013      	str	r3, [r2, #0]
 80101f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	f43f ae13 	beq.w	800fe22 <_strtod_l+0x72>
 80101fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80101fe:	9805      	ldr	r0, [sp, #20]
 8010200:	f7ff f94c 	bl	800f49c <_Bfree>
 8010204:	4649      	mov	r1, r9
 8010206:	9805      	ldr	r0, [sp, #20]
 8010208:	f7ff f948 	bl	800f49c <_Bfree>
 801020c:	4641      	mov	r1, r8
 801020e:	9805      	ldr	r0, [sp, #20]
 8010210:	f7ff f944 	bl	800f49c <_Bfree>
 8010214:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010216:	9805      	ldr	r0, [sp, #20]
 8010218:	f7ff f940 	bl	800f49c <_Bfree>
 801021c:	4621      	mov	r1, r4
 801021e:	9805      	ldr	r0, [sp, #20]
 8010220:	f7ff f93c 	bl	800f49c <_Bfree>
 8010224:	e5fd      	b.n	800fe22 <_strtod_l+0x72>
 8010226:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010228:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801022c:	4293      	cmp	r3, r2
 801022e:	dbbc      	blt.n	80101aa <_strtod_l+0x3fa>
 8010230:	4c42      	ldr	r4, [pc, #264]	@ (801033c <_strtod_l+0x58c>)
 8010232:	f1c5 050f 	rsb	r5, r5, #15
 8010236:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801023a:	4652      	mov	r2, sl
 801023c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010240:	465b      	mov	r3, fp
 8010242:	f7f0 f949 	bl	80004d8 <__aeabi_dmul>
 8010246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010248:	1b5d      	subs	r5, r3, r5
 801024a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801024e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010252:	e791      	b.n	8010178 <_strtod_l+0x3c8>
 8010254:	3316      	adds	r3, #22
 8010256:	dba8      	blt.n	80101aa <_strtod_l+0x3fa>
 8010258:	4b38      	ldr	r3, [pc, #224]	@ (801033c <_strtod_l+0x58c>)
 801025a:	eba9 0808 	sub.w	r8, r9, r8
 801025e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8010262:	4650      	mov	r0, sl
 8010264:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010268:	4659      	mov	r1, fp
 801026a:	f7f0 fa5f 	bl	800072c <__aeabi_ddiv>
 801026e:	e760      	b.n	8010132 <_strtod_l+0x382>
 8010270:	4b33      	ldr	r3, [pc, #204]	@ (8010340 <_strtod_l+0x590>)
 8010272:	4650      	mov	r0, sl
 8010274:	9308      	str	r3, [sp, #32]
 8010276:	2300      	movs	r3, #0
 8010278:	4659      	mov	r1, fp
 801027a:	461e      	mov	r6, r3
 801027c:	1124      	asrs	r4, r4, #4
 801027e:	2c01      	cmp	r4, #1
 8010280:	dc21      	bgt.n	80102c6 <_strtod_l+0x516>
 8010282:	b10b      	cbz	r3, 8010288 <_strtod_l+0x4d8>
 8010284:	4682      	mov	sl, r0
 8010286:	468b      	mov	fp, r1
 8010288:	492d      	ldr	r1, [pc, #180]	@ (8010340 <_strtod_l+0x590>)
 801028a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801028e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8010292:	4652      	mov	r2, sl
 8010294:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010298:	465b      	mov	r3, fp
 801029a:	f7f0 f91d 	bl	80004d8 <__aeabi_dmul>
 801029e:	4b25      	ldr	r3, [pc, #148]	@ (8010334 <_strtod_l+0x584>)
 80102a0:	460a      	mov	r2, r1
 80102a2:	400b      	ands	r3, r1
 80102a4:	4927      	ldr	r1, [pc, #156]	@ (8010344 <_strtod_l+0x594>)
 80102a6:	4682      	mov	sl, r0
 80102a8:	428b      	cmp	r3, r1
 80102aa:	d898      	bhi.n	80101de <_strtod_l+0x42e>
 80102ac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80102b0:	428b      	cmp	r3, r1
 80102b2:	bf86      	itte	hi
 80102b4:	f04f 3aff 	movhi.w	sl, #4294967295
 80102b8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8010348 <_strtod_l+0x598>
 80102bc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80102c0:	2300      	movs	r3, #0
 80102c2:	9308      	str	r3, [sp, #32]
 80102c4:	e07a      	b.n	80103bc <_strtod_l+0x60c>
 80102c6:	07e2      	lsls	r2, r4, #31
 80102c8:	d505      	bpl.n	80102d6 <_strtod_l+0x526>
 80102ca:	9b08      	ldr	r3, [sp, #32]
 80102cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102d0:	f7f0 f902 	bl	80004d8 <__aeabi_dmul>
 80102d4:	2301      	movs	r3, #1
 80102d6:	9a08      	ldr	r2, [sp, #32]
 80102d8:	3601      	adds	r6, #1
 80102da:	3208      	adds	r2, #8
 80102dc:	1064      	asrs	r4, r4, #1
 80102de:	9208      	str	r2, [sp, #32]
 80102e0:	e7cd      	b.n	801027e <_strtod_l+0x4ce>
 80102e2:	d0ed      	beq.n	80102c0 <_strtod_l+0x510>
 80102e4:	4264      	negs	r4, r4
 80102e6:	f014 020f 	ands.w	r2, r4, #15
 80102ea:	d00a      	beq.n	8010302 <_strtod_l+0x552>
 80102ec:	4b13      	ldr	r3, [pc, #76]	@ (801033c <_strtod_l+0x58c>)
 80102ee:	4650      	mov	r0, sl
 80102f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80102f4:	4659      	mov	r1, fp
 80102f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102fa:	f7f0 fa17 	bl	800072c <__aeabi_ddiv>
 80102fe:	4682      	mov	sl, r0
 8010300:	468b      	mov	fp, r1
 8010302:	1124      	asrs	r4, r4, #4
 8010304:	d0dc      	beq.n	80102c0 <_strtod_l+0x510>
 8010306:	2c1f      	cmp	r4, #31
 8010308:	dd20      	ble.n	801034c <_strtod_l+0x59c>
 801030a:	2400      	movs	r4, #0
 801030c:	46a0      	mov	r8, r4
 801030e:	46a1      	mov	r9, r4
 8010310:	940a      	str	r4, [sp, #40]	@ 0x28
 8010312:	2322      	movs	r3, #34	@ 0x22
 8010314:	9a05      	ldr	r2, [sp, #20]
 8010316:	f04f 0a00 	mov.w	sl, #0
 801031a:	f04f 0b00 	mov.w	fp, #0
 801031e:	6013      	str	r3, [r2, #0]
 8010320:	e768      	b.n	80101f4 <_strtod_l+0x444>
 8010322:	bf00      	nop
 8010324:	08011d87 	.word	0x08011d87
 8010328:	08011f9c 	.word	0x08011f9c
 801032c:	08011d7f 	.word	0x08011d7f
 8010330:	08011db6 	.word	0x08011db6
 8010334:	7ff00000 	.word	0x7ff00000
 8010338:	08012145 	.word	0x08012145
 801033c:	08011ed0 	.word	0x08011ed0
 8010340:	08011ea8 	.word	0x08011ea8
 8010344:	7ca00000 	.word	0x7ca00000
 8010348:	7fefffff 	.word	0x7fefffff
 801034c:	f014 0310 	ands.w	r3, r4, #16
 8010350:	bf18      	it	ne
 8010352:	236a      	movne	r3, #106	@ 0x6a
 8010354:	4650      	mov	r0, sl
 8010356:	9308      	str	r3, [sp, #32]
 8010358:	4659      	mov	r1, fp
 801035a:	2300      	movs	r3, #0
 801035c:	4ea9      	ldr	r6, [pc, #676]	@ (8010604 <_strtod_l+0x854>)
 801035e:	07e2      	lsls	r2, r4, #31
 8010360:	d504      	bpl.n	801036c <_strtod_l+0x5bc>
 8010362:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010366:	f7f0 f8b7 	bl	80004d8 <__aeabi_dmul>
 801036a:	2301      	movs	r3, #1
 801036c:	1064      	asrs	r4, r4, #1
 801036e:	f106 0608 	add.w	r6, r6, #8
 8010372:	d1f4      	bne.n	801035e <_strtod_l+0x5ae>
 8010374:	b10b      	cbz	r3, 801037a <_strtod_l+0x5ca>
 8010376:	4682      	mov	sl, r0
 8010378:	468b      	mov	fp, r1
 801037a:	9b08      	ldr	r3, [sp, #32]
 801037c:	b1b3      	cbz	r3, 80103ac <_strtod_l+0x5fc>
 801037e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010382:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8010386:	2b00      	cmp	r3, #0
 8010388:	4659      	mov	r1, fp
 801038a:	dd0f      	ble.n	80103ac <_strtod_l+0x5fc>
 801038c:	2b1f      	cmp	r3, #31
 801038e:	dd57      	ble.n	8010440 <_strtod_l+0x690>
 8010390:	2b34      	cmp	r3, #52	@ 0x34
 8010392:	bfd8      	it	le
 8010394:	f04f 33ff 	movle.w	r3, #4294967295
 8010398:	f04f 0a00 	mov.w	sl, #0
 801039c:	bfcf      	iteee	gt
 801039e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80103a2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80103a6:	4093      	lslle	r3, r2
 80103a8:	ea03 0b01 	andle.w	fp, r3, r1
 80103ac:	2200      	movs	r2, #0
 80103ae:	2300      	movs	r3, #0
 80103b0:	4650      	mov	r0, sl
 80103b2:	4659      	mov	r1, fp
 80103b4:	f7f0 faf8 	bl	80009a8 <__aeabi_dcmpeq>
 80103b8:	2800      	cmp	r0, #0
 80103ba:	d1a6      	bne.n	801030a <_strtod_l+0x55a>
 80103bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80103be:	463a      	mov	r2, r7
 80103c0:	9300      	str	r3, [sp, #0]
 80103c2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80103c4:	462b      	mov	r3, r5
 80103c6:	9805      	ldr	r0, [sp, #20]
 80103c8:	f7ff f8d0 	bl	800f56c <__s2b>
 80103cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80103ce:	2800      	cmp	r0, #0
 80103d0:	f43f af05 	beq.w	80101de <_strtod_l+0x42e>
 80103d4:	2400      	movs	r4, #0
 80103d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80103d8:	eba9 0308 	sub.w	r3, r9, r8
 80103dc:	2a00      	cmp	r2, #0
 80103de:	bfa8      	it	ge
 80103e0:	2300      	movge	r3, #0
 80103e2:	46a0      	mov	r8, r4
 80103e4:	9312      	str	r3, [sp, #72]	@ 0x48
 80103e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80103ea:	9316      	str	r3, [sp, #88]	@ 0x58
 80103ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80103ee:	9805      	ldr	r0, [sp, #20]
 80103f0:	6859      	ldr	r1, [r3, #4]
 80103f2:	f7ff f813 	bl	800f41c <_Balloc>
 80103f6:	4681      	mov	r9, r0
 80103f8:	2800      	cmp	r0, #0
 80103fa:	f43f aef4 	beq.w	80101e6 <_strtod_l+0x436>
 80103fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010400:	300c      	adds	r0, #12
 8010402:	691a      	ldr	r2, [r3, #16]
 8010404:	f103 010c 	add.w	r1, r3, #12
 8010408:	3202      	adds	r2, #2
 801040a:	0092      	lsls	r2, r2, #2
 801040c:	f000 fd66 	bl	8010edc <memcpy>
 8010410:	ab1c      	add	r3, sp, #112	@ 0x70
 8010412:	9301      	str	r3, [sp, #4]
 8010414:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010416:	9300      	str	r3, [sp, #0]
 8010418:	4652      	mov	r2, sl
 801041a:	465b      	mov	r3, fp
 801041c:	9805      	ldr	r0, [sp, #20]
 801041e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8010422:	f7ff fbd5 	bl	800fbd0 <__d2b>
 8010426:	901a      	str	r0, [sp, #104]	@ 0x68
 8010428:	2800      	cmp	r0, #0
 801042a:	f43f aedc 	beq.w	80101e6 <_strtod_l+0x436>
 801042e:	2101      	movs	r1, #1
 8010430:	9805      	ldr	r0, [sp, #20]
 8010432:	f7ff f931 	bl	800f698 <__i2b>
 8010436:	4680      	mov	r8, r0
 8010438:	b948      	cbnz	r0, 801044e <_strtod_l+0x69e>
 801043a:	f04f 0800 	mov.w	r8, #0
 801043e:	e6d2      	b.n	80101e6 <_strtod_l+0x436>
 8010440:	f04f 32ff 	mov.w	r2, #4294967295
 8010444:	fa02 f303 	lsl.w	r3, r2, r3
 8010448:	ea03 0a0a 	and.w	sl, r3, sl
 801044c:	e7ae      	b.n	80103ac <_strtod_l+0x5fc>
 801044e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8010450:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010452:	2d00      	cmp	r5, #0
 8010454:	bfab      	itete	ge
 8010456:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8010458:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801045a:	18ef      	addge	r7, r5, r3
 801045c:	1b5e      	sublt	r6, r3, r5
 801045e:	9b08      	ldr	r3, [sp, #32]
 8010460:	bfa8      	it	ge
 8010462:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010464:	eba5 0503 	sub.w	r5, r5, r3
 8010468:	4415      	add	r5, r2
 801046a:	4b67      	ldr	r3, [pc, #412]	@ (8010608 <_strtod_l+0x858>)
 801046c:	f105 35ff 	add.w	r5, r5, #4294967295
 8010470:	bfb8      	it	lt
 8010472:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8010474:	429d      	cmp	r5, r3
 8010476:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801047a:	da50      	bge.n	801051e <_strtod_l+0x76e>
 801047c:	1b5b      	subs	r3, r3, r5
 801047e:	2b1f      	cmp	r3, #31
 8010480:	f04f 0101 	mov.w	r1, #1
 8010484:	eba2 0203 	sub.w	r2, r2, r3
 8010488:	dc3d      	bgt.n	8010506 <_strtod_l+0x756>
 801048a:	fa01 f303 	lsl.w	r3, r1, r3
 801048e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010490:	2300      	movs	r3, #0
 8010492:	9310      	str	r3, [sp, #64]	@ 0x40
 8010494:	18bd      	adds	r5, r7, r2
 8010496:	9b08      	ldr	r3, [sp, #32]
 8010498:	42af      	cmp	r7, r5
 801049a:	4416      	add	r6, r2
 801049c:	441e      	add	r6, r3
 801049e:	463b      	mov	r3, r7
 80104a0:	bfa8      	it	ge
 80104a2:	462b      	movge	r3, r5
 80104a4:	42b3      	cmp	r3, r6
 80104a6:	bfa8      	it	ge
 80104a8:	4633      	movge	r3, r6
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	bfc2      	ittt	gt
 80104ae:	1aed      	subgt	r5, r5, r3
 80104b0:	1af6      	subgt	r6, r6, r3
 80104b2:	1aff      	subgt	r7, r7, r3
 80104b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	dd16      	ble.n	80104e8 <_strtod_l+0x738>
 80104ba:	4641      	mov	r1, r8
 80104bc:	461a      	mov	r2, r3
 80104be:	9805      	ldr	r0, [sp, #20]
 80104c0:	f7ff f9a8 	bl	800f814 <__pow5mult>
 80104c4:	4680      	mov	r8, r0
 80104c6:	2800      	cmp	r0, #0
 80104c8:	d0b7      	beq.n	801043a <_strtod_l+0x68a>
 80104ca:	4601      	mov	r1, r0
 80104cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80104ce:	9805      	ldr	r0, [sp, #20]
 80104d0:	f7ff f8f8 	bl	800f6c4 <__multiply>
 80104d4:	900e      	str	r0, [sp, #56]	@ 0x38
 80104d6:	2800      	cmp	r0, #0
 80104d8:	f43f ae85 	beq.w	80101e6 <_strtod_l+0x436>
 80104dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80104de:	9805      	ldr	r0, [sp, #20]
 80104e0:	f7fe ffdc 	bl	800f49c <_Bfree>
 80104e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80104e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80104e8:	2d00      	cmp	r5, #0
 80104ea:	dc1d      	bgt.n	8010528 <_strtod_l+0x778>
 80104ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	dd23      	ble.n	801053a <_strtod_l+0x78a>
 80104f2:	4649      	mov	r1, r9
 80104f4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80104f6:	9805      	ldr	r0, [sp, #20]
 80104f8:	f7ff f98c 	bl	800f814 <__pow5mult>
 80104fc:	4681      	mov	r9, r0
 80104fe:	b9e0      	cbnz	r0, 801053a <_strtod_l+0x78a>
 8010500:	f04f 0900 	mov.w	r9, #0
 8010504:	e66f      	b.n	80101e6 <_strtod_l+0x436>
 8010506:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801050a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801050e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010512:	35e2      	adds	r5, #226	@ 0xe2
 8010514:	fa01 f305 	lsl.w	r3, r1, r5
 8010518:	9310      	str	r3, [sp, #64]	@ 0x40
 801051a:	9113      	str	r1, [sp, #76]	@ 0x4c
 801051c:	e7ba      	b.n	8010494 <_strtod_l+0x6e4>
 801051e:	2300      	movs	r3, #0
 8010520:	9310      	str	r3, [sp, #64]	@ 0x40
 8010522:	2301      	movs	r3, #1
 8010524:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010526:	e7b5      	b.n	8010494 <_strtod_l+0x6e4>
 8010528:	462a      	mov	r2, r5
 801052a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801052c:	9805      	ldr	r0, [sp, #20]
 801052e:	f7ff f9cb 	bl	800f8c8 <__lshift>
 8010532:	901a      	str	r0, [sp, #104]	@ 0x68
 8010534:	2800      	cmp	r0, #0
 8010536:	d1d9      	bne.n	80104ec <_strtod_l+0x73c>
 8010538:	e655      	b.n	80101e6 <_strtod_l+0x436>
 801053a:	2e00      	cmp	r6, #0
 801053c:	dd07      	ble.n	801054e <_strtod_l+0x79e>
 801053e:	4649      	mov	r1, r9
 8010540:	4632      	mov	r2, r6
 8010542:	9805      	ldr	r0, [sp, #20]
 8010544:	f7ff f9c0 	bl	800f8c8 <__lshift>
 8010548:	4681      	mov	r9, r0
 801054a:	2800      	cmp	r0, #0
 801054c:	d0d8      	beq.n	8010500 <_strtod_l+0x750>
 801054e:	2f00      	cmp	r7, #0
 8010550:	dd08      	ble.n	8010564 <_strtod_l+0x7b4>
 8010552:	4641      	mov	r1, r8
 8010554:	463a      	mov	r2, r7
 8010556:	9805      	ldr	r0, [sp, #20]
 8010558:	f7ff f9b6 	bl	800f8c8 <__lshift>
 801055c:	4680      	mov	r8, r0
 801055e:	2800      	cmp	r0, #0
 8010560:	f43f ae41 	beq.w	80101e6 <_strtod_l+0x436>
 8010564:	464a      	mov	r2, r9
 8010566:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010568:	9805      	ldr	r0, [sp, #20]
 801056a:	f7ff fa35 	bl	800f9d8 <__mdiff>
 801056e:	4604      	mov	r4, r0
 8010570:	2800      	cmp	r0, #0
 8010572:	f43f ae38 	beq.w	80101e6 <_strtod_l+0x436>
 8010576:	68c3      	ldr	r3, [r0, #12]
 8010578:	4641      	mov	r1, r8
 801057a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801057c:	2300      	movs	r3, #0
 801057e:	60c3      	str	r3, [r0, #12]
 8010580:	f7ff fa0e 	bl	800f9a0 <__mcmp>
 8010584:	2800      	cmp	r0, #0
 8010586:	da45      	bge.n	8010614 <_strtod_l+0x864>
 8010588:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801058a:	ea53 030a 	orrs.w	r3, r3, sl
 801058e:	d16b      	bne.n	8010668 <_strtod_l+0x8b8>
 8010590:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010594:	2b00      	cmp	r3, #0
 8010596:	d167      	bne.n	8010668 <_strtod_l+0x8b8>
 8010598:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801059c:	0d1b      	lsrs	r3, r3, #20
 801059e:	051b      	lsls	r3, r3, #20
 80105a0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80105a4:	d960      	bls.n	8010668 <_strtod_l+0x8b8>
 80105a6:	6963      	ldr	r3, [r4, #20]
 80105a8:	b913      	cbnz	r3, 80105b0 <_strtod_l+0x800>
 80105aa:	6923      	ldr	r3, [r4, #16]
 80105ac:	2b01      	cmp	r3, #1
 80105ae:	dd5b      	ble.n	8010668 <_strtod_l+0x8b8>
 80105b0:	4621      	mov	r1, r4
 80105b2:	2201      	movs	r2, #1
 80105b4:	9805      	ldr	r0, [sp, #20]
 80105b6:	f7ff f987 	bl	800f8c8 <__lshift>
 80105ba:	4641      	mov	r1, r8
 80105bc:	4604      	mov	r4, r0
 80105be:	f7ff f9ef 	bl	800f9a0 <__mcmp>
 80105c2:	2800      	cmp	r0, #0
 80105c4:	dd50      	ble.n	8010668 <_strtod_l+0x8b8>
 80105c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80105ca:	9a08      	ldr	r2, [sp, #32]
 80105cc:	0d1b      	lsrs	r3, r3, #20
 80105ce:	051b      	lsls	r3, r3, #20
 80105d0:	2a00      	cmp	r2, #0
 80105d2:	d06a      	beq.n	80106aa <_strtod_l+0x8fa>
 80105d4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80105d8:	d867      	bhi.n	80106aa <_strtod_l+0x8fa>
 80105da:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80105de:	f67f ae98 	bls.w	8010312 <_strtod_l+0x562>
 80105e2:	4650      	mov	r0, sl
 80105e4:	4659      	mov	r1, fp
 80105e6:	4b09      	ldr	r3, [pc, #36]	@ (801060c <_strtod_l+0x85c>)
 80105e8:	2200      	movs	r2, #0
 80105ea:	f7ef ff75 	bl	80004d8 <__aeabi_dmul>
 80105ee:	4b08      	ldr	r3, [pc, #32]	@ (8010610 <_strtod_l+0x860>)
 80105f0:	4682      	mov	sl, r0
 80105f2:	400b      	ands	r3, r1
 80105f4:	468b      	mov	fp, r1
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	f47f ae00 	bne.w	80101fc <_strtod_l+0x44c>
 80105fc:	2322      	movs	r3, #34	@ 0x22
 80105fe:	9a05      	ldr	r2, [sp, #20]
 8010600:	6013      	str	r3, [r2, #0]
 8010602:	e5fb      	b.n	80101fc <_strtod_l+0x44c>
 8010604:	08011fc8 	.word	0x08011fc8
 8010608:	fffffc02 	.word	0xfffffc02
 801060c:	39500000 	.word	0x39500000
 8010610:	7ff00000 	.word	0x7ff00000
 8010614:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010618:	d165      	bne.n	80106e6 <_strtod_l+0x936>
 801061a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801061c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010620:	b35a      	cbz	r2, 801067a <_strtod_l+0x8ca>
 8010622:	4a99      	ldr	r2, [pc, #612]	@ (8010888 <_strtod_l+0xad8>)
 8010624:	4293      	cmp	r3, r2
 8010626:	d12b      	bne.n	8010680 <_strtod_l+0x8d0>
 8010628:	9b08      	ldr	r3, [sp, #32]
 801062a:	4651      	mov	r1, sl
 801062c:	b303      	cbz	r3, 8010670 <_strtod_l+0x8c0>
 801062e:	465a      	mov	r2, fp
 8010630:	4b96      	ldr	r3, [pc, #600]	@ (801088c <_strtod_l+0xadc>)
 8010632:	4013      	ands	r3, r2
 8010634:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010638:	f04f 32ff 	mov.w	r2, #4294967295
 801063c:	d81b      	bhi.n	8010676 <_strtod_l+0x8c6>
 801063e:	0d1b      	lsrs	r3, r3, #20
 8010640:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010644:	fa02 f303 	lsl.w	r3, r2, r3
 8010648:	4299      	cmp	r1, r3
 801064a:	d119      	bne.n	8010680 <_strtod_l+0x8d0>
 801064c:	4b90      	ldr	r3, [pc, #576]	@ (8010890 <_strtod_l+0xae0>)
 801064e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010650:	429a      	cmp	r2, r3
 8010652:	d102      	bne.n	801065a <_strtod_l+0x8aa>
 8010654:	3101      	adds	r1, #1
 8010656:	f43f adc6 	beq.w	80101e6 <_strtod_l+0x436>
 801065a:	f04f 0a00 	mov.w	sl, #0
 801065e:	4b8b      	ldr	r3, [pc, #556]	@ (801088c <_strtod_l+0xadc>)
 8010660:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010662:	401a      	ands	r2, r3
 8010664:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8010668:	9b08      	ldr	r3, [sp, #32]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d1b9      	bne.n	80105e2 <_strtod_l+0x832>
 801066e:	e5c5      	b.n	80101fc <_strtod_l+0x44c>
 8010670:	f04f 33ff 	mov.w	r3, #4294967295
 8010674:	e7e8      	b.n	8010648 <_strtod_l+0x898>
 8010676:	4613      	mov	r3, r2
 8010678:	e7e6      	b.n	8010648 <_strtod_l+0x898>
 801067a:	ea53 030a 	orrs.w	r3, r3, sl
 801067e:	d0a2      	beq.n	80105c6 <_strtod_l+0x816>
 8010680:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010682:	b1db      	cbz	r3, 80106bc <_strtod_l+0x90c>
 8010684:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010686:	4213      	tst	r3, r2
 8010688:	d0ee      	beq.n	8010668 <_strtod_l+0x8b8>
 801068a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801068c:	4650      	mov	r0, sl
 801068e:	4659      	mov	r1, fp
 8010690:	9a08      	ldr	r2, [sp, #32]
 8010692:	b1bb      	cbz	r3, 80106c4 <_strtod_l+0x914>
 8010694:	f7ff fb68 	bl	800fd68 <sulp>
 8010698:	4602      	mov	r2, r0
 801069a:	460b      	mov	r3, r1
 801069c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80106a0:	f7ef fd64 	bl	800016c <__adddf3>
 80106a4:	4682      	mov	sl, r0
 80106a6:	468b      	mov	fp, r1
 80106a8:	e7de      	b.n	8010668 <_strtod_l+0x8b8>
 80106aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80106ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80106b2:	f04f 3aff 	mov.w	sl, #4294967295
 80106b6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80106ba:	e7d5      	b.n	8010668 <_strtod_l+0x8b8>
 80106bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80106be:	ea13 0f0a 	tst.w	r3, sl
 80106c2:	e7e1      	b.n	8010688 <_strtod_l+0x8d8>
 80106c4:	f7ff fb50 	bl	800fd68 <sulp>
 80106c8:	4602      	mov	r2, r0
 80106ca:	460b      	mov	r3, r1
 80106cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80106d0:	f7ef fd4a 	bl	8000168 <__aeabi_dsub>
 80106d4:	2200      	movs	r2, #0
 80106d6:	2300      	movs	r3, #0
 80106d8:	4682      	mov	sl, r0
 80106da:	468b      	mov	fp, r1
 80106dc:	f7f0 f964 	bl	80009a8 <__aeabi_dcmpeq>
 80106e0:	2800      	cmp	r0, #0
 80106e2:	d0c1      	beq.n	8010668 <_strtod_l+0x8b8>
 80106e4:	e615      	b.n	8010312 <_strtod_l+0x562>
 80106e6:	4641      	mov	r1, r8
 80106e8:	4620      	mov	r0, r4
 80106ea:	f7ff fac9 	bl	800fc80 <__ratio>
 80106ee:	2200      	movs	r2, #0
 80106f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80106f4:	4606      	mov	r6, r0
 80106f6:	460f      	mov	r7, r1
 80106f8:	f7f0 f96a 	bl	80009d0 <__aeabi_dcmple>
 80106fc:	2800      	cmp	r0, #0
 80106fe:	d06d      	beq.n	80107dc <_strtod_l+0xa2c>
 8010700:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010702:	2b00      	cmp	r3, #0
 8010704:	d178      	bne.n	80107f8 <_strtod_l+0xa48>
 8010706:	f1ba 0f00 	cmp.w	sl, #0
 801070a:	d156      	bne.n	80107ba <_strtod_l+0xa0a>
 801070c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801070e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010712:	2b00      	cmp	r3, #0
 8010714:	d158      	bne.n	80107c8 <_strtod_l+0xa18>
 8010716:	2200      	movs	r2, #0
 8010718:	4630      	mov	r0, r6
 801071a:	4639      	mov	r1, r7
 801071c:	4b5d      	ldr	r3, [pc, #372]	@ (8010894 <_strtod_l+0xae4>)
 801071e:	f7f0 f94d 	bl	80009bc <__aeabi_dcmplt>
 8010722:	2800      	cmp	r0, #0
 8010724:	d157      	bne.n	80107d6 <_strtod_l+0xa26>
 8010726:	4630      	mov	r0, r6
 8010728:	4639      	mov	r1, r7
 801072a:	2200      	movs	r2, #0
 801072c:	4b5a      	ldr	r3, [pc, #360]	@ (8010898 <_strtod_l+0xae8>)
 801072e:	f7ef fed3 	bl	80004d8 <__aeabi_dmul>
 8010732:	4606      	mov	r6, r0
 8010734:	460f      	mov	r7, r1
 8010736:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801073a:	9606      	str	r6, [sp, #24]
 801073c:	9307      	str	r3, [sp, #28]
 801073e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010742:	4d52      	ldr	r5, [pc, #328]	@ (801088c <_strtod_l+0xadc>)
 8010744:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010748:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801074a:	401d      	ands	r5, r3
 801074c:	4b53      	ldr	r3, [pc, #332]	@ (801089c <_strtod_l+0xaec>)
 801074e:	429d      	cmp	r5, r3
 8010750:	f040 80aa 	bne.w	80108a8 <_strtod_l+0xaf8>
 8010754:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010756:	4650      	mov	r0, sl
 8010758:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801075c:	4659      	mov	r1, fp
 801075e:	f7ff f9cf 	bl	800fb00 <__ulp>
 8010762:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010766:	f7ef feb7 	bl	80004d8 <__aeabi_dmul>
 801076a:	4652      	mov	r2, sl
 801076c:	465b      	mov	r3, fp
 801076e:	f7ef fcfd 	bl	800016c <__adddf3>
 8010772:	460b      	mov	r3, r1
 8010774:	4945      	ldr	r1, [pc, #276]	@ (801088c <_strtod_l+0xadc>)
 8010776:	4a4a      	ldr	r2, [pc, #296]	@ (80108a0 <_strtod_l+0xaf0>)
 8010778:	4019      	ands	r1, r3
 801077a:	4291      	cmp	r1, r2
 801077c:	4682      	mov	sl, r0
 801077e:	d942      	bls.n	8010806 <_strtod_l+0xa56>
 8010780:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010782:	4b43      	ldr	r3, [pc, #268]	@ (8010890 <_strtod_l+0xae0>)
 8010784:	429a      	cmp	r2, r3
 8010786:	d103      	bne.n	8010790 <_strtod_l+0x9e0>
 8010788:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801078a:	3301      	adds	r3, #1
 801078c:	f43f ad2b 	beq.w	80101e6 <_strtod_l+0x436>
 8010790:	f04f 3aff 	mov.w	sl, #4294967295
 8010794:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8010890 <_strtod_l+0xae0>
 8010798:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801079a:	9805      	ldr	r0, [sp, #20]
 801079c:	f7fe fe7e 	bl	800f49c <_Bfree>
 80107a0:	4649      	mov	r1, r9
 80107a2:	9805      	ldr	r0, [sp, #20]
 80107a4:	f7fe fe7a 	bl	800f49c <_Bfree>
 80107a8:	4641      	mov	r1, r8
 80107aa:	9805      	ldr	r0, [sp, #20]
 80107ac:	f7fe fe76 	bl	800f49c <_Bfree>
 80107b0:	4621      	mov	r1, r4
 80107b2:	9805      	ldr	r0, [sp, #20]
 80107b4:	f7fe fe72 	bl	800f49c <_Bfree>
 80107b8:	e618      	b.n	80103ec <_strtod_l+0x63c>
 80107ba:	f1ba 0f01 	cmp.w	sl, #1
 80107be:	d103      	bne.n	80107c8 <_strtod_l+0xa18>
 80107c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	f43f ada5 	beq.w	8010312 <_strtod_l+0x562>
 80107c8:	2200      	movs	r2, #0
 80107ca:	4b36      	ldr	r3, [pc, #216]	@ (80108a4 <_strtod_l+0xaf4>)
 80107cc:	2600      	movs	r6, #0
 80107ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80107d2:	4f30      	ldr	r7, [pc, #192]	@ (8010894 <_strtod_l+0xae4>)
 80107d4:	e7b3      	b.n	801073e <_strtod_l+0x98e>
 80107d6:	2600      	movs	r6, #0
 80107d8:	4f2f      	ldr	r7, [pc, #188]	@ (8010898 <_strtod_l+0xae8>)
 80107da:	e7ac      	b.n	8010736 <_strtod_l+0x986>
 80107dc:	4630      	mov	r0, r6
 80107de:	4639      	mov	r1, r7
 80107e0:	4b2d      	ldr	r3, [pc, #180]	@ (8010898 <_strtod_l+0xae8>)
 80107e2:	2200      	movs	r2, #0
 80107e4:	f7ef fe78 	bl	80004d8 <__aeabi_dmul>
 80107e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80107ea:	4606      	mov	r6, r0
 80107ec:	460f      	mov	r7, r1
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d0a1      	beq.n	8010736 <_strtod_l+0x986>
 80107f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80107f6:	e7a2      	b.n	801073e <_strtod_l+0x98e>
 80107f8:	2200      	movs	r2, #0
 80107fa:	4b26      	ldr	r3, [pc, #152]	@ (8010894 <_strtod_l+0xae4>)
 80107fc:	4616      	mov	r6, r2
 80107fe:	461f      	mov	r7, r3
 8010800:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010804:	e79b      	b.n	801073e <_strtod_l+0x98e>
 8010806:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801080a:	9b08      	ldr	r3, [sp, #32]
 801080c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010810:	2b00      	cmp	r3, #0
 8010812:	d1c1      	bne.n	8010798 <_strtod_l+0x9e8>
 8010814:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010818:	0d1b      	lsrs	r3, r3, #20
 801081a:	051b      	lsls	r3, r3, #20
 801081c:	429d      	cmp	r5, r3
 801081e:	d1bb      	bne.n	8010798 <_strtod_l+0x9e8>
 8010820:	4630      	mov	r0, r6
 8010822:	4639      	mov	r1, r7
 8010824:	f7f0 faae 	bl	8000d84 <__aeabi_d2lz>
 8010828:	f7ef fe28 	bl	800047c <__aeabi_l2d>
 801082c:	4602      	mov	r2, r0
 801082e:	460b      	mov	r3, r1
 8010830:	4630      	mov	r0, r6
 8010832:	4639      	mov	r1, r7
 8010834:	f7ef fc98 	bl	8000168 <__aeabi_dsub>
 8010838:	460b      	mov	r3, r1
 801083a:	4602      	mov	r2, r0
 801083c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8010840:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010844:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010846:	ea46 060a 	orr.w	r6, r6, sl
 801084a:	431e      	orrs	r6, r3
 801084c:	d069      	beq.n	8010922 <_strtod_l+0xb72>
 801084e:	a30a      	add	r3, pc, #40	@ (adr r3, 8010878 <_strtod_l+0xac8>)
 8010850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010854:	f7f0 f8b2 	bl	80009bc <__aeabi_dcmplt>
 8010858:	2800      	cmp	r0, #0
 801085a:	f47f accf 	bne.w	80101fc <_strtod_l+0x44c>
 801085e:	a308      	add	r3, pc, #32	@ (adr r3, 8010880 <_strtod_l+0xad0>)
 8010860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010864:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010868:	f7f0 f8c6 	bl	80009f8 <__aeabi_dcmpgt>
 801086c:	2800      	cmp	r0, #0
 801086e:	d093      	beq.n	8010798 <_strtod_l+0x9e8>
 8010870:	e4c4      	b.n	80101fc <_strtod_l+0x44c>
 8010872:	bf00      	nop
 8010874:	f3af 8000 	nop.w
 8010878:	94a03595 	.word	0x94a03595
 801087c:	3fdfffff 	.word	0x3fdfffff
 8010880:	35afe535 	.word	0x35afe535
 8010884:	3fe00000 	.word	0x3fe00000
 8010888:	000fffff 	.word	0x000fffff
 801088c:	7ff00000 	.word	0x7ff00000
 8010890:	7fefffff 	.word	0x7fefffff
 8010894:	3ff00000 	.word	0x3ff00000
 8010898:	3fe00000 	.word	0x3fe00000
 801089c:	7fe00000 	.word	0x7fe00000
 80108a0:	7c9fffff 	.word	0x7c9fffff
 80108a4:	bff00000 	.word	0xbff00000
 80108a8:	9b08      	ldr	r3, [sp, #32]
 80108aa:	b323      	cbz	r3, 80108f6 <_strtod_l+0xb46>
 80108ac:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80108b0:	d821      	bhi.n	80108f6 <_strtod_l+0xb46>
 80108b2:	a327      	add	r3, pc, #156	@ (adr r3, 8010950 <_strtod_l+0xba0>)
 80108b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108b8:	4630      	mov	r0, r6
 80108ba:	4639      	mov	r1, r7
 80108bc:	f7f0 f888 	bl	80009d0 <__aeabi_dcmple>
 80108c0:	b1a0      	cbz	r0, 80108ec <_strtod_l+0xb3c>
 80108c2:	4639      	mov	r1, r7
 80108c4:	4630      	mov	r0, r6
 80108c6:	f7f0 f8df 	bl	8000a88 <__aeabi_d2uiz>
 80108ca:	2801      	cmp	r0, #1
 80108cc:	bf38      	it	cc
 80108ce:	2001      	movcc	r0, #1
 80108d0:	f7ef fd88 	bl	80003e4 <__aeabi_ui2d>
 80108d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80108d6:	4606      	mov	r6, r0
 80108d8:	460f      	mov	r7, r1
 80108da:	b9fb      	cbnz	r3, 801091c <_strtod_l+0xb6c>
 80108dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80108e0:	9014      	str	r0, [sp, #80]	@ 0x50
 80108e2:	9315      	str	r3, [sp, #84]	@ 0x54
 80108e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80108e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80108ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80108ee:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80108f2:	1b5b      	subs	r3, r3, r5
 80108f4:	9311      	str	r3, [sp, #68]	@ 0x44
 80108f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80108fa:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80108fe:	f7ff f8ff 	bl	800fb00 <__ulp>
 8010902:	4602      	mov	r2, r0
 8010904:	460b      	mov	r3, r1
 8010906:	4650      	mov	r0, sl
 8010908:	4659      	mov	r1, fp
 801090a:	f7ef fde5 	bl	80004d8 <__aeabi_dmul>
 801090e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010912:	f7ef fc2b 	bl	800016c <__adddf3>
 8010916:	4682      	mov	sl, r0
 8010918:	468b      	mov	fp, r1
 801091a:	e776      	b.n	801080a <_strtod_l+0xa5a>
 801091c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8010920:	e7e0      	b.n	80108e4 <_strtod_l+0xb34>
 8010922:	a30d      	add	r3, pc, #52	@ (adr r3, 8010958 <_strtod_l+0xba8>)
 8010924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010928:	f7f0 f848 	bl	80009bc <__aeabi_dcmplt>
 801092c:	e79e      	b.n	801086c <_strtod_l+0xabc>
 801092e:	2300      	movs	r3, #0
 8010930:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010932:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010934:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010936:	6013      	str	r3, [r2, #0]
 8010938:	f7ff ba77 	b.w	800fe2a <_strtod_l+0x7a>
 801093c:	2a65      	cmp	r2, #101	@ 0x65
 801093e:	f43f ab6e 	beq.w	801001e <_strtod_l+0x26e>
 8010942:	2a45      	cmp	r2, #69	@ 0x45
 8010944:	f43f ab6b 	beq.w	801001e <_strtod_l+0x26e>
 8010948:	2301      	movs	r3, #1
 801094a:	f7ff bba6 	b.w	801009a <_strtod_l+0x2ea>
 801094e:	bf00      	nop
 8010950:	ffc00000 	.word	0xffc00000
 8010954:	41dfffff 	.word	0x41dfffff
 8010958:	94a03595 	.word	0x94a03595
 801095c:	3fcfffff 	.word	0x3fcfffff

08010960 <_strtod_r>:
 8010960:	4b01      	ldr	r3, [pc, #4]	@ (8010968 <_strtod_r+0x8>)
 8010962:	f7ff ba25 	b.w	800fdb0 <_strtod_l>
 8010966:	bf00      	nop
 8010968:	200001f8 	.word	0x200001f8

0801096c <_strtol_l.constprop.0>:
 801096c:	2b24      	cmp	r3, #36	@ 0x24
 801096e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010972:	4686      	mov	lr, r0
 8010974:	4690      	mov	r8, r2
 8010976:	d801      	bhi.n	801097c <_strtol_l.constprop.0+0x10>
 8010978:	2b01      	cmp	r3, #1
 801097a:	d106      	bne.n	801098a <_strtol_l.constprop.0+0x1e>
 801097c:	f7fd fdbe 	bl	800e4fc <__errno>
 8010980:	2316      	movs	r3, #22
 8010982:	6003      	str	r3, [r0, #0]
 8010984:	2000      	movs	r0, #0
 8010986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801098a:	460d      	mov	r5, r1
 801098c:	4833      	ldr	r0, [pc, #204]	@ (8010a5c <_strtol_l.constprop.0+0xf0>)
 801098e:	462a      	mov	r2, r5
 8010990:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010994:	5d06      	ldrb	r6, [r0, r4]
 8010996:	f016 0608 	ands.w	r6, r6, #8
 801099a:	d1f8      	bne.n	801098e <_strtol_l.constprop.0+0x22>
 801099c:	2c2d      	cmp	r4, #45	@ 0x2d
 801099e:	d12d      	bne.n	80109fc <_strtol_l.constprop.0+0x90>
 80109a0:	2601      	movs	r6, #1
 80109a2:	782c      	ldrb	r4, [r5, #0]
 80109a4:	1c95      	adds	r5, r2, #2
 80109a6:	f033 0210 	bics.w	r2, r3, #16
 80109aa:	d109      	bne.n	80109c0 <_strtol_l.constprop.0+0x54>
 80109ac:	2c30      	cmp	r4, #48	@ 0x30
 80109ae:	d12a      	bne.n	8010a06 <_strtol_l.constprop.0+0x9a>
 80109b0:	782a      	ldrb	r2, [r5, #0]
 80109b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80109b6:	2a58      	cmp	r2, #88	@ 0x58
 80109b8:	d125      	bne.n	8010a06 <_strtol_l.constprop.0+0x9a>
 80109ba:	2310      	movs	r3, #16
 80109bc:	786c      	ldrb	r4, [r5, #1]
 80109be:	3502      	adds	r5, #2
 80109c0:	2200      	movs	r2, #0
 80109c2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80109c6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80109ca:	fbbc f9f3 	udiv	r9, ip, r3
 80109ce:	4610      	mov	r0, r2
 80109d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80109d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80109d8:	2f09      	cmp	r7, #9
 80109da:	d81b      	bhi.n	8010a14 <_strtol_l.constprop.0+0xa8>
 80109dc:	463c      	mov	r4, r7
 80109de:	42a3      	cmp	r3, r4
 80109e0:	dd27      	ble.n	8010a32 <_strtol_l.constprop.0+0xc6>
 80109e2:	1c57      	adds	r7, r2, #1
 80109e4:	d007      	beq.n	80109f6 <_strtol_l.constprop.0+0x8a>
 80109e6:	4581      	cmp	r9, r0
 80109e8:	d320      	bcc.n	8010a2c <_strtol_l.constprop.0+0xc0>
 80109ea:	d101      	bne.n	80109f0 <_strtol_l.constprop.0+0x84>
 80109ec:	45a2      	cmp	sl, r4
 80109ee:	db1d      	blt.n	8010a2c <_strtol_l.constprop.0+0xc0>
 80109f0:	2201      	movs	r2, #1
 80109f2:	fb00 4003 	mla	r0, r0, r3, r4
 80109f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80109fa:	e7eb      	b.n	80109d4 <_strtol_l.constprop.0+0x68>
 80109fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80109fe:	bf04      	itt	eq
 8010a00:	782c      	ldrbeq	r4, [r5, #0]
 8010a02:	1c95      	addeq	r5, r2, #2
 8010a04:	e7cf      	b.n	80109a6 <_strtol_l.constprop.0+0x3a>
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d1da      	bne.n	80109c0 <_strtol_l.constprop.0+0x54>
 8010a0a:	2c30      	cmp	r4, #48	@ 0x30
 8010a0c:	bf0c      	ite	eq
 8010a0e:	2308      	moveq	r3, #8
 8010a10:	230a      	movne	r3, #10
 8010a12:	e7d5      	b.n	80109c0 <_strtol_l.constprop.0+0x54>
 8010a14:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010a18:	2f19      	cmp	r7, #25
 8010a1a:	d801      	bhi.n	8010a20 <_strtol_l.constprop.0+0xb4>
 8010a1c:	3c37      	subs	r4, #55	@ 0x37
 8010a1e:	e7de      	b.n	80109de <_strtol_l.constprop.0+0x72>
 8010a20:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010a24:	2f19      	cmp	r7, #25
 8010a26:	d804      	bhi.n	8010a32 <_strtol_l.constprop.0+0xc6>
 8010a28:	3c57      	subs	r4, #87	@ 0x57
 8010a2a:	e7d8      	b.n	80109de <_strtol_l.constprop.0+0x72>
 8010a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8010a30:	e7e1      	b.n	80109f6 <_strtol_l.constprop.0+0x8a>
 8010a32:	1c53      	adds	r3, r2, #1
 8010a34:	d108      	bne.n	8010a48 <_strtol_l.constprop.0+0xdc>
 8010a36:	2322      	movs	r3, #34	@ 0x22
 8010a38:	4660      	mov	r0, ip
 8010a3a:	f8ce 3000 	str.w	r3, [lr]
 8010a3e:	f1b8 0f00 	cmp.w	r8, #0
 8010a42:	d0a0      	beq.n	8010986 <_strtol_l.constprop.0+0x1a>
 8010a44:	1e69      	subs	r1, r5, #1
 8010a46:	e006      	b.n	8010a56 <_strtol_l.constprop.0+0xea>
 8010a48:	b106      	cbz	r6, 8010a4c <_strtol_l.constprop.0+0xe0>
 8010a4a:	4240      	negs	r0, r0
 8010a4c:	f1b8 0f00 	cmp.w	r8, #0
 8010a50:	d099      	beq.n	8010986 <_strtol_l.constprop.0+0x1a>
 8010a52:	2a00      	cmp	r2, #0
 8010a54:	d1f6      	bne.n	8010a44 <_strtol_l.constprop.0+0xd8>
 8010a56:	f8c8 1000 	str.w	r1, [r8]
 8010a5a:	e794      	b.n	8010986 <_strtol_l.constprop.0+0x1a>
 8010a5c:	08011ff1 	.word	0x08011ff1

08010a60 <_strtol_r>:
 8010a60:	f7ff bf84 	b.w	801096c <_strtol_l.constprop.0>

08010a64 <__ssputs_r>:
 8010a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a68:	461f      	mov	r7, r3
 8010a6a:	688e      	ldr	r6, [r1, #8]
 8010a6c:	4682      	mov	sl, r0
 8010a6e:	42be      	cmp	r6, r7
 8010a70:	460c      	mov	r4, r1
 8010a72:	4690      	mov	r8, r2
 8010a74:	680b      	ldr	r3, [r1, #0]
 8010a76:	d82d      	bhi.n	8010ad4 <__ssputs_r+0x70>
 8010a78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010a7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010a80:	d026      	beq.n	8010ad0 <__ssputs_r+0x6c>
 8010a82:	6965      	ldr	r5, [r4, #20]
 8010a84:	6909      	ldr	r1, [r1, #16]
 8010a86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a8a:	eba3 0901 	sub.w	r9, r3, r1
 8010a8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010a92:	1c7b      	adds	r3, r7, #1
 8010a94:	444b      	add	r3, r9
 8010a96:	106d      	asrs	r5, r5, #1
 8010a98:	429d      	cmp	r5, r3
 8010a9a:	bf38      	it	cc
 8010a9c:	461d      	movcc	r5, r3
 8010a9e:	0553      	lsls	r3, r2, #21
 8010aa0:	d527      	bpl.n	8010af2 <__ssputs_r+0x8e>
 8010aa2:	4629      	mov	r1, r5
 8010aa4:	f7fe fc2e 	bl	800f304 <_malloc_r>
 8010aa8:	4606      	mov	r6, r0
 8010aaa:	b360      	cbz	r0, 8010b06 <__ssputs_r+0xa2>
 8010aac:	464a      	mov	r2, r9
 8010aae:	6921      	ldr	r1, [r4, #16]
 8010ab0:	f000 fa14 	bl	8010edc <memcpy>
 8010ab4:	89a3      	ldrh	r3, [r4, #12]
 8010ab6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010aba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010abe:	81a3      	strh	r3, [r4, #12]
 8010ac0:	6126      	str	r6, [r4, #16]
 8010ac2:	444e      	add	r6, r9
 8010ac4:	6026      	str	r6, [r4, #0]
 8010ac6:	463e      	mov	r6, r7
 8010ac8:	6165      	str	r5, [r4, #20]
 8010aca:	eba5 0509 	sub.w	r5, r5, r9
 8010ace:	60a5      	str	r5, [r4, #8]
 8010ad0:	42be      	cmp	r6, r7
 8010ad2:	d900      	bls.n	8010ad6 <__ssputs_r+0x72>
 8010ad4:	463e      	mov	r6, r7
 8010ad6:	4632      	mov	r2, r6
 8010ad8:	4641      	mov	r1, r8
 8010ada:	6820      	ldr	r0, [r4, #0]
 8010adc:	f000 f9c2 	bl	8010e64 <memmove>
 8010ae0:	2000      	movs	r0, #0
 8010ae2:	68a3      	ldr	r3, [r4, #8]
 8010ae4:	1b9b      	subs	r3, r3, r6
 8010ae6:	60a3      	str	r3, [r4, #8]
 8010ae8:	6823      	ldr	r3, [r4, #0]
 8010aea:	4433      	add	r3, r6
 8010aec:	6023      	str	r3, [r4, #0]
 8010aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010af2:	462a      	mov	r2, r5
 8010af4:	f000 fd83 	bl	80115fe <_realloc_r>
 8010af8:	4606      	mov	r6, r0
 8010afa:	2800      	cmp	r0, #0
 8010afc:	d1e0      	bne.n	8010ac0 <__ssputs_r+0x5c>
 8010afe:	4650      	mov	r0, sl
 8010b00:	6921      	ldr	r1, [r4, #16]
 8010b02:	f7fe fb8d 	bl	800f220 <_free_r>
 8010b06:	230c      	movs	r3, #12
 8010b08:	f8ca 3000 	str.w	r3, [sl]
 8010b0c:	89a3      	ldrh	r3, [r4, #12]
 8010b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8010b12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b16:	81a3      	strh	r3, [r4, #12]
 8010b18:	e7e9      	b.n	8010aee <__ssputs_r+0x8a>
	...

08010b1c <_svfiprintf_r>:
 8010b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b20:	4698      	mov	r8, r3
 8010b22:	898b      	ldrh	r3, [r1, #12]
 8010b24:	4607      	mov	r7, r0
 8010b26:	061b      	lsls	r3, r3, #24
 8010b28:	460d      	mov	r5, r1
 8010b2a:	4614      	mov	r4, r2
 8010b2c:	b09d      	sub	sp, #116	@ 0x74
 8010b2e:	d510      	bpl.n	8010b52 <_svfiprintf_r+0x36>
 8010b30:	690b      	ldr	r3, [r1, #16]
 8010b32:	b973      	cbnz	r3, 8010b52 <_svfiprintf_r+0x36>
 8010b34:	2140      	movs	r1, #64	@ 0x40
 8010b36:	f7fe fbe5 	bl	800f304 <_malloc_r>
 8010b3a:	6028      	str	r0, [r5, #0]
 8010b3c:	6128      	str	r0, [r5, #16]
 8010b3e:	b930      	cbnz	r0, 8010b4e <_svfiprintf_r+0x32>
 8010b40:	230c      	movs	r3, #12
 8010b42:	603b      	str	r3, [r7, #0]
 8010b44:	f04f 30ff 	mov.w	r0, #4294967295
 8010b48:	b01d      	add	sp, #116	@ 0x74
 8010b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b4e:	2340      	movs	r3, #64	@ 0x40
 8010b50:	616b      	str	r3, [r5, #20]
 8010b52:	2300      	movs	r3, #0
 8010b54:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b56:	2320      	movs	r3, #32
 8010b58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010b5c:	2330      	movs	r3, #48	@ 0x30
 8010b5e:	f04f 0901 	mov.w	r9, #1
 8010b62:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b66:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8010d00 <_svfiprintf_r+0x1e4>
 8010b6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010b6e:	4623      	mov	r3, r4
 8010b70:	469a      	mov	sl, r3
 8010b72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b76:	b10a      	cbz	r2, 8010b7c <_svfiprintf_r+0x60>
 8010b78:	2a25      	cmp	r2, #37	@ 0x25
 8010b7a:	d1f9      	bne.n	8010b70 <_svfiprintf_r+0x54>
 8010b7c:	ebba 0b04 	subs.w	fp, sl, r4
 8010b80:	d00b      	beq.n	8010b9a <_svfiprintf_r+0x7e>
 8010b82:	465b      	mov	r3, fp
 8010b84:	4622      	mov	r2, r4
 8010b86:	4629      	mov	r1, r5
 8010b88:	4638      	mov	r0, r7
 8010b8a:	f7ff ff6b 	bl	8010a64 <__ssputs_r>
 8010b8e:	3001      	adds	r0, #1
 8010b90:	f000 80a7 	beq.w	8010ce2 <_svfiprintf_r+0x1c6>
 8010b94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010b96:	445a      	add	r2, fp
 8010b98:	9209      	str	r2, [sp, #36]	@ 0x24
 8010b9a:	f89a 3000 	ldrb.w	r3, [sl]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	f000 809f 	beq.w	8010ce2 <_svfiprintf_r+0x1c6>
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8010baa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010bae:	f10a 0a01 	add.w	sl, sl, #1
 8010bb2:	9304      	str	r3, [sp, #16]
 8010bb4:	9307      	str	r3, [sp, #28]
 8010bb6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010bba:	931a      	str	r3, [sp, #104]	@ 0x68
 8010bbc:	4654      	mov	r4, sl
 8010bbe:	2205      	movs	r2, #5
 8010bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bc4:	484e      	ldr	r0, [pc, #312]	@ (8010d00 <_svfiprintf_r+0x1e4>)
 8010bc6:	f7fd fcc6 	bl	800e556 <memchr>
 8010bca:	9a04      	ldr	r2, [sp, #16]
 8010bcc:	b9d8      	cbnz	r0, 8010c06 <_svfiprintf_r+0xea>
 8010bce:	06d0      	lsls	r0, r2, #27
 8010bd0:	bf44      	itt	mi
 8010bd2:	2320      	movmi	r3, #32
 8010bd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010bd8:	0711      	lsls	r1, r2, #28
 8010bda:	bf44      	itt	mi
 8010bdc:	232b      	movmi	r3, #43	@ 0x2b
 8010bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010be2:	f89a 3000 	ldrb.w	r3, [sl]
 8010be6:	2b2a      	cmp	r3, #42	@ 0x2a
 8010be8:	d015      	beq.n	8010c16 <_svfiprintf_r+0xfa>
 8010bea:	4654      	mov	r4, sl
 8010bec:	2000      	movs	r0, #0
 8010bee:	f04f 0c0a 	mov.w	ip, #10
 8010bf2:	9a07      	ldr	r2, [sp, #28]
 8010bf4:	4621      	mov	r1, r4
 8010bf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010bfa:	3b30      	subs	r3, #48	@ 0x30
 8010bfc:	2b09      	cmp	r3, #9
 8010bfe:	d94b      	bls.n	8010c98 <_svfiprintf_r+0x17c>
 8010c00:	b1b0      	cbz	r0, 8010c30 <_svfiprintf_r+0x114>
 8010c02:	9207      	str	r2, [sp, #28]
 8010c04:	e014      	b.n	8010c30 <_svfiprintf_r+0x114>
 8010c06:	eba0 0308 	sub.w	r3, r0, r8
 8010c0a:	fa09 f303 	lsl.w	r3, r9, r3
 8010c0e:	4313      	orrs	r3, r2
 8010c10:	46a2      	mov	sl, r4
 8010c12:	9304      	str	r3, [sp, #16]
 8010c14:	e7d2      	b.n	8010bbc <_svfiprintf_r+0xa0>
 8010c16:	9b03      	ldr	r3, [sp, #12]
 8010c18:	1d19      	adds	r1, r3, #4
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	9103      	str	r1, [sp, #12]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	bfbb      	ittet	lt
 8010c22:	425b      	neglt	r3, r3
 8010c24:	f042 0202 	orrlt.w	r2, r2, #2
 8010c28:	9307      	strge	r3, [sp, #28]
 8010c2a:	9307      	strlt	r3, [sp, #28]
 8010c2c:	bfb8      	it	lt
 8010c2e:	9204      	strlt	r2, [sp, #16]
 8010c30:	7823      	ldrb	r3, [r4, #0]
 8010c32:	2b2e      	cmp	r3, #46	@ 0x2e
 8010c34:	d10a      	bne.n	8010c4c <_svfiprintf_r+0x130>
 8010c36:	7863      	ldrb	r3, [r4, #1]
 8010c38:	2b2a      	cmp	r3, #42	@ 0x2a
 8010c3a:	d132      	bne.n	8010ca2 <_svfiprintf_r+0x186>
 8010c3c:	9b03      	ldr	r3, [sp, #12]
 8010c3e:	3402      	adds	r4, #2
 8010c40:	1d1a      	adds	r2, r3, #4
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	9203      	str	r2, [sp, #12]
 8010c46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010c4a:	9305      	str	r3, [sp, #20]
 8010c4c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8010d04 <_svfiprintf_r+0x1e8>
 8010c50:	2203      	movs	r2, #3
 8010c52:	4650      	mov	r0, sl
 8010c54:	7821      	ldrb	r1, [r4, #0]
 8010c56:	f7fd fc7e 	bl	800e556 <memchr>
 8010c5a:	b138      	cbz	r0, 8010c6c <_svfiprintf_r+0x150>
 8010c5c:	2240      	movs	r2, #64	@ 0x40
 8010c5e:	9b04      	ldr	r3, [sp, #16]
 8010c60:	eba0 000a 	sub.w	r0, r0, sl
 8010c64:	4082      	lsls	r2, r0
 8010c66:	4313      	orrs	r3, r2
 8010c68:	3401      	adds	r4, #1
 8010c6a:	9304      	str	r3, [sp, #16]
 8010c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c70:	2206      	movs	r2, #6
 8010c72:	4825      	ldr	r0, [pc, #148]	@ (8010d08 <_svfiprintf_r+0x1ec>)
 8010c74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010c78:	f7fd fc6d 	bl	800e556 <memchr>
 8010c7c:	2800      	cmp	r0, #0
 8010c7e:	d036      	beq.n	8010cee <_svfiprintf_r+0x1d2>
 8010c80:	4b22      	ldr	r3, [pc, #136]	@ (8010d0c <_svfiprintf_r+0x1f0>)
 8010c82:	bb1b      	cbnz	r3, 8010ccc <_svfiprintf_r+0x1b0>
 8010c84:	9b03      	ldr	r3, [sp, #12]
 8010c86:	3307      	adds	r3, #7
 8010c88:	f023 0307 	bic.w	r3, r3, #7
 8010c8c:	3308      	adds	r3, #8
 8010c8e:	9303      	str	r3, [sp, #12]
 8010c90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c92:	4433      	add	r3, r6
 8010c94:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c96:	e76a      	b.n	8010b6e <_svfiprintf_r+0x52>
 8010c98:	460c      	mov	r4, r1
 8010c9a:	2001      	movs	r0, #1
 8010c9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ca0:	e7a8      	b.n	8010bf4 <_svfiprintf_r+0xd8>
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	f04f 0c0a 	mov.w	ip, #10
 8010ca8:	4619      	mov	r1, r3
 8010caa:	3401      	adds	r4, #1
 8010cac:	9305      	str	r3, [sp, #20]
 8010cae:	4620      	mov	r0, r4
 8010cb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010cb4:	3a30      	subs	r2, #48	@ 0x30
 8010cb6:	2a09      	cmp	r2, #9
 8010cb8:	d903      	bls.n	8010cc2 <_svfiprintf_r+0x1a6>
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d0c6      	beq.n	8010c4c <_svfiprintf_r+0x130>
 8010cbe:	9105      	str	r1, [sp, #20]
 8010cc0:	e7c4      	b.n	8010c4c <_svfiprintf_r+0x130>
 8010cc2:	4604      	mov	r4, r0
 8010cc4:	2301      	movs	r3, #1
 8010cc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8010cca:	e7f0      	b.n	8010cae <_svfiprintf_r+0x192>
 8010ccc:	ab03      	add	r3, sp, #12
 8010cce:	9300      	str	r3, [sp, #0]
 8010cd0:	462a      	mov	r2, r5
 8010cd2:	4638      	mov	r0, r7
 8010cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8010d10 <_svfiprintf_r+0x1f4>)
 8010cd6:	a904      	add	r1, sp, #16
 8010cd8:	f7fc fcca 	bl	800d670 <_printf_float>
 8010cdc:	1c42      	adds	r2, r0, #1
 8010cde:	4606      	mov	r6, r0
 8010ce0:	d1d6      	bne.n	8010c90 <_svfiprintf_r+0x174>
 8010ce2:	89ab      	ldrh	r3, [r5, #12]
 8010ce4:	065b      	lsls	r3, r3, #25
 8010ce6:	f53f af2d 	bmi.w	8010b44 <_svfiprintf_r+0x28>
 8010cea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010cec:	e72c      	b.n	8010b48 <_svfiprintf_r+0x2c>
 8010cee:	ab03      	add	r3, sp, #12
 8010cf0:	9300      	str	r3, [sp, #0]
 8010cf2:	462a      	mov	r2, r5
 8010cf4:	4638      	mov	r0, r7
 8010cf6:	4b06      	ldr	r3, [pc, #24]	@ (8010d10 <_svfiprintf_r+0x1f4>)
 8010cf8:	a904      	add	r1, sp, #16
 8010cfa:	f7fc ff57 	bl	800dbac <_printf_i>
 8010cfe:	e7ed      	b.n	8010cdc <_svfiprintf_r+0x1c0>
 8010d00:	080120f1 	.word	0x080120f1
 8010d04:	080120f7 	.word	0x080120f7
 8010d08:	080120fb 	.word	0x080120fb
 8010d0c:	0800d671 	.word	0x0800d671
 8010d10:	08010a65 	.word	0x08010a65

08010d14 <__sflush_r>:
 8010d14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d1a:	0716      	lsls	r6, r2, #28
 8010d1c:	4605      	mov	r5, r0
 8010d1e:	460c      	mov	r4, r1
 8010d20:	d454      	bmi.n	8010dcc <__sflush_r+0xb8>
 8010d22:	684b      	ldr	r3, [r1, #4]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	dc02      	bgt.n	8010d2e <__sflush_r+0x1a>
 8010d28:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	dd48      	ble.n	8010dc0 <__sflush_r+0xac>
 8010d2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010d30:	2e00      	cmp	r6, #0
 8010d32:	d045      	beq.n	8010dc0 <__sflush_r+0xac>
 8010d34:	2300      	movs	r3, #0
 8010d36:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010d3a:	682f      	ldr	r7, [r5, #0]
 8010d3c:	6a21      	ldr	r1, [r4, #32]
 8010d3e:	602b      	str	r3, [r5, #0]
 8010d40:	d030      	beq.n	8010da4 <__sflush_r+0x90>
 8010d42:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010d44:	89a3      	ldrh	r3, [r4, #12]
 8010d46:	0759      	lsls	r1, r3, #29
 8010d48:	d505      	bpl.n	8010d56 <__sflush_r+0x42>
 8010d4a:	6863      	ldr	r3, [r4, #4]
 8010d4c:	1ad2      	subs	r2, r2, r3
 8010d4e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010d50:	b10b      	cbz	r3, 8010d56 <__sflush_r+0x42>
 8010d52:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010d54:	1ad2      	subs	r2, r2, r3
 8010d56:	2300      	movs	r3, #0
 8010d58:	4628      	mov	r0, r5
 8010d5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010d5c:	6a21      	ldr	r1, [r4, #32]
 8010d5e:	47b0      	blx	r6
 8010d60:	1c43      	adds	r3, r0, #1
 8010d62:	89a3      	ldrh	r3, [r4, #12]
 8010d64:	d106      	bne.n	8010d74 <__sflush_r+0x60>
 8010d66:	6829      	ldr	r1, [r5, #0]
 8010d68:	291d      	cmp	r1, #29
 8010d6a:	d82b      	bhi.n	8010dc4 <__sflush_r+0xb0>
 8010d6c:	4a28      	ldr	r2, [pc, #160]	@ (8010e10 <__sflush_r+0xfc>)
 8010d6e:	410a      	asrs	r2, r1
 8010d70:	07d6      	lsls	r6, r2, #31
 8010d72:	d427      	bmi.n	8010dc4 <__sflush_r+0xb0>
 8010d74:	2200      	movs	r2, #0
 8010d76:	6062      	str	r2, [r4, #4]
 8010d78:	6922      	ldr	r2, [r4, #16]
 8010d7a:	04d9      	lsls	r1, r3, #19
 8010d7c:	6022      	str	r2, [r4, #0]
 8010d7e:	d504      	bpl.n	8010d8a <__sflush_r+0x76>
 8010d80:	1c42      	adds	r2, r0, #1
 8010d82:	d101      	bne.n	8010d88 <__sflush_r+0x74>
 8010d84:	682b      	ldr	r3, [r5, #0]
 8010d86:	b903      	cbnz	r3, 8010d8a <__sflush_r+0x76>
 8010d88:	6560      	str	r0, [r4, #84]	@ 0x54
 8010d8a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010d8c:	602f      	str	r7, [r5, #0]
 8010d8e:	b1b9      	cbz	r1, 8010dc0 <__sflush_r+0xac>
 8010d90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010d94:	4299      	cmp	r1, r3
 8010d96:	d002      	beq.n	8010d9e <__sflush_r+0x8a>
 8010d98:	4628      	mov	r0, r5
 8010d9a:	f7fe fa41 	bl	800f220 <_free_r>
 8010d9e:	2300      	movs	r3, #0
 8010da0:	6363      	str	r3, [r4, #52]	@ 0x34
 8010da2:	e00d      	b.n	8010dc0 <__sflush_r+0xac>
 8010da4:	2301      	movs	r3, #1
 8010da6:	4628      	mov	r0, r5
 8010da8:	47b0      	blx	r6
 8010daa:	4602      	mov	r2, r0
 8010dac:	1c50      	adds	r0, r2, #1
 8010dae:	d1c9      	bne.n	8010d44 <__sflush_r+0x30>
 8010db0:	682b      	ldr	r3, [r5, #0]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d0c6      	beq.n	8010d44 <__sflush_r+0x30>
 8010db6:	2b1d      	cmp	r3, #29
 8010db8:	d001      	beq.n	8010dbe <__sflush_r+0xaa>
 8010dba:	2b16      	cmp	r3, #22
 8010dbc:	d11d      	bne.n	8010dfa <__sflush_r+0xe6>
 8010dbe:	602f      	str	r7, [r5, #0]
 8010dc0:	2000      	movs	r0, #0
 8010dc2:	e021      	b.n	8010e08 <__sflush_r+0xf4>
 8010dc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010dc8:	b21b      	sxth	r3, r3
 8010dca:	e01a      	b.n	8010e02 <__sflush_r+0xee>
 8010dcc:	690f      	ldr	r7, [r1, #16]
 8010dce:	2f00      	cmp	r7, #0
 8010dd0:	d0f6      	beq.n	8010dc0 <__sflush_r+0xac>
 8010dd2:	0793      	lsls	r3, r2, #30
 8010dd4:	bf18      	it	ne
 8010dd6:	2300      	movne	r3, #0
 8010dd8:	680e      	ldr	r6, [r1, #0]
 8010dda:	bf08      	it	eq
 8010ddc:	694b      	ldreq	r3, [r1, #20]
 8010dde:	1bf6      	subs	r6, r6, r7
 8010de0:	600f      	str	r7, [r1, #0]
 8010de2:	608b      	str	r3, [r1, #8]
 8010de4:	2e00      	cmp	r6, #0
 8010de6:	ddeb      	ble.n	8010dc0 <__sflush_r+0xac>
 8010de8:	4633      	mov	r3, r6
 8010dea:	463a      	mov	r2, r7
 8010dec:	4628      	mov	r0, r5
 8010dee:	6a21      	ldr	r1, [r4, #32]
 8010df0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8010df4:	47e0      	blx	ip
 8010df6:	2800      	cmp	r0, #0
 8010df8:	dc07      	bgt.n	8010e0a <__sflush_r+0xf6>
 8010dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010dfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e02:	f04f 30ff 	mov.w	r0, #4294967295
 8010e06:	81a3      	strh	r3, [r4, #12]
 8010e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e0a:	4407      	add	r7, r0
 8010e0c:	1a36      	subs	r6, r6, r0
 8010e0e:	e7e9      	b.n	8010de4 <__sflush_r+0xd0>
 8010e10:	dfbffffe 	.word	0xdfbffffe

08010e14 <_fflush_r>:
 8010e14:	b538      	push	{r3, r4, r5, lr}
 8010e16:	690b      	ldr	r3, [r1, #16]
 8010e18:	4605      	mov	r5, r0
 8010e1a:	460c      	mov	r4, r1
 8010e1c:	b913      	cbnz	r3, 8010e24 <_fflush_r+0x10>
 8010e1e:	2500      	movs	r5, #0
 8010e20:	4628      	mov	r0, r5
 8010e22:	bd38      	pop	{r3, r4, r5, pc}
 8010e24:	b118      	cbz	r0, 8010e2e <_fflush_r+0x1a>
 8010e26:	6a03      	ldr	r3, [r0, #32]
 8010e28:	b90b      	cbnz	r3, 8010e2e <_fflush_r+0x1a>
 8010e2a:	f7fd fa7b 	bl	800e324 <__sinit>
 8010e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d0f3      	beq.n	8010e1e <_fflush_r+0xa>
 8010e36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010e38:	07d0      	lsls	r0, r2, #31
 8010e3a:	d404      	bmi.n	8010e46 <_fflush_r+0x32>
 8010e3c:	0599      	lsls	r1, r3, #22
 8010e3e:	d402      	bmi.n	8010e46 <_fflush_r+0x32>
 8010e40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010e42:	f7fd fb86 	bl	800e552 <__retarget_lock_acquire_recursive>
 8010e46:	4628      	mov	r0, r5
 8010e48:	4621      	mov	r1, r4
 8010e4a:	f7ff ff63 	bl	8010d14 <__sflush_r>
 8010e4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010e50:	4605      	mov	r5, r0
 8010e52:	07da      	lsls	r2, r3, #31
 8010e54:	d4e4      	bmi.n	8010e20 <_fflush_r+0xc>
 8010e56:	89a3      	ldrh	r3, [r4, #12]
 8010e58:	059b      	lsls	r3, r3, #22
 8010e5a:	d4e1      	bmi.n	8010e20 <_fflush_r+0xc>
 8010e5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010e5e:	f7fd fb79 	bl	800e554 <__retarget_lock_release_recursive>
 8010e62:	e7dd      	b.n	8010e20 <_fflush_r+0xc>

08010e64 <memmove>:
 8010e64:	4288      	cmp	r0, r1
 8010e66:	b510      	push	{r4, lr}
 8010e68:	eb01 0402 	add.w	r4, r1, r2
 8010e6c:	d902      	bls.n	8010e74 <memmove+0x10>
 8010e6e:	4284      	cmp	r4, r0
 8010e70:	4623      	mov	r3, r4
 8010e72:	d807      	bhi.n	8010e84 <memmove+0x20>
 8010e74:	1e43      	subs	r3, r0, #1
 8010e76:	42a1      	cmp	r1, r4
 8010e78:	d008      	beq.n	8010e8c <memmove+0x28>
 8010e7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010e7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010e82:	e7f8      	b.n	8010e76 <memmove+0x12>
 8010e84:	4601      	mov	r1, r0
 8010e86:	4402      	add	r2, r0
 8010e88:	428a      	cmp	r2, r1
 8010e8a:	d100      	bne.n	8010e8e <memmove+0x2a>
 8010e8c:	bd10      	pop	{r4, pc}
 8010e8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010e92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010e96:	e7f7      	b.n	8010e88 <memmove+0x24>

08010e98 <strncmp>:
 8010e98:	b510      	push	{r4, lr}
 8010e9a:	b16a      	cbz	r2, 8010eb8 <strncmp+0x20>
 8010e9c:	3901      	subs	r1, #1
 8010e9e:	1884      	adds	r4, r0, r2
 8010ea0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ea4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010ea8:	429a      	cmp	r2, r3
 8010eaa:	d103      	bne.n	8010eb4 <strncmp+0x1c>
 8010eac:	42a0      	cmp	r0, r4
 8010eae:	d001      	beq.n	8010eb4 <strncmp+0x1c>
 8010eb0:	2a00      	cmp	r2, #0
 8010eb2:	d1f5      	bne.n	8010ea0 <strncmp+0x8>
 8010eb4:	1ad0      	subs	r0, r2, r3
 8010eb6:	bd10      	pop	{r4, pc}
 8010eb8:	4610      	mov	r0, r2
 8010eba:	e7fc      	b.n	8010eb6 <strncmp+0x1e>

08010ebc <_sbrk_r>:
 8010ebc:	b538      	push	{r3, r4, r5, lr}
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	4d05      	ldr	r5, [pc, #20]	@ (8010ed8 <_sbrk_r+0x1c>)
 8010ec2:	4604      	mov	r4, r0
 8010ec4:	4608      	mov	r0, r1
 8010ec6:	602b      	str	r3, [r5, #0]
 8010ec8:	f7f1 fb52 	bl	8002570 <_sbrk>
 8010ecc:	1c43      	adds	r3, r0, #1
 8010ece:	d102      	bne.n	8010ed6 <_sbrk_r+0x1a>
 8010ed0:	682b      	ldr	r3, [r5, #0]
 8010ed2:	b103      	cbz	r3, 8010ed6 <_sbrk_r+0x1a>
 8010ed4:	6023      	str	r3, [r4, #0]
 8010ed6:	bd38      	pop	{r3, r4, r5, pc}
 8010ed8:	200019bc 	.word	0x200019bc

08010edc <memcpy>:
 8010edc:	440a      	add	r2, r1
 8010ede:	4291      	cmp	r1, r2
 8010ee0:	f100 33ff 	add.w	r3, r0, #4294967295
 8010ee4:	d100      	bne.n	8010ee8 <memcpy+0xc>
 8010ee6:	4770      	bx	lr
 8010ee8:	b510      	push	{r4, lr}
 8010eea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010eee:	4291      	cmp	r1, r2
 8010ef0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010ef4:	d1f9      	bne.n	8010eea <memcpy+0xe>
 8010ef6:	bd10      	pop	{r4, pc}

08010ef8 <nan>:
 8010ef8:	2000      	movs	r0, #0
 8010efa:	4901      	ldr	r1, [pc, #4]	@ (8010f00 <nan+0x8>)
 8010efc:	4770      	bx	lr
 8010efe:	bf00      	nop
 8010f00:	7ff80000 	.word	0x7ff80000

08010f04 <__assert_func>:
 8010f04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010f06:	4614      	mov	r4, r2
 8010f08:	461a      	mov	r2, r3
 8010f0a:	4b09      	ldr	r3, [pc, #36]	@ (8010f30 <__assert_func+0x2c>)
 8010f0c:	4605      	mov	r5, r0
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	68d8      	ldr	r0, [r3, #12]
 8010f12:	b954      	cbnz	r4, 8010f2a <__assert_func+0x26>
 8010f14:	4b07      	ldr	r3, [pc, #28]	@ (8010f34 <__assert_func+0x30>)
 8010f16:	461c      	mov	r4, r3
 8010f18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010f1c:	9100      	str	r1, [sp, #0]
 8010f1e:	462b      	mov	r3, r5
 8010f20:	4905      	ldr	r1, [pc, #20]	@ (8010f38 <__assert_func+0x34>)
 8010f22:	f000 fba7 	bl	8011674 <fiprintf>
 8010f26:	f000 fbb7 	bl	8011698 <abort>
 8010f2a:	4b04      	ldr	r3, [pc, #16]	@ (8010f3c <__assert_func+0x38>)
 8010f2c:	e7f4      	b.n	8010f18 <__assert_func+0x14>
 8010f2e:	bf00      	nop
 8010f30:	200001a8 	.word	0x200001a8
 8010f34:	08012145 	.word	0x08012145
 8010f38:	08012117 	.word	0x08012117
 8010f3c:	0801210a 	.word	0x0801210a

08010f40 <_calloc_r>:
 8010f40:	b570      	push	{r4, r5, r6, lr}
 8010f42:	fba1 5402 	umull	r5, r4, r1, r2
 8010f46:	b93c      	cbnz	r4, 8010f58 <_calloc_r+0x18>
 8010f48:	4629      	mov	r1, r5
 8010f4a:	f7fe f9db 	bl	800f304 <_malloc_r>
 8010f4e:	4606      	mov	r6, r0
 8010f50:	b928      	cbnz	r0, 8010f5e <_calloc_r+0x1e>
 8010f52:	2600      	movs	r6, #0
 8010f54:	4630      	mov	r0, r6
 8010f56:	bd70      	pop	{r4, r5, r6, pc}
 8010f58:	220c      	movs	r2, #12
 8010f5a:	6002      	str	r2, [r0, #0]
 8010f5c:	e7f9      	b.n	8010f52 <_calloc_r+0x12>
 8010f5e:	462a      	mov	r2, r5
 8010f60:	4621      	mov	r1, r4
 8010f62:	f7fd fa78 	bl	800e456 <memset>
 8010f66:	e7f5      	b.n	8010f54 <_calloc_r+0x14>

08010f68 <rshift>:
 8010f68:	6903      	ldr	r3, [r0, #16]
 8010f6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010f6e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010f72:	f100 0414 	add.w	r4, r0, #20
 8010f76:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010f7a:	dd46      	ble.n	801100a <rshift+0xa2>
 8010f7c:	f011 011f 	ands.w	r1, r1, #31
 8010f80:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010f84:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010f88:	d10c      	bne.n	8010fa4 <rshift+0x3c>
 8010f8a:	4629      	mov	r1, r5
 8010f8c:	f100 0710 	add.w	r7, r0, #16
 8010f90:	42b1      	cmp	r1, r6
 8010f92:	d335      	bcc.n	8011000 <rshift+0x98>
 8010f94:	1a9b      	subs	r3, r3, r2
 8010f96:	009b      	lsls	r3, r3, #2
 8010f98:	1eea      	subs	r2, r5, #3
 8010f9a:	4296      	cmp	r6, r2
 8010f9c:	bf38      	it	cc
 8010f9e:	2300      	movcc	r3, #0
 8010fa0:	4423      	add	r3, r4
 8010fa2:	e015      	b.n	8010fd0 <rshift+0x68>
 8010fa4:	46a1      	mov	r9, r4
 8010fa6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010faa:	f1c1 0820 	rsb	r8, r1, #32
 8010fae:	40cf      	lsrs	r7, r1
 8010fb0:	f105 0e04 	add.w	lr, r5, #4
 8010fb4:	4576      	cmp	r6, lr
 8010fb6:	46f4      	mov	ip, lr
 8010fb8:	d816      	bhi.n	8010fe8 <rshift+0x80>
 8010fba:	1a9a      	subs	r2, r3, r2
 8010fbc:	0092      	lsls	r2, r2, #2
 8010fbe:	3a04      	subs	r2, #4
 8010fc0:	3501      	adds	r5, #1
 8010fc2:	42ae      	cmp	r6, r5
 8010fc4:	bf38      	it	cc
 8010fc6:	2200      	movcc	r2, #0
 8010fc8:	18a3      	adds	r3, r4, r2
 8010fca:	50a7      	str	r7, [r4, r2]
 8010fcc:	b107      	cbz	r7, 8010fd0 <rshift+0x68>
 8010fce:	3304      	adds	r3, #4
 8010fd0:	42a3      	cmp	r3, r4
 8010fd2:	eba3 0204 	sub.w	r2, r3, r4
 8010fd6:	bf08      	it	eq
 8010fd8:	2300      	moveq	r3, #0
 8010fda:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010fde:	6102      	str	r2, [r0, #16]
 8010fe0:	bf08      	it	eq
 8010fe2:	6143      	streq	r3, [r0, #20]
 8010fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010fe8:	f8dc c000 	ldr.w	ip, [ip]
 8010fec:	fa0c fc08 	lsl.w	ip, ip, r8
 8010ff0:	ea4c 0707 	orr.w	r7, ip, r7
 8010ff4:	f849 7b04 	str.w	r7, [r9], #4
 8010ff8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010ffc:	40cf      	lsrs	r7, r1
 8010ffe:	e7d9      	b.n	8010fb4 <rshift+0x4c>
 8011000:	f851 cb04 	ldr.w	ip, [r1], #4
 8011004:	f847 cf04 	str.w	ip, [r7, #4]!
 8011008:	e7c2      	b.n	8010f90 <rshift+0x28>
 801100a:	4623      	mov	r3, r4
 801100c:	e7e0      	b.n	8010fd0 <rshift+0x68>

0801100e <__hexdig_fun>:
 801100e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011012:	2b09      	cmp	r3, #9
 8011014:	d802      	bhi.n	801101c <__hexdig_fun+0xe>
 8011016:	3820      	subs	r0, #32
 8011018:	b2c0      	uxtb	r0, r0
 801101a:	4770      	bx	lr
 801101c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011020:	2b05      	cmp	r3, #5
 8011022:	d801      	bhi.n	8011028 <__hexdig_fun+0x1a>
 8011024:	3847      	subs	r0, #71	@ 0x47
 8011026:	e7f7      	b.n	8011018 <__hexdig_fun+0xa>
 8011028:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801102c:	2b05      	cmp	r3, #5
 801102e:	d801      	bhi.n	8011034 <__hexdig_fun+0x26>
 8011030:	3827      	subs	r0, #39	@ 0x27
 8011032:	e7f1      	b.n	8011018 <__hexdig_fun+0xa>
 8011034:	2000      	movs	r0, #0
 8011036:	4770      	bx	lr

08011038 <__gethex>:
 8011038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801103c:	468a      	mov	sl, r1
 801103e:	4690      	mov	r8, r2
 8011040:	b085      	sub	sp, #20
 8011042:	9302      	str	r3, [sp, #8]
 8011044:	680b      	ldr	r3, [r1, #0]
 8011046:	9001      	str	r0, [sp, #4]
 8011048:	1c9c      	adds	r4, r3, #2
 801104a:	46a1      	mov	r9, r4
 801104c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011050:	2830      	cmp	r0, #48	@ 0x30
 8011052:	d0fa      	beq.n	801104a <__gethex+0x12>
 8011054:	eba9 0303 	sub.w	r3, r9, r3
 8011058:	f1a3 0b02 	sub.w	fp, r3, #2
 801105c:	f7ff ffd7 	bl	801100e <__hexdig_fun>
 8011060:	4605      	mov	r5, r0
 8011062:	2800      	cmp	r0, #0
 8011064:	d168      	bne.n	8011138 <__gethex+0x100>
 8011066:	2201      	movs	r2, #1
 8011068:	4648      	mov	r0, r9
 801106a:	499f      	ldr	r1, [pc, #636]	@ (80112e8 <__gethex+0x2b0>)
 801106c:	f7ff ff14 	bl	8010e98 <strncmp>
 8011070:	4607      	mov	r7, r0
 8011072:	2800      	cmp	r0, #0
 8011074:	d167      	bne.n	8011146 <__gethex+0x10e>
 8011076:	f899 0001 	ldrb.w	r0, [r9, #1]
 801107a:	4626      	mov	r6, r4
 801107c:	f7ff ffc7 	bl	801100e <__hexdig_fun>
 8011080:	2800      	cmp	r0, #0
 8011082:	d062      	beq.n	801114a <__gethex+0x112>
 8011084:	4623      	mov	r3, r4
 8011086:	7818      	ldrb	r0, [r3, #0]
 8011088:	4699      	mov	r9, r3
 801108a:	2830      	cmp	r0, #48	@ 0x30
 801108c:	f103 0301 	add.w	r3, r3, #1
 8011090:	d0f9      	beq.n	8011086 <__gethex+0x4e>
 8011092:	f7ff ffbc 	bl	801100e <__hexdig_fun>
 8011096:	fab0 f580 	clz	r5, r0
 801109a:	f04f 0b01 	mov.w	fp, #1
 801109e:	096d      	lsrs	r5, r5, #5
 80110a0:	464a      	mov	r2, r9
 80110a2:	4616      	mov	r6, r2
 80110a4:	7830      	ldrb	r0, [r6, #0]
 80110a6:	3201      	adds	r2, #1
 80110a8:	f7ff ffb1 	bl	801100e <__hexdig_fun>
 80110ac:	2800      	cmp	r0, #0
 80110ae:	d1f8      	bne.n	80110a2 <__gethex+0x6a>
 80110b0:	2201      	movs	r2, #1
 80110b2:	4630      	mov	r0, r6
 80110b4:	498c      	ldr	r1, [pc, #560]	@ (80112e8 <__gethex+0x2b0>)
 80110b6:	f7ff feef 	bl	8010e98 <strncmp>
 80110ba:	2800      	cmp	r0, #0
 80110bc:	d13f      	bne.n	801113e <__gethex+0x106>
 80110be:	b944      	cbnz	r4, 80110d2 <__gethex+0x9a>
 80110c0:	1c74      	adds	r4, r6, #1
 80110c2:	4622      	mov	r2, r4
 80110c4:	4616      	mov	r6, r2
 80110c6:	7830      	ldrb	r0, [r6, #0]
 80110c8:	3201      	adds	r2, #1
 80110ca:	f7ff ffa0 	bl	801100e <__hexdig_fun>
 80110ce:	2800      	cmp	r0, #0
 80110d0:	d1f8      	bne.n	80110c4 <__gethex+0x8c>
 80110d2:	1ba4      	subs	r4, r4, r6
 80110d4:	00a7      	lsls	r7, r4, #2
 80110d6:	7833      	ldrb	r3, [r6, #0]
 80110d8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80110dc:	2b50      	cmp	r3, #80	@ 0x50
 80110de:	d13e      	bne.n	801115e <__gethex+0x126>
 80110e0:	7873      	ldrb	r3, [r6, #1]
 80110e2:	2b2b      	cmp	r3, #43	@ 0x2b
 80110e4:	d033      	beq.n	801114e <__gethex+0x116>
 80110e6:	2b2d      	cmp	r3, #45	@ 0x2d
 80110e8:	d034      	beq.n	8011154 <__gethex+0x11c>
 80110ea:	2400      	movs	r4, #0
 80110ec:	1c71      	adds	r1, r6, #1
 80110ee:	7808      	ldrb	r0, [r1, #0]
 80110f0:	f7ff ff8d 	bl	801100e <__hexdig_fun>
 80110f4:	1e43      	subs	r3, r0, #1
 80110f6:	b2db      	uxtb	r3, r3
 80110f8:	2b18      	cmp	r3, #24
 80110fa:	d830      	bhi.n	801115e <__gethex+0x126>
 80110fc:	f1a0 0210 	sub.w	r2, r0, #16
 8011100:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011104:	f7ff ff83 	bl	801100e <__hexdig_fun>
 8011108:	f100 3cff 	add.w	ip, r0, #4294967295
 801110c:	fa5f fc8c 	uxtb.w	ip, ip
 8011110:	f1bc 0f18 	cmp.w	ip, #24
 8011114:	f04f 030a 	mov.w	r3, #10
 8011118:	d91e      	bls.n	8011158 <__gethex+0x120>
 801111a:	b104      	cbz	r4, 801111e <__gethex+0xe6>
 801111c:	4252      	negs	r2, r2
 801111e:	4417      	add	r7, r2
 8011120:	f8ca 1000 	str.w	r1, [sl]
 8011124:	b1ed      	cbz	r5, 8011162 <__gethex+0x12a>
 8011126:	f1bb 0f00 	cmp.w	fp, #0
 801112a:	bf0c      	ite	eq
 801112c:	2506      	moveq	r5, #6
 801112e:	2500      	movne	r5, #0
 8011130:	4628      	mov	r0, r5
 8011132:	b005      	add	sp, #20
 8011134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011138:	2500      	movs	r5, #0
 801113a:	462c      	mov	r4, r5
 801113c:	e7b0      	b.n	80110a0 <__gethex+0x68>
 801113e:	2c00      	cmp	r4, #0
 8011140:	d1c7      	bne.n	80110d2 <__gethex+0x9a>
 8011142:	4627      	mov	r7, r4
 8011144:	e7c7      	b.n	80110d6 <__gethex+0x9e>
 8011146:	464e      	mov	r6, r9
 8011148:	462f      	mov	r7, r5
 801114a:	2501      	movs	r5, #1
 801114c:	e7c3      	b.n	80110d6 <__gethex+0x9e>
 801114e:	2400      	movs	r4, #0
 8011150:	1cb1      	adds	r1, r6, #2
 8011152:	e7cc      	b.n	80110ee <__gethex+0xb6>
 8011154:	2401      	movs	r4, #1
 8011156:	e7fb      	b.n	8011150 <__gethex+0x118>
 8011158:	fb03 0002 	mla	r0, r3, r2, r0
 801115c:	e7ce      	b.n	80110fc <__gethex+0xc4>
 801115e:	4631      	mov	r1, r6
 8011160:	e7de      	b.n	8011120 <__gethex+0xe8>
 8011162:	4629      	mov	r1, r5
 8011164:	eba6 0309 	sub.w	r3, r6, r9
 8011168:	3b01      	subs	r3, #1
 801116a:	2b07      	cmp	r3, #7
 801116c:	dc0a      	bgt.n	8011184 <__gethex+0x14c>
 801116e:	9801      	ldr	r0, [sp, #4]
 8011170:	f7fe f954 	bl	800f41c <_Balloc>
 8011174:	4604      	mov	r4, r0
 8011176:	b940      	cbnz	r0, 801118a <__gethex+0x152>
 8011178:	4602      	mov	r2, r0
 801117a:	21e4      	movs	r1, #228	@ 0xe4
 801117c:	4b5b      	ldr	r3, [pc, #364]	@ (80112ec <__gethex+0x2b4>)
 801117e:	485c      	ldr	r0, [pc, #368]	@ (80112f0 <__gethex+0x2b8>)
 8011180:	f7ff fec0 	bl	8010f04 <__assert_func>
 8011184:	3101      	adds	r1, #1
 8011186:	105b      	asrs	r3, r3, #1
 8011188:	e7ef      	b.n	801116a <__gethex+0x132>
 801118a:	2300      	movs	r3, #0
 801118c:	f100 0a14 	add.w	sl, r0, #20
 8011190:	4655      	mov	r5, sl
 8011192:	469b      	mov	fp, r3
 8011194:	45b1      	cmp	r9, r6
 8011196:	d337      	bcc.n	8011208 <__gethex+0x1d0>
 8011198:	f845 bb04 	str.w	fp, [r5], #4
 801119c:	eba5 050a 	sub.w	r5, r5, sl
 80111a0:	10ad      	asrs	r5, r5, #2
 80111a2:	6125      	str	r5, [r4, #16]
 80111a4:	4658      	mov	r0, fp
 80111a6:	f7fe fa2b 	bl	800f600 <__hi0bits>
 80111aa:	016d      	lsls	r5, r5, #5
 80111ac:	f8d8 6000 	ldr.w	r6, [r8]
 80111b0:	1a2d      	subs	r5, r5, r0
 80111b2:	42b5      	cmp	r5, r6
 80111b4:	dd54      	ble.n	8011260 <__gethex+0x228>
 80111b6:	1bad      	subs	r5, r5, r6
 80111b8:	4629      	mov	r1, r5
 80111ba:	4620      	mov	r0, r4
 80111bc:	f7fe fdb3 	bl	800fd26 <__any_on>
 80111c0:	4681      	mov	r9, r0
 80111c2:	b178      	cbz	r0, 80111e4 <__gethex+0x1ac>
 80111c4:	f04f 0901 	mov.w	r9, #1
 80111c8:	1e6b      	subs	r3, r5, #1
 80111ca:	1159      	asrs	r1, r3, #5
 80111cc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80111d0:	f003 021f 	and.w	r2, r3, #31
 80111d4:	fa09 f202 	lsl.w	r2, r9, r2
 80111d8:	420a      	tst	r2, r1
 80111da:	d003      	beq.n	80111e4 <__gethex+0x1ac>
 80111dc:	454b      	cmp	r3, r9
 80111de:	dc36      	bgt.n	801124e <__gethex+0x216>
 80111e0:	f04f 0902 	mov.w	r9, #2
 80111e4:	4629      	mov	r1, r5
 80111e6:	4620      	mov	r0, r4
 80111e8:	f7ff febe 	bl	8010f68 <rshift>
 80111ec:	442f      	add	r7, r5
 80111ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80111f2:	42bb      	cmp	r3, r7
 80111f4:	da42      	bge.n	801127c <__gethex+0x244>
 80111f6:	4621      	mov	r1, r4
 80111f8:	9801      	ldr	r0, [sp, #4]
 80111fa:	f7fe f94f 	bl	800f49c <_Bfree>
 80111fe:	2300      	movs	r3, #0
 8011200:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011202:	25a3      	movs	r5, #163	@ 0xa3
 8011204:	6013      	str	r3, [r2, #0]
 8011206:	e793      	b.n	8011130 <__gethex+0xf8>
 8011208:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801120c:	2a2e      	cmp	r2, #46	@ 0x2e
 801120e:	d012      	beq.n	8011236 <__gethex+0x1fe>
 8011210:	2b20      	cmp	r3, #32
 8011212:	d104      	bne.n	801121e <__gethex+0x1e6>
 8011214:	f845 bb04 	str.w	fp, [r5], #4
 8011218:	f04f 0b00 	mov.w	fp, #0
 801121c:	465b      	mov	r3, fp
 801121e:	7830      	ldrb	r0, [r6, #0]
 8011220:	9303      	str	r3, [sp, #12]
 8011222:	f7ff fef4 	bl	801100e <__hexdig_fun>
 8011226:	9b03      	ldr	r3, [sp, #12]
 8011228:	f000 000f 	and.w	r0, r0, #15
 801122c:	4098      	lsls	r0, r3
 801122e:	ea4b 0b00 	orr.w	fp, fp, r0
 8011232:	3304      	adds	r3, #4
 8011234:	e7ae      	b.n	8011194 <__gethex+0x15c>
 8011236:	45b1      	cmp	r9, r6
 8011238:	d8ea      	bhi.n	8011210 <__gethex+0x1d8>
 801123a:	2201      	movs	r2, #1
 801123c:	4630      	mov	r0, r6
 801123e:	492a      	ldr	r1, [pc, #168]	@ (80112e8 <__gethex+0x2b0>)
 8011240:	9303      	str	r3, [sp, #12]
 8011242:	f7ff fe29 	bl	8010e98 <strncmp>
 8011246:	9b03      	ldr	r3, [sp, #12]
 8011248:	2800      	cmp	r0, #0
 801124a:	d1e1      	bne.n	8011210 <__gethex+0x1d8>
 801124c:	e7a2      	b.n	8011194 <__gethex+0x15c>
 801124e:	4620      	mov	r0, r4
 8011250:	1ea9      	subs	r1, r5, #2
 8011252:	f7fe fd68 	bl	800fd26 <__any_on>
 8011256:	2800      	cmp	r0, #0
 8011258:	d0c2      	beq.n	80111e0 <__gethex+0x1a8>
 801125a:	f04f 0903 	mov.w	r9, #3
 801125e:	e7c1      	b.n	80111e4 <__gethex+0x1ac>
 8011260:	da09      	bge.n	8011276 <__gethex+0x23e>
 8011262:	1b75      	subs	r5, r6, r5
 8011264:	4621      	mov	r1, r4
 8011266:	462a      	mov	r2, r5
 8011268:	9801      	ldr	r0, [sp, #4]
 801126a:	f7fe fb2d 	bl	800f8c8 <__lshift>
 801126e:	4604      	mov	r4, r0
 8011270:	1b7f      	subs	r7, r7, r5
 8011272:	f100 0a14 	add.w	sl, r0, #20
 8011276:	f04f 0900 	mov.w	r9, #0
 801127a:	e7b8      	b.n	80111ee <__gethex+0x1b6>
 801127c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011280:	42bd      	cmp	r5, r7
 8011282:	dd6f      	ble.n	8011364 <__gethex+0x32c>
 8011284:	1bed      	subs	r5, r5, r7
 8011286:	42ae      	cmp	r6, r5
 8011288:	dc34      	bgt.n	80112f4 <__gethex+0x2bc>
 801128a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801128e:	2b02      	cmp	r3, #2
 8011290:	d022      	beq.n	80112d8 <__gethex+0x2a0>
 8011292:	2b03      	cmp	r3, #3
 8011294:	d024      	beq.n	80112e0 <__gethex+0x2a8>
 8011296:	2b01      	cmp	r3, #1
 8011298:	d115      	bne.n	80112c6 <__gethex+0x28e>
 801129a:	42ae      	cmp	r6, r5
 801129c:	d113      	bne.n	80112c6 <__gethex+0x28e>
 801129e:	2e01      	cmp	r6, #1
 80112a0:	d10b      	bne.n	80112ba <__gethex+0x282>
 80112a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80112a6:	9a02      	ldr	r2, [sp, #8]
 80112a8:	2562      	movs	r5, #98	@ 0x62
 80112aa:	6013      	str	r3, [r2, #0]
 80112ac:	2301      	movs	r3, #1
 80112ae:	6123      	str	r3, [r4, #16]
 80112b0:	f8ca 3000 	str.w	r3, [sl]
 80112b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80112b6:	601c      	str	r4, [r3, #0]
 80112b8:	e73a      	b.n	8011130 <__gethex+0xf8>
 80112ba:	4620      	mov	r0, r4
 80112bc:	1e71      	subs	r1, r6, #1
 80112be:	f7fe fd32 	bl	800fd26 <__any_on>
 80112c2:	2800      	cmp	r0, #0
 80112c4:	d1ed      	bne.n	80112a2 <__gethex+0x26a>
 80112c6:	4621      	mov	r1, r4
 80112c8:	9801      	ldr	r0, [sp, #4]
 80112ca:	f7fe f8e7 	bl	800f49c <_Bfree>
 80112ce:	2300      	movs	r3, #0
 80112d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80112d2:	2550      	movs	r5, #80	@ 0x50
 80112d4:	6013      	str	r3, [r2, #0]
 80112d6:	e72b      	b.n	8011130 <__gethex+0xf8>
 80112d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d1f3      	bne.n	80112c6 <__gethex+0x28e>
 80112de:	e7e0      	b.n	80112a2 <__gethex+0x26a>
 80112e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d1dd      	bne.n	80112a2 <__gethex+0x26a>
 80112e6:	e7ee      	b.n	80112c6 <__gethex+0x28e>
 80112e8:	08011f98 	.word	0x08011f98
 80112ec:	08011e2f 	.word	0x08011e2f
 80112f0:	08012146 	.word	0x08012146
 80112f4:	1e6f      	subs	r7, r5, #1
 80112f6:	f1b9 0f00 	cmp.w	r9, #0
 80112fa:	d130      	bne.n	801135e <__gethex+0x326>
 80112fc:	b127      	cbz	r7, 8011308 <__gethex+0x2d0>
 80112fe:	4639      	mov	r1, r7
 8011300:	4620      	mov	r0, r4
 8011302:	f7fe fd10 	bl	800fd26 <__any_on>
 8011306:	4681      	mov	r9, r0
 8011308:	2301      	movs	r3, #1
 801130a:	4629      	mov	r1, r5
 801130c:	1b76      	subs	r6, r6, r5
 801130e:	2502      	movs	r5, #2
 8011310:	117a      	asrs	r2, r7, #5
 8011312:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011316:	f007 071f 	and.w	r7, r7, #31
 801131a:	40bb      	lsls	r3, r7
 801131c:	4213      	tst	r3, r2
 801131e:	4620      	mov	r0, r4
 8011320:	bf18      	it	ne
 8011322:	f049 0902 	orrne.w	r9, r9, #2
 8011326:	f7ff fe1f 	bl	8010f68 <rshift>
 801132a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801132e:	f1b9 0f00 	cmp.w	r9, #0
 8011332:	d047      	beq.n	80113c4 <__gethex+0x38c>
 8011334:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011338:	2b02      	cmp	r3, #2
 801133a:	d015      	beq.n	8011368 <__gethex+0x330>
 801133c:	2b03      	cmp	r3, #3
 801133e:	d017      	beq.n	8011370 <__gethex+0x338>
 8011340:	2b01      	cmp	r3, #1
 8011342:	d109      	bne.n	8011358 <__gethex+0x320>
 8011344:	f019 0f02 	tst.w	r9, #2
 8011348:	d006      	beq.n	8011358 <__gethex+0x320>
 801134a:	f8da 3000 	ldr.w	r3, [sl]
 801134e:	ea49 0903 	orr.w	r9, r9, r3
 8011352:	f019 0f01 	tst.w	r9, #1
 8011356:	d10e      	bne.n	8011376 <__gethex+0x33e>
 8011358:	f045 0510 	orr.w	r5, r5, #16
 801135c:	e032      	b.n	80113c4 <__gethex+0x38c>
 801135e:	f04f 0901 	mov.w	r9, #1
 8011362:	e7d1      	b.n	8011308 <__gethex+0x2d0>
 8011364:	2501      	movs	r5, #1
 8011366:	e7e2      	b.n	801132e <__gethex+0x2f6>
 8011368:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801136a:	f1c3 0301 	rsb	r3, r3, #1
 801136e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011370:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011372:	2b00      	cmp	r3, #0
 8011374:	d0f0      	beq.n	8011358 <__gethex+0x320>
 8011376:	f04f 0c00 	mov.w	ip, #0
 801137a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801137e:	f104 0314 	add.w	r3, r4, #20
 8011382:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011386:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801138a:	4618      	mov	r0, r3
 801138c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011390:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011394:	d01b      	beq.n	80113ce <__gethex+0x396>
 8011396:	3201      	adds	r2, #1
 8011398:	6002      	str	r2, [r0, #0]
 801139a:	2d02      	cmp	r5, #2
 801139c:	f104 0314 	add.w	r3, r4, #20
 80113a0:	d13c      	bne.n	801141c <__gethex+0x3e4>
 80113a2:	f8d8 2000 	ldr.w	r2, [r8]
 80113a6:	3a01      	subs	r2, #1
 80113a8:	42b2      	cmp	r2, r6
 80113aa:	d109      	bne.n	80113c0 <__gethex+0x388>
 80113ac:	2201      	movs	r2, #1
 80113ae:	1171      	asrs	r1, r6, #5
 80113b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80113b4:	f006 061f 	and.w	r6, r6, #31
 80113b8:	fa02 f606 	lsl.w	r6, r2, r6
 80113bc:	421e      	tst	r6, r3
 80113be:	d13a      	bne.n	8011436 <__gethex+0x3fe>
 80113c0:	f045 0520 	orr.w	r5, r5, #32
 80113c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80113c6:	601c      	str	r4, [r3, #0]
 80113c8:	9b02      	ldr	r3, [sp, #8]
 80113ca:	601f      	str	r7, [r3, #0]
 80113cc:	e6b0      	b.n	8011130 <__gethex+0xf8>
 80113ce:	4299      	cmp	r1, r3
 80113d0:	f843 cc04 	str.w	ip, [r3, #-4]
 80113d4:	d8d9      	bhi.n	801138a <__gethex+0x352>
 80113d6:	68a3      	ldr	r3, [r4, #8]
 80113d8:	459b      	cmp	fp, r3
 80113da:	db17      	blt.n	801140c <__gethex+0x3d4>
 80113dc:	6861      	ldr	r1, [r4, #4]
 80113de:	9801      	ldr	r0, [sp, #4]
 80113e0:	3101      	adds	r1, #1
 80113e2:	f7fe f81b 	bl	800f41c <_Balloc>
 80113e6:	4681      	mov	r9, r0
 80113e8:	b918      	cbnz	r0, 80113f2 <__gethex+0x3ba>
 80113ea:	4602      	mov	r2, r0
 80113ec:	2184      	movs	r1, #132	@ 0x84
 80113ee:	4b19      	ldr	r3, [pc, #100]	@ (8011454 <__gethex+0x41c>)
 80113f0:	e6c5      	b.n	801117e <__gethex+0x146>
 80113f2:	6922      	ldr	r2, [r4, #16]
 80113f4:	f104 010c 	add.w	r1, r4, #12
 80113f8:	3202      	adds	r2, #2
 80113fa:	0092      	lsls	r2, r2, #2
 80113fc:	300c      	adds	r0, #12
 80113fe:	f7ff fd6d 	bl	8010edc <memcpy>
 8011402:	4621      	mov	r1, r4
 8011404:	9801      	ldr	r0, [sp, #4]
 8011406:	f7fe f849 	bl	800f49c <_Bfree>
 801140a:	464c      	mov	r4, r9
 801140c:	6923      	ldr	r3, [r4, #16]
 801140e:	1c5a      	adds	r2, r3, #1
 8011410:	6122      	str	r2, [r4, #16]
 8011412:	2201      	movs	r2, #1
 8011414:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011418:	615a      	str	r2, [r3, #20]
 801141a:	e7be      	b.n	801139a <__gethex+0x362>
 801141c:	6922      	ldr	r2, [r4, #16]
 801141e:	455a      	cmp	r2, fp
 8011420:	dd0b      	ble.n	801143a <__gethex+0x402>
 8011422:	2101      	movs	r1, #1
 8011424:	4620      	mov	r0, r4
 8011426:	f7ff fd9f 	bl	8010f68 <rshift>
 801142a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801142e:	3701      	adds	r7, #1
 8011430:	42bb      	cmp	r3, r7
 8011432:	f6ff aee0 	blt.w	80111f6 <__gethex+0x1be>
 8011436:	2501      	movs	r5, #1
 8011438:	e7c2      	b.n	80113c0 <__gethex+0x388>
 801143a:	f016 061f 	ands.w	r6, r6, #31
 801143e:	d0fa      	beq.n	8011436 <__gethex+0x3fe>
 8011440:	4453      	add	r3, sl
 8011442:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011446:	f7fe f8db 	bl	800f600 <__hi0bits>
 801144a:	f1c6 0620 	rsb	r6, r6, #32
 801144e:	42b0      	cmp	r0, r6
 8011450:	dbe7      	blt.n	8011422 <__gethex+0x3ea>
 8011452:	e7f0      	b.n	8011436 <__gethex+0x3fe>
 8011454:	08011e2f 	.word	0x08011e2f

08011458 <L_shift>:
 8011458:	f1c2 0208 	rsb	r2, r2, #8
 801145c:	0092      	lsls	r2, r2, #2
 801145e:	b570      	push	{r4, r5, r6, lr}
 8011460:	f1c2 0620 	rsb	r6, r2, #32
 8011464:	6843      	ldr	r3, [r0, #4]
 8011466:	6804      	ldr	r4, [r0, #0]
 8011468:	fa03 f506 	lsl.w	r5, r3, r6
 801146c:	432c      	orrs	r4, r5
 801146e:	40d3      	lsrs	r3, r2
 8011470:	6004      	str	r4, [r0, #0]
 8011472:	f840 3f04 	str.w	r3, [r0, #4]!
 8011476:	4288      	cmp	r0, r1
 8011478:	d3f4      	bcc.n	8011464 <L_shift+0xc>
 801147a:	bd70      	pop	{r4, r5, r6, pc}

0801147c <__match>:
 801147c:	b530      	push	{r4, r5, lr}
 801147e:	6803      	ldr	r3, [r0, #0]
 8011480:	3301      	adds	r3, #1
 8011482:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011486:	b914      	cbnz	r4, 801148e <__match+0x12>
 8011488:	6003      	str	r3, [r0, #0]
 801148a:	2001      	movs	r0, #1
 801148c:	bd30      	pop	{r4, r5, pc}
 801148e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011492:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011496:	2d19      	cmp	r5, #25
 8011498:	bf98      	it	ls
 801149a:	3220      	addls	r2, #32
 801149c:	42a2      	cmp	r2, r4
 801149e:	d0f0      	beq.n	8011482 <__match+0x6>
 80114a0:	2000      	movs	r0, #0
 80114a2:	e7f3      	b.n	801148c <__match+0x10>

080114a4 <__hexnan>:
 80114a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114a8:	2500      	movs	r5, #0
 80114aa:	680b      	ldr	r3, [r1, #0]
 80114ac:	4682      	mov	sl, r0
 80114ae:	115e      	asrs	r6, r3, #5
 80114b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80114b4:	f013 031f 	ands.w	r3, r3, #31
 80114b8:	bf18      	it	ne
 80114ba:	3604      	addne	r6, #4
 80114bc:	1f37      	subs	r7, r6, #4
 80114be:	4690      	mov	r8, r2
 80114c0:	46b9      	mov	r9, r7
 80114c2:	463c      	mov	r4, r7
 80114c4:	46ab      	mov	fp, r5
 80114c6:	b087      	sub	sp, #28
 80114c8:	6801      	ldr	r1, [r0, #0]
 80114ca:	9301      	str	r3, [sp, #4]
 80114cc:	f846 5c04 	str.w	r5, [r6, #-4]
 80114d0:	9502      	str	r5, [sp, #8]
 80114d2:	784a      	ldrb	r2, [r1, #1]
 80114d4:	1c4b      	adds	r3, r1, #1
 80114d6:	9303      	str	r3, [sp, #12]
 80114d8:	b342      	cbz	r2, 801152c <__hexnan+0x88>
 80114da:	4610      	mov	r0, r2
 80114dc:	9105      	str	r1, [sp, #20]
 80114de:	9204      	str	r2, [sp, #16]
 80114e0:	f7ff fd95 	bl	801100e <__hexdig_fun>
 80114e4:	2800      	cmp	r0, #0
 80114e6:	d151      	bne.n	801158c <__hexnan+0xe8>
 80114e8:	9a04      	ldr	r2, [sp, #16]
 80114ea:	9905      	ldr	r1, [sp, #20]
 80114ec:	2a20      	cmp	r2, #32
 80114ee:	d818      	bhi.n	8011522 <__hexnan+0x7e>
 80114f0:	9b02      	ldr	r3, [sp, #8]
 80114f2:	459b      	cmp	fp, r3
 80114f4:	dd13      	ble.n	801151e <__hexnan+0x7a>
 80114f6:	454c      	cmp	r4, r9
 80114f8:	d206      	bcs.n	8011508 <__hexnan+0x64>
 80114fa:	2d07      	cmp	r5, #7
 80114fc:	dc04      	bgt.n	8011508 <__hexnan+0x64>
 80114fe:	462a      	mov	r2, r5
 8011500:	4649      	mov	r1, r9
 8011502:	4620      	mov	r0, r4
 8011504:	f7ff ffa8 	bl	8011458 <L_shift>
 8011508:	4544      	cmp	r4, r8
 801150a:	d952      	bls.n	80115b2 <__hexnan+0x10e>
 801150c:	2300      	movs	r3, #0
 801150e:	f1a4 0904 	sub.w	r9, r4, #4
 8011512:	f844 3c04 	str.w	r3, [r4, #-4]
 8011516:	461d      	mov	r5, r3
 8011518:	464c      	mov	r4, r9
 801151a:	f8cd b008 	str.w	fp, [sp, #8]
 801151e:	9903      	ldr	r1, [sp, #12]
 8011520:	e7d7      	b.n	80114d2 <__hexnan+0x2e>
 8011522:	2a29      	cmp	r2, #41	@ 0x29
 8011524:	d157      	bne.n	80115d6 <__hexnan+0x132>
 8011526:	3102      	adds	r1, #2
 8011528:	f8ca 1000 	str.w	r1, [sl]
 801152c:	f1bb 0f00 	cmp.w	fp, #0
 8011530:	d051      	beq.n	80115d6 <__hexnan+0x132>
 8011532:	454c      	cmp	r4, r9
 8011534:	d206      	bcs.n	8011544 <__hexnan+0xa0>
 8011536:	2d07      	cmp	r5, #7
 8011538:	dc04      	bgt.n	8011544 <__hexnan+0xa0>
 801153a:	462a      	mov	r2, r5
 801153c:	4649      	mov	r1, r9
 801153e:	4620      	mov	r0, r4
 8011540:	f7ff ff8a 	bl	8011458 <L_shift>
 8011544:	4544      	cmp	r4, r8
 8011546:	d936      	bls.n	80115b6 <__hexnan+0x112>
 8011548:	4623      	mov	r3, r4
 801154a:	f1a8 0204 	sub.w	r2, r8, #4
 801154e:	f853 1b04 	ldr.w	r1, [r3], #4
 8011552:	429f      	cmp	r7, r3
 8011554:	f842 1f04 	str.w	r1, [r2, #4]!
 8011558:	d2f9      	bcs.n	801154e <__hexnan+0xaa>
 801155a:	1b3b      	subs	r3, r7, r4
 801155c:	f023 0303 	bic.w	r3, r3, #3
 8011560:	3304      	adds	r3, #4
 8011562:	3401      	adds	r4, #1
 8011564:	3e03      	subs	r6, #3
 8011566:	42b4      	cmp	r4, r6
 8011568:	bf88      	it	hi
 801156a:	2304      	movhi	r3, #4
 801156c:	2200      	movs	r2, #0
 801156e:	4443      	add	r3, r8
 8011570:	f843 2b04 	str.w	r2, [r3], #4
 8011574:	429f      	cmp	r7, r3
 8011576:	d2fb      	bcs.n	8011570 <__hexnan+0xcc>
 8011578:	683b      	ldr	r3, [r7, #0]
 801157a:	b91b      	cbnz	r3, 8011584 <__hexnan+0xe0>
 801157c:	4547      	cmp	r7, r8
 801157e:	d128      	bne.n	80115d2 <__hexnan+0x12e>
 8011580:	2301      	movs	r3, #1
 8011582:	603b      	str	r3, [r7, #0]
 8011584:	2005      	movs	r0, #5
 8011586:	b007      	add	sp, #28
 8011588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801158c:	3501      	adds	r5, #1
 801158e:	2d08      	cmp	r5, #8
 8011590:	f10b 0b01 	add.w	fp, fp, #1
 8011594:	dd06      	ble.n	80115a4 <__hexnan+0x100>
 8011596:	4544      	cmp	r4, r8
 8011598:	d9c1      	bls.n	801151e <__hexnan+0x7a>
 801159a:	2300      	movs	r3, #0
 801159c:	2501      	movs	r5, #1
 801159e:	f844 3c04 	str.w	r3, [r4, #-4]
 80115a2:	3c04      	subs	r4, #4
 80115a4:	6822      	ldr	r2, [r4, #0]
 80115a6:	f000 000f 	and.w	r0, r0, #15
 80115aa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80115ae:	6020      	str	r0, [r4, #0]
 80115b0:	e7b5      	b.n	801151e <__hexnan+0x7a>
 80115b2:	2508      	movs	r5, #8
 80115b4:	e7b3      	b.n	801151e <__hexnan+0x7a>
 80115b6:	9b01      	ldr	r3, [sp, #4]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d0dd      	beq.n	8011578 <__hexnan+0xd4>
 80115bc:	f04f 32ff 	mov.w	r2, #4294967295
 80115c0:	f1c3 0320 	rsb	r3, r3, #32
 80115c4:	40da      	lsrs	r2, r3
 80115c6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80115ca:	4013      	ands	r3, r2
 80115cc:	f846 3c04 	str.w	r3, [r6, #-4]
 80115d0:	e7d2      	b.n	8011578 <__hexnan+0xd4>
 80115d2:	3f04      	subs	r7, #4
 80115d4:	e7d0      	b.n	8011578 <__hexnan+0xd4>
 80115d6:	2004      	movs	r0, #4
 80115d8:	e7d5      	b.n	8011586 <__hexnan+0xe2>

080115da <__ascii_mbtowc>:
 80115da:	b082      	sub	sp, #8
 80115dc:	b901      	cbnz	r1, 80115e0 <__ascii_mbtowc+0x6>
 80115de:	a901      	add	r1, sp, #4
 80115e0:	b142      	cbz	r2, 80115f4 <__ascii_mbtowc+0x1a>
 80115e2:	b14b      	cbz	r3, 80115f8 <__ascii_mbtowc+0x1e>
 80115e4:	7813      	ldrb	r3, [r2, #0]
 80115e6:	600b      	str	r3, [r1, #0]
 80115e8:	7812      	ldrb	r2, [r2, #0]
 80115ea:	1e10      	subs	r0, r2, #0
 80115ec:	bf18      	it	ne
 80115ee:	2001      	movne	r0, #1
 80115f0:	b002      	add	sp, #8
 80115f2:	4770      	bx	lr
 80115f4:	4610      	mov	r0, r2
 80115f6:	e7fb      	b.n	80115f0 <__ascii_mbtowc+0x16>
 80115f8:	f06f 0001 	mvn.w	r0, #1
 80115fc:	e7f8      	b.n	80115f0 <__ascii_mbtowc+0x16>

080115fe <_realloc_r>:
 80115fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011602:	4680      	mov	r8, r0
 8011604:	4615      	mov	r5, r2
 8011606:	460c      	mov	r4, r1
 8011608:	b921      	cbnz	r1, 8011614 <_realloc_r+0x16>
 801160a:	4611      	mov	r1, r2
 801160c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011610:	f7fd be78 	b.w	800f304 <_malloc_r>
 8011614:	b92a      	cbnz	r2, 8011622 <_realloc_r+0x24>
 8011616:	f7fd fe03 	bl	800f220 <_free_r>
 801161a:	2400      	movs	r4, #0
 801161c:	4620      	mov	r0, r4
 801161e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011622:	f000 f840 	bl	80116a6 <_malloc_usable_size_r>
 8011626:	4285      	cmp	r5, r0
 8011628:	4606      	mov	r6, r0
 801162a:	d802      	bhi.n	8011632 <_realloc_r+0x34>
 801162c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011630:	d8f4      	bhi.n	801161c <_realloc_r+0x1e>
 8011632:	4629      	mov	r1, r5
 8011634:	4640      	mov	r0, r8
 8011636:	f7fd fe65 	bl	800f304 <_malloc_r>
 801163a:	4607      	mov	r7, r0
 801163c:	2800      	cmp	r0, #0
 801163e:	d0ec      	beq.n	801161a <_realloc_r+0x1c>
 8011640:	42b5      	cmp	r5, r6
 8011642:	462a      	mov	r2, r5
 8011644:	4621      	mov	r1, r4
 8011646:	bf28      	it	cs
 8011648:	4632      	movcs	r2, r6
 801164a:	f7ff fc47 	bl	8010edc <memcpy>
 801164e:	4621      	mov	r1, r4
 8011650:	4640      	mov	r0, r8
 8011652:	f7fd fde5 	bl	800f220 <_free_r>
 8011656:	463c      	mov	r4, r7
 8011658:	e7e0      	b.n	801161c <_realloc_r+0x1e>

0801165a <__ascii_wctomb>:
 801165a:	4603      	mov	r3, r0
 801165c:	4608      	mov	r0, r1
 801165e:	b141      	cbz	r1, 8011672 <__ascii_wctomb+0x18>
 8011660:	2aff      	cmp	r2, #255	@ 0xff
 8011662:	d904      	bls.n	801166e <__ascii_wctomb+0x14>
 8011664:	228a      	movs	r2, #138	@ 0x8a
 8011666:	f04f 30ff 	mov.w	r0, #4294967295
 801166a:	601a      	str	r2, [r3, #0]
 801166c:	4770      	bx	lr
 801166e:	2001      	movs	r0, #1
 8011670:	700a      	strb	r2, [r1, #0]
 8011672:	4770      	bx	lr

08011674 <fiprintf>:
 8011674:	b40e      	push	{r1, r2, r3}
 8011676:	b503      	push	{r0, r1, lr}
 8011678:	4601      	mov	r1, r0
 801167a:	ab03      	add	r3, sp, #12
 801167c:	4805      	ldr	r0, [pc, #20]	@ (8011694 <fiprintf+0x20>)
 801167e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011682:	6800      	ldr	r0, [r0, #0]
 8011684:	9301      	str	r3, [sp, #4]
 8011686:	f000 f83d 	bl	8011704 <_vfiprintf_r>
 801168a:	b002      	add	sp, #8
 801168c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011690:	b003      	add	sp, #12
 8011692:	4770      	bx	lr
 8011694:	200001a8 	.word	0x200001a8

08011698 <abort>:
 8011698:	2006      	movs	r0, #6
 801169a:	b508      	push	{r3, lr}
 801169c:	f000 fa06 	bl	8011aac <raise>
 80116a0:	2001      	movs	r0, #1
 80116a2:	f7f0 ff0c 	bl	80024be <_exit>

080116a6 <_malloc_usable_size_r>:
 80116a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80116aa:	1f18      	subs	r0, r3, #4
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	bfbc      	itt	lt
 80116b0:	580b      	ldrlt	r3, [r1, r0]
 80116b2:	18c0      	addlt	r0, r0, r3
 80116b4:	4770      	bx	lr

080116b6 <__sfputc_r>:
 80116b6:	6893      	ldr	r3, [r2, #8]
 80116b8:	b410      	push	{r4}
 80116ba:	3b01      	subs	r3, #1
 80116bc:	2b00      	cmp	r3, #0
 80116be:	6093      	str	r3, [r2, #8]
 80116c0:	da07      	bge.n	80116d2 <__sfputc_r+0x1c>
 80116c2:	6994      	ldr	r4, [r2, #24]
 80116c4:	42a3      	cmp	r3, r4
 80116c6:	db01      	blt.n	80116cc <__sfputc_r+0x16>
 80116c8:	290a      	cmp	r1, #10
 80116ca:	d102      	bne.n	80116d2 <__sfputc_r+0x1c>
 80116cc:	bc10      	pop	{r4}
 80116ce:	f000 b931 	b.w	8011934 <__swbuf_r>
 80116d2:	6813      	ldr	r3, [r2, #0]
 80116d4:	1c58      	adds	r0, r3, #1
 80116d6:	6010      	str	r0, [r2, #0]
 80116d8:	7019      	strb	r1, [r3, #0]
 80116da:	4608      	mov	r0, r1
 80116dc:	bc10      	pop	{r4}
 80116de:	4770      	bx	lr

080116e0 <__sfputs_r>:
 80116e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116e2:	4606      	mov	r6, r0
 80116e4:	460f      	mov	r7, r1
 80116e6:	4614      	mov	r4, r2
 80116e8:	18d5      	adds	r5, r2, r3
 80116ea:	42ac      	cmp	r4, r5
 80116ec:	d101      	bne.n	80116f2 <__sfputs_r+0x12>
 80116ee:	2000      	movs	r0, #0
 80116f0:	e007      	b.n	8011702 <__sfputs_r+0x22>
 80116f2:	463a      	mov	r2, r7
 80116f4:	4630      	mov	r0, r6
 80116f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116fa:	f7ff ffdc 	bl	80116b6 <__sfputc_r>
 80116fe:	1c43      	adds	r3, r0, #1
 8011700:	d1f3      	bne.n	80116ea <__sfputs_r+0xa>
 8011702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011704 <_vfiprintf_r>:
 8011704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011708:	460d      	mov	r5, r1
 801170a:	4614      	mov	r4, r2
 801170c:	4698      	mov	r8, r3
 801170e:	4606      	mov	r6, r0
 8011710:	b09d      	sub	sp, #116	@ 0x74
 8011712:	b118      	cbz	r0, 801171c <_vfiprintf_r+0x18>
 8011714:	6a03      	ldr	r3, [r0, #32]
 8011716:	b90b      	cbnz	r3, 801171c <_vfiprintf_r+0x18>
 8011718:	f7fc fe04 	bl	800e324 <__sinit>
 801171c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801171e:	07d9      	lsls	r1, r3, #31
 8011720:	d405      	bmi.n	801172e <_vfiprintf_r+0x2a>
 8011722:	89ab      	ldrh	r3, [r5, #12]
 8011724:	059a      	lsls	r2, r3, #22
 8011726:	d402      	bmi.n	801172e <_vfiprintf_r+0x2a>
 8011728:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801172a:	f7fc ff12 	bl	800e552 <__retarget_lock_acquire_recursive>
 801172e:	89ab      	ldrh	r3, [r5, #12]
 8011730:	071b      	lsls	r3, r3, #28
 8011732:	d501      	bpl.n	8011738 <_vfiprintf_r+0x34>
 8011734:	692b      	ldr	r3, [r5, #16]
 8011736:	b99b      	cbnz	r3, 8011760 <_vfiprintf_r+0x5c>
 8011738:	4629      	mov	r1, r5
 801173a:	4630      	mov	r0, r6
 801173c:	f000 f938 	bl	80119b0 <__swsetup_r>
 8011740:	b170      	cbz	r0, 8011760 <_vfiprintf_r+0x5c>
 8011742:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011744:	07dc      	lsls	r4, r3, #31
 8011746:	d504      	bpl.n	8011752 <_vfiprintf_r+0x4e>
 8011748:	f04f 30ff 	mov.w	r0, #4294967295
 801174c:	b01d      	add	sp, #116	@ 0x74
 801174e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011752:	89ab      	ldrh	r3, [r5, #12]
 8011754:	0598      	lsls	r0, r3, #22
 8011756:	d4f7      	bmi.n	8011748 <_vfiprintf_r+0x44>
 8011758:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801175a:	f7fc fefb 	bl	800e554 <__retarget_lock_release_recursive>
 801175e:	e7f3      	b.n	8011748 <_vfiprintf_r+0x44>
 8011760:	2300      	movs	r3, #0
 8011762:	9309      	str	r3, [sp, #36]	@ 0x24
 8011764:	2320      	movs	r3, #32
 8011766:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801176a:	2330      	movs	r3, #48	@ 0x30
 801176c:	f04f 0901 	mov.w	r9, #1
 8011770:	f8cd 800c 	str.w	r8, [sp, #12]
 8011774:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8011920 <_vfiprintf_r+0x21c>
 8011778:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801177c:	4623      	mov	r3, r4
 801177e:	469a      	mov	sl, r3
 8011780:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011784:	b10a      	cbz	r2, 801178a <_vfiprintf_r+0x86>
 8011786:	2a25      	cmp	r2, #37	@ 0x25
 8011788:	d1f9      	bne.n	801177e <_vfiprintf_r+0x7a>
 801178a:	ebba 0b04 	subs.w	fp, sl, r4
 801178e:	d00b      	beq.n	80117a8 <_vfiprintf_r+0xa4>
 8011790:	465b      	mov	r3, fp
 8011792:	4622      	mov	r2, r4
 8011794:	4629      	mov	r1, r5
 8011796:	4630      	mov	r0, r6
 8011798:	f7ff ffa2 	bl	80116e0 <__sfputs_r>
 801179c:	3001      	adds	r0, #1
 801179e:	f000 80a7 	beq.w	80118f0 <_vfiprintf_r+0x1ec>
 80117a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80117a4:	445a      	add	r2, fp
 80117a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80117a8:	f89a 3000 	ldrb.w	r3, [sl]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	f000 809f 	beq.w	80118f0 <_vfiprintf_r+0x1ec>
 80117b2:	2300      	movs	r3, #0
 80117b4:	f04f 32ff 	mov.w	r2, #4294967295
 80117b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80117bc:	f10a 0a01 	add.w	sl, sl, #1
 80117c0:	9304      	str	r3, [sp, #16]
 80117c2:	9307      	str	r3, [sp, #28]
 80117c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80117c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80117ca:	4654      	mov	r4, sl
 80117cc:	2205      	movs	r2, #5
 80117ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117d2:	4853      	ldr	r0, [pc, #332]	@ (8011920 <_vfiprintf_r+0x21c>)
 80117d4:	f7fc febf 	bl	800e556 <memchr>
 80117d8:	9a04      	ldr	r2, [sp, #16]
 80117da:	b9d8      	cbnz	r0, 8011814 <_vfiprintf_r+0x110>
 80117dc:	06d1      	lsls	r1, r2, #27
 80117de:	bf44      	itt	mi
 80117e0:	2320      	movmi	r3, #32
 80117e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80117e6:	0713      	lsls	r3, r2, #28
 80117e8:	bf44      	itt	mi
 80117ea:	232b      	movmi	r3, #43	@ 0x2b
 80117ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80117f0:	f89a 3000 	ldrb.w	r3, [sl]
 80117f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80117f6:	d015      	beq.n	8011824 <_vfiprintf_r+0x120>
 80117f8:	4654      	mov	r4, sl
 80117fa:	2000      	movs	r0, #0
 80117fc:	f04f 0c0a 	mov.w	ip, #10
 8011800:	9a07      	ldr	r2, [sp, #28]
 8011802:	4621      	mov	r1, r4
 8011804:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011808:	3b30      	subs	r3, #48	@ 0x30
 801180a:	2b09      	cmp	r3, #9
 801180c:	d94b      	bls.n	80118a6 <_vfiprintf_r+0x1a2>
 801180e:	b1b0      	cbz	r0, 801183e <_vfiprintf_r+0x13a>
 8011810:	9207      	str	r2, [sp, #28]
 8011812:	e014      	b.n	801183e <_vfiprintf_r+0x13a>
 8011814:	eba0 0308 	sub.w	r3, r0, r8
 8011818:	fa09 f303 	lsl.w	r3, r9, r3
 801181c:	4313      	orrs	r3, r2
 801181e:	46a2      	mov	sl, r4
 8011820:	9304      	str	r3, [sp, #16]
 8011822:	e7d2      	b.n	80117ca <_vfiprintf_r+0xc6>
 8011824:	9b03      	ldr	r3, [sp, #12]
 8011826:	1d19      	adds	r1, r3, #4
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	9103      	str	r1, [sp, #12]
 801182c:	2b00      	cmp	r3, #0
 801182e:	bfbb      	ittet	lt
 8011830:	425b      	neglt	r3, r3
 8011832:	f042 0202 	orrlt.w	r2, r2, #2
 8011836:	9307      	strge	r3, [sp, #28]
 8011838:	9307      	strlt	r3, [sp, #28]
 801183a:	bfb8      	it	lt
 801183c:	9204      	strlt	r2, [sp, #16]
 801183e:	7823      	ldrb	r3, [r4, #0]
 8011840:	2b2e      	cmp	r3, #46	@ 0x2e
 8011842:	d10a      	bne.n	801185a <_vfiprintf_r+0x156>
 8011844:	7863      	ldrb	r3, [r4, #1]
 8011846:	2b2a      	cmp	r3, #42	@ 0x2a
 8011848:	d132      	bne.n	80118b0 <_vfiprintf_r+0x1ac>
 801184a:	9b03      	ldr	r3, [sp, #12]
 801184c:	3402      	adds	r4, #2
 801184e:	1d1a      	adds	r2, r3, #4
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	9203      	str	r2, [sp, #12]
 8011854:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011858:	9305      	str	r3, [sp, #20]
 801185a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8011924 <_vfiprintf_r+0x220>
 801185e:	2203      	movs	r2, #3
 8011860:	4650      	mov	r0, sl
 8011862:	7821      	ldrb	r1, [r4, #0]
 8011864:	f7fc fe77 	bl	800e556 <memchr>
 8011868:	b138      	cbz	r0, 801187a <_vfiprintf_r+0x176>
 801186a:	2240      	movs	r2, #64	@ 0x40
 801186c:	9b04      	ldr	r3, [sp, #16]
 801186e:	eba0 000a 	sub.w	r0, r0, sl
 8011872:	4082      	lsls	r2, r0
 8011874:	4313      	orrs	r3, r2
 8011876:	3401      	adds	r4, #1
 8011878:	9304      	str	r3, [sp, #16]
 801187a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801187e:	2206      	movs	r2, #6
 8011880:	4829      	ldr	r0, [pc, #164]	@ (8011928 <_vfiprintf_r+0x224>)
 8011882:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011886:	f7fc fe66 	bl	800e556 <memchr>
 801188a:	2800      	cmp	r0, #0
 801188c:	d03f      	beq.n	801190e <_vfiprintf_r+0x20a>
 801188e:	4b27      	ldr	r3, [pc, #156]	@ (801192c <_vfiprintf_r+0x228>)
 8011890:	bb1b      	cbnz	r3, 80118da <_vfiprintf_r+0x1d6>
 8011892:	9b03      	ldr	r3, [sp, #12]
 8011894:	3307      	adds	r3, #7
 8011896:	f023 0307 	bic.w	r3, r3, #7
 801189a:	3308      	adds	r3, #8
 801189c:	9303      	str	r3, [sp, #12]
 801189e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80118a0:	443b      	add	r3, r7
 80118a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80118a4:	e76a      	b.n	801177c <_vfiprintf_r+0x78>
 80118a6:	460c      	mov	r4, r1
 80118a8:	2001      	movs	r0, #1
 80118aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80118ae:	e7a8      	b.n	8011802 <_vfiprintf_r+0xfe>
 80118b0:	2300      	movs	r3, #0
 80118b2:	f04f 0c0a 	mov.w	ip, #10
 80118b6:	4619      	mov	r1, r3
 80118b8:	3401      	adds	r4, #1
 80118ba:	9305      	str	r3, [sp, #20]
 80118bc:	4620      	mov	r0, r4
 80118be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80118c2:	3a30      	subs	r2, #48	@ 0x30
 80118c4:	2a09      	cmp	r2, #9
 80118c6:	d903      	bls.n	80118d0 <_vfiprintf_r+0x1cc>
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d0c6      	beq.n	801185a <_vfiprintf_r+0x156>
 80118cc:	9105      	str	r1, [sp, #20]
 80118ce:	e7c4      	b.n	801185a <_vfiprintf_r+0x156>
 80118d0:	4604      	mov	r4, r0
 80118d2:	2301      	movs	r3, #1
 80118d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80118d8:	e7f0      	b.n	80118bc <_vfiprintf_r+0x1b8>
 80118da:	ab03      	add	r3, sp, #12
 80118dc:	9300      	str	r3, [sp, #0]
 80118de:	462a      	mov	r2, r5
 80118e0:	4630      	mov	r0, r6
 80118e2:	4b13      	ldr	r3, [pc, #76]	@ (8011930 <_vfiprintf_r+0x22c>)
 80118e4:	a904      	add	r1, sp, #16
 80118e6:	f7fb fec3 	bl	800d670 <_printf_float>
 80118ea:	4607      	mov	r7, r0
 80118ec:	1c78      	adds	r0, r7, #1
 80118ee:	d1d6      	bne.n	801189e <_vfiprintf_r+0x19a>
 80118f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80118f2:	07d9      	lsls	r1, r3, #31
 80118f4:	d405      	bmi.n	8011902 <_vfiprintf_r+0x1fe>
 80118f6:	89ab      	ldrh	r3, [r5, #12]
 80118f8:	059a      	lsls	r2, r3, #22
 80118fa:	d402      	bmi.n	8011902 <_vfiprintf_r+0x1fe>
 80118fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80118fe:	f7fc fe29 	bl	800e554 <__retarget_lock_release_recursive>
 8011902:	89ab      	ldrh	r3, [r5, #12]
 8011904:	065b      	lsls	r3, r3, #25
 8011906:	f53f af1f 	bmi.w	8011748 <_vfiprintf_r+0x44>
 801190a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801190c:	e71e      	b.n	801174c <_vfiprintf_r+0x48>
 801190e:	ab03      	add	r3, sp, #12
 8011910:	9300      	str	r3, [sp, #0]
 8011912:	462a      	mov	r2, r5
 8011914:	4630      	mov	r0, r6
 8011916:	4b06      	ldr	r3, [pc, #24]	@ (8011930 <_vfiprintf_r+0x22c>)
 8011918:	a904      	add	r1, sp, #16
 801191a:	f7fc f947 	bl	800dbac <_printf_i>
 801191e:	e7e4      	b.n	80118ea <_vfiprintf_r+0x1e6>
 8011920:	080120f1 	.word	0x080120f1
 8011924:	080120f7 	.word	0x080120f7
 8011928:	080120fb 	.word	0x080120fb
 801192c:	0800d671 	.word	0x0800d671
 8011930:	080116e1 	.word	0x080116e1

08011934 <__swbuf_r>:
 8011934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011936:	460e      	mov	r6, r1
 8011938:	4614      	mov	r4, r2
 801193a:	4605      	mov	r5, r0
 801193c:	b118      	cbz	r0, 8011946 <__swbuf_r+0x12>
 801193e:	6a03      	ldr	r3, [r0, #32]
 8011940:	b90b      	cbnz	r3, 8011946 <__swbuf_r+0x12>
 8011942:	f7fc fcef 	bl	800e324 <__sinit>
 8011946:	69a3      	ldr	r3, [r4, #24]
 8011948:	60a3      	str	r3, [r4, #8]
 801194a:	89a3      	ldrh	r3, [r4, #12]
 801194c:	071a      	lsls	r2, r3, #28
 801194e:	d501      	bpl.n	8011954 <__swbuf_r+0x20>
 8011950:	6923      	ldr	r3, [r4, #16]
 8011952:	b943      	cbnz	r3, 8011966 <__swbuf_r+0x32>
 8011954:	4621      	mov	r1, r4
 8011956:	4628      	mov	r0, r5
 8011958:	f000 f82a 	bl	80119b0 <__swsetup_r>
 801195c:	b118      	cbz	r0, 8011966 <__swbuf_r+0x32>
 801195e:	f04f 37ff 	mov.w	r7, #4294967295
 8011962:	4638      	mov	r0, r7
 8011964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011966:	6823      	ldr	r3, [r4, #0]
 8011968:	6922      	ldr	r2, [r4, #16]
 801196a:	b2f6      	uxtb	r6, r6
 801196c:	1a98      	subs	r0, r3, r2
 801196e:	6963      	ldr	r3, [r4, #20]
 8011970:	4637      	mov	r7, r6
 8011972:	4283      	cmp	r3, r0
 8011974:	dc05      	bgt.n	8011982 <__swbuf_r+0x4e>
 8011976:	4621      	mov	r1, r4
 8011978:	4628      	mov	r0, r5
 801197a:	f7ff fa4b 	bl	8010e14 <_fflush_r>
 801197e:	2800      	cmp	r0, #0
 8011980:	d1ed      	bne.n	801195e <__swbuf_r+0x2a>
 8011982:	68a3      	ldr	r3, [r4, #8]
 8011984:	3b01      	subs	r3, #1
 8011986:	60a3      	str	r3, [r4, #8]
 8011988:	6823      	ldr	r3, [r4, #0]
 801198a:	1c5a      	adds	r2, r3, #1
 801198c:	6022      	str	r2, [r4, #0]
 801198e:	701e      	strb	r6, [r3, #0]
 8011990:	6962      	ldr	r2, [r4, #20]
 8011992:	1c43      	adds	r3, r0, #1
 8011994:	429a      	cmp	r2, r3
 8011996:	d004      	beq.n	80119a2 <__swbuf_r+0x6e>
 8011998:	89a3      	ldrh	r3, [r4, #12]
 801199a:	07db      	lsls	r3, r3, #31
 801199c:	d5e1      	bpl.n	8011962 <__swbuf_r+0x2e>
 801199e:	2e0a      	cmp	r6, #10
 80119a0:	d1df      	bne.n	8011962 <__swbuf_r+0x2e>
 80119a2:	4621      	mov	r1, r4
 80119a4:	4628      	mov	r0, r5
 80119a6:	f7ff fa35 	bl	8010e14 <_fflush_r>
 80119aa:	2800      	cmp	r0, #0
 80119ac:	d0d9      	beq.n	8011962 <__swbuf_r+0x2e>
 80119ae:	e7d6      	b.n	801195e <__swbuf_r+0x2a>

080119b0 <__swsetup_r>:
 80119b0:	b538      	push	{r3, r4, r5, lr}
 80119b2:	4b29      	ldr	r3, [pc, #164]	@ (8011a58 <__swsetup_r+0xa8>)
 80119b4:	4605      	mov	r5, r0
 80119b6:	6818      	ldr	r0, [r3, #0]
 80119b8:	460c      	mov	r4, r1
 80119ba:	b118      	cbz	r0, 80119c4 <__swsetup_r+0x14>
 80119bc:	6a03      	ldr	r3, [r0, #32]
 80119be:	b90b      	cbnz	r3, 80119c4 <__swsetup_r+0x14>
 80119c0:	f7fc fcb0 	bl	800e324 <__sinit>
 80119c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119c8:	0719      	lsls	r1, r3, #28
 80119ca:	d422      	bmi.n	8011a12 <__swsetup_r+0x62>
 80119cc:	06da      	lsls	r2, r3, #27
 80119ce:	d407      	bmi.n	80119e0 <__swsetup_r+0x30>
 80119d0:	2209      	movs	r2, #9
 80119d2:	602a      	str	r2, [r5, #0]
 80119d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80119d8:	f04f 30ff 	mov.w	r0, #4294967295
 80119dc:	81a3      	strh	r3, [r4, #12]
 80119de:	e033      	b.n	8011a48 <__swsetup_r+0x98>
 80119e0:	0758      	lsls	r0, r3, #29
 80119e2:	d512      	bpl.n	8011a0a <__swsetup_r+0x5a>
 80119e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80119e6:	b141      	cbz	r1, 80119fa <__swsetup_r+0x4a>
 80119e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80119ec:	4299      	cmp	r1, r3
 80119ee:	d002      	beq.n	80119f6 <__swsetup_r+0x46>
 80119f0:	4628      	mov	r0, r5
 80119f2:	f7fd fc15 	bl	800f220 <_free_r>
 80119f6:	2300      	movs	r3, #0
 80119f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80119fa:	89a3      	ldrh	r3, [r4, #12]
 80119fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011a00:	81a3      	strh	r3, [r4, #12]
 8011a02:	2300      	movs	r3, #0
 8011a04:	6063      	str	r3, [r4, #4]
 8011a06:	6923      	ldr	r3, [r4, #16]
 8011a08:	6023      	str	r3, [r4, #0]
 8011a0a:	89a3      	ldrh	r3, [r4, #12]
 8011a0c:	f043 0308 	orr.w	r3, r3, #8
 8011a10:	81a3      	strh	r3, [r4, #12]
 8011a12:	6923      	ldr	r3, [r4, #16]
 8011a14:	b94b      	cbnz	r3, 8011a2a <__swsetup_r+0x7a>
 8011a16:	89a3      	ldrh	r3, [r4, #12]
 8011a18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011a1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011a20:	d003      	beq.n	8011a2a <__swsetup_r+0x7a>
 8011a22:	4621      	mov	r1, r4
 8011a24:	4628      	mov	r0, r5
 8011a26:	f000 f882 	bl	8011b2e <__smakebuf_r>
 8011a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a2e:	f013 0201 	ands.w	r2, r3, #1
 8011a32:	d00a      	beq.n	8011a4a <__swsetup_r+0x9a>
 8011a34:	2200      	movs	r2, #0
 8011a36:	60a2      	str	r2, [r4, #8]
 8011a38:	6962      	ldr	r2, [r4, #20]
 8011a3a:	4252      	negs	r2, r2
 8011a3c:	61a2      	str	r2, [r4, #24]
 8011a3e:	6922      	ldr	r2, [r4, #16]
 8011a40:	b942      	cbnz	r2, 8011a54 <__swsetup_r+0xa4>
 8011a42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011a46:	d1c5      	bne.n	80119d4 <__swsetup_r+0x24>
 8011a48:	bd38      	pop	{r3, r4, r5, pc}
 8011a4a:	0799      	lsls	r1, r3, #30
 8011a4c:	bf58      	it	pl
 8011a4e:	6962      	ldrpl	r2, [r4, #20]
 8011a50:	60a2      	str	r2, [r4, #8]
 8011a52:	e7f4      	b.n	8011a3e <__swsetup_r+0x8e>
 8011a54:	2000      	movs	r0, #0
 8011a56:	e7f7      	b.n	8011a48 <__swsetup_r+0x98>
 8011a58:	200001a8 	.word	0x200001a8

08011a5c <_raise_r>:
 8011a5c:	291f      	cmp	r1, #31
 8011a5e:	b538      	push	{r3, r4, r5, lr}
 8011a60:	4605      	mov	r5, r0
 8011a62:	460c      	mov	r4, r1
 8011a64:	d904      	bls.n	8011a70 <_raise_r+0x14>
 8011a66:	2316      	movs	r3, #22
 8011a68:	6003      	str	r3, [r0, #0]
 8011a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8011a6e:	bd38      	pop	{r3, r4, r5, pc}
 8011a70:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011a72:	b112      	cbz	r2, 8011a7a <_raise_r+0x1e>
 8011a74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011a78:	b94b      	cbnz	r3, 8011a8e <_raise_r+0x32>
 8011a7a:	4628      	mov	r0, r5
 8011a7c:	f000 f830 	bl	8011ae0 <_getpid_r>
 8011a80:	4622      	mov	r2, r4
 8011a82:	4601      	mov	r1, r0
 8011a84:	4628      	mov	r0, r5
 8011a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a8a:	f000 b817 	b.w	8011abc <_kill_r>
 8011a8e:	2b01      	cmp	r3, #1
 8011a90:	d00a      	beq.n	8011aa8 <_raise_r+0x4c>
 8011a92:	1c59      	adds	r1, r3, #1
 8011a94:	d103      	bne.n	8011a9e <_raise_r+0x42>
 8011a96:	2316      	movs	r3, #22
 8011a98:	6003      	str	r3, [r0, #0]
 8011a9a:	2001      	movs	r0, #1
 8011a9c:	e7e7      	b.n	8011a6e <_raise_r+0x12>
 8011a9e:	2100      	movs	r1, #0
 8011aa0:	4620      	mov	r0, r4
 8011aa2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011aa6:	4798      	blx	r3
 8011aa8:	2000      	movs	r0, #0
 8011aaa:	e7e0      	b.n	8011a6e <_raise_r+0x12>

08011aac <raise>:
 8011aac:	4b02      	ldr	r3, [pc, #8]	@ (8011ab8 <raise+0xc>)
 8011aae:	4601      	mov	r1, r0
 8011ab0:	6818      	ldr	r0, [r3, #0]
 8011ab2:	f7ff bfd3 	b.w	8011a5c <_raise_r>
 8011ab6:	bf00      	nop
 8011ab8:	200001a8 	.word	0x200001a8

08011abc <_kill_r>:
 8011abc:	b538      	push	{r3, r4, r5, lr}
 8011abe:	2300      	movs	r3, #0
 8011ac0:	4d06      	ldr	r5, [pc, #24]	@ (8011adc <_kill_r+0x20>)
 8011ac2:	4604      	mov	r4, r0
 8011ac4:	4608      	mov	r0, r1
 8011ac6:	4611      	mov	r1, r2
 8011ac8:	602b      	str	r3, [r5, #0]
 8011aca:	f7f0 fce8 	bl	800249e <_kill>
 8011ace:	1c43      	adds	r3, r0, #1
 8011ad0:	d102      	bne.n	8011ad8 <_kill_r+0x1c>
 8011ad2:	682b      	ldr	r3, [r5, #0]
 8011ad4:	b103      	cbz	r3, 8011ad8 <_kill_r+0x1c>
 8011ad6:	6023      	str	r3, [r4, #0]
 8011ad8:	bd38      	pop	{r3, r4, r5, pc}
 8011ada:	bf00      	nop
 8011adc:	200019bc 	.word	0x200019bc

08011ae0 <_getpid_r>:
 8011ae0:	f7f0 bcd6 	b.w	8002490 <_getpid>

08011ae4 <__swhatbuf_r>:
 8011ae4:	b570      	push	{r4, r5, r6, lr}
 8011ae6:	460c      	mov	r4, r1
 8011ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011aec:	4615      	mov	r5, r2
 8011aee:	2900      	cmp	r1, #0
 8011af0:	461e      	mov	r6, r3
 8011af2:	b096      	sub	sp, #88	@ 0x58
 8011af4:	da0c      	bge.n	8011b10 <__swhatbuf_r+0x2c>
 8011af6:	89a3      	ldrh	r3, [r4, #12]
 8011af8:	2100      	movs	r1, #0
 8011afa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011afe:	bf14      	ite	ne
 8011b00:	2340      	movne	r3, #64	@ 0x40
 8011b02:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011b06:	2000      	movs	r0, #0
 8011b08:	6031      	str	r1, [r6, #0]
 8011b0a:	602b      	str	r3, [r5, #0]
 8011b0c:	b016      	add	sp, #88	@ 0x58
 8011b0e:	bd70      	pop	{r4, r5, r6, pc}
 8011b10:	466a      	mov	r2, sp
 8011b12:	f000 f849 	bl	8011ba8 <_fstat_r>
 8011b16:	2800      	cmp	r0, #0
 8011b18:	dbed      	blt.n	8011af6 <__swhatbuf_r+0x12>
 8011b1a:	9901      	ldr	r1, [sp, #4]
 8011b1c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011b20:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011b24:	4259      	negs	r1, r3
 8011b26:	4159      	adcs	r1, r3
 8011b28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011b2c:	e7eb      	b.n	8011b06 <__swhatbuf_r+0x22>

08011b2e <__smakebuf_r>:
 8011b2e:	898b      	ldrh	r3, [r1, #12]
 8011b30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b32:	079d      	lsls	r5, r3, #30
 8011b34:	4606      	mov	r6, r0
 8011b36:	460c      	mov	r4, r1
 8011b38:	d507      	bpl.n	8011b4a <__smakebuf_r+0x1c>
 8011b3a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011b3e:	6023      	str	r3, [r4, #0]
 8011b40:	6123      	str	r3, [r4, #16]
 8011b42:	2301      	movs	r3, #1
 8011b44:	6163      	str	r3, [r4, #20]
 8011b46:	b003      	add	sp, #12
 8011b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b4a:	466a      	mov	r2, sp
 8011b4c:	ab01      	add	r3, sp, #4
 8011b4e:	f7ff ffc9 	bl	8011ae4 <__swhatbuf_r>
 8011b52:	9f00      	ldr	r7, [sp, #0]
 8011b54:	4605      	mov	r5, r0
 8011b56:	4639      	mov	r1, r7
 8011b58:	4630      	mov	r0, r6
 8011b5a:	f7fd fbd3 	bl	800f304 <_malloc_r>
 8011b5e:	b948      	cbnz	r0, 8011b74 <__smakebuf_r+0x46>
 8011b60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b64:	059a      	lsls	r2, r3, #22
 8011b66:	d4ee      	bmi.n	8011b46 <__smakebuf_r+0x18>
 8011b68:	f023 0303 	bic.w	r3, r3, #3
 8011b6c:	f043 0302 	orr.w	r3, r3, #2
 8011b70:	81a3      	strh	r3, [r4, #12]
 8011b72:	e7e2      	b.n	8011b3a <__smakebuf_r+0xc>
 8011b74:	89a3      	ldrh	r3, [r4, #12]
 8011b76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b7e:	81a3      	strh	r3, [r4, #12]
 8011b80:	9b01      	ldr	r3, [sp, #4]
 8011b82:	6020      	str	r0, [r4, #0]
 8011b84:	b15b      	cbz	r3, 8011b9e <__smakebuf_r+0x70>
 8011b86:	4630      	mov	r0, r6
 8011b88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b8c:	f000 f81e 	bl	8011bcc <_isatty_r>
 8011b90:	b128      	cbz	r0, 8011b9e <__smakebuf_r+0x70>
 8011b92:	89a3      	ldrh	r3, [r4, #12]
 8011b94:	f023 0303 	bic.w	r3, r3, #3
 8011b98:	f043 0301 	orr.w	r3, r3, #1
 8011b9c:	81a3      	strh	r3, [r4, #12]
 8011b9e:	89a3      	ldrh	r3, [r4, #12]
 8011ba0:	431d      	orrs	r5, r3
 8011ba2:	81a5      	strh	r5, [r4, #12]
 8011ba4:	e7cf      	b.n	8011b46 <__smakebuf_r+0x18>
	...

08011ba8 <_fstat_r>:
 8011ba8:	b538      	push	{r3, r4, r5, lr}
 8011baa:	2300      	movs	r3, #0
 8011bac:	4d06      	ldr	r5, [pc, #24]	@ (8011bc8 <_fstat_r+0x20>)
 8011bae:	4604      	mov	r4, r0
 8011bb0:	4608      	mov	r0, r1
 8011bb2:	4611      	mov	r1, r2
 8011bb4:	602b      	str	r3, [r5, #0]
 8011bb6:	f7f0 fcb5 	bl	8002524 <_fstat>
 8011bba:	1c43      	adds	r3, r0, #1
 8011bbc:	d102      	bne.n	8011bc4 <_fstat_r+0x1c>
 8011bbe:	682b      	ldr	r3, [r5, #0]
 8011bc0:	b103      	cbz	r3, 8011bc4 <_fstat_r+0x1c>
 8011bc2:	6023      	str	r3, [r4, #0]
 8011bc4:	bd38      	pop	{r3, r4, r5, pc}
 8011bc6:	bf00      	nop
 8011bc8:	200019bc 	.word	0x200019bc

08011bcc <_isatty_r>:
 8011bcc:	b538      	push	{r3, r4, r5, lr}
 8011bce:	2300      	movs	r3, #0
 8011bd0:	4d05      	ldr	r5, [pc, #20]	@ (8011be8 <_isatty_r+0x1c>)
 8011bd2:	4604      	mov	r4, r0
 8011bd4:	4608      	mov	r0, r1
 8011bd6:	602b      	str	r3, [r5, #0]
 8011bd8:	f7f0 fcb3 	bl	8002542 <_isatty>
 8011bdc:	1c43      	adds	r3, r0, #1
 8011bde:	d102      	bne.n	8011be6 <_isatty_r+0x1a>
 8011be0:	682b      	ldr	r3, [r5, #0]
 8011be2:	b103      	cbz	r3, 8011be6 <_isatty_r+0x1a>
 8011be4:	6023      	str	r3, [r4, #0]
 8011be6:	bd38      	pop	{r3, r4, r5, pc}
 8011be8:	200019bc 	.word	0x200019bc

08011bec <_init>:
 8011bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bee:	bf00      	nop
 8011bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bf2:	bc08      	pop	{r3}
 8011bf4:	469e      	mov	lr, r3
 8011bf6:	4770      	bx	lr

08011bf8 <_fini>:
 8011bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bfa:	bf00      	nop
 8011bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bfe:	bc08      	pop	{r3}
 8011c00:	469e      	mov	lr, r3
 8011c02:	4770      	bx	lr
